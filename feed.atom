<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">Data, ML &amp; Leadership</title>
  <id>https://bugra.github.io/</id>
  <updated>2020-04-26T00:00:00Z</updated>
  <link href="https://bugra.github.io/" />
  <link href="https://bugra.github.io/" rel="self" />
  <subtitle type="text">Data, ML &amp; Leadership Atom Feed</subtitle>
  <generator>Werkzeug</generator>
  <entry xml:base="https://bugra.github.io/">
    <title type="text">PCA, EigenFace and All That</title>
    <id>https://bugra.github.io/posts/2013/7/27/PCA-EigenFace-And-All-That</id>
    <updated>2013-07-27T00:00:00Z</updated>
    <published>2013-07-27T00:00:00Z</published>
    <link href="https://bugra.github.io/posts/2013/7/27/PCA-EigenFace-And-All-That" />
    <author>
      <name>Bugra Akyildiz</name>
    </author>
    <content type="html">&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;
  &lt;title&gt;-&lt;/title&gt;
  &lt;style&gt;
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
  &lt;/style&gt;
  &lt;!--[if lt IE 9]&gt;
    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;
  &lt;![endif]--&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;PCA(Principal Component Analysis) is one of the most commonly used unsupervised learning algorithm to compress, extract features for data and even for dimensionality reduction purposes. It has quite a lof of applications as follows:&lt;/p&gt;
&lt;h3 id=&quot;applications&quot;&gt;Applications&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Useful for compression and classfication of data.&lt;/li&gt;
&lt;li&gt;Aim is to reduce the number of variables, but at the same time, preserve most of information (variation), which may not necessarily hold true in general.&lt;/li&gt;
&lt;li&gt;New variables called principal components(PC) are uncorrelated, are ordered by fraction of total information each retains.&lt;/li&gt;
&lt;li&gt;PC’s are a series of linear least squares fits to a sample, each orthogonal to all previous.&lt;/li&gt;
&lt;li&gt;Identify how different variables work together to create the dynamics of the system.&lt;/li&gt;
&lt;li&gt;Reduce the dimensionality of the data.&lt;/li&gt;
&lt;li&gt;Decrease the redundancy of the data.&lt;/li&gt;
&lt;li&gt;Filter some of the noise in the data.&lt;/li&gt;
&lt;li&gt;Compress the data.&lt;/li&gt;
&lt;li&gt;Prepare the data for further analysis using other techniques.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What does it do in the first place?&lt;/p&gt;
&lt;h3 id=&quot;functions-of-pca&quot;&gt;Functions of PCA&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Is to reduce dimensionality by extracting the smallest number components that account for most of the variation in the original data. By doing so, we’d get get rid of the redundancy and preserve the variance in a smaller number of coefficients.&lt;/li&gt;
&lt;li&gt;PCA finds lines(2-d), planes(3-d) in a higher dimensional spaces that approximate the data in least squares(&lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;msub&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;l_2&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; norm).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Why do we choose PCA over other transformations which turn the original variables into a representation which depend on orthogonal bases, say Fourier Transform?&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Using a set of fixed set of components will give a good reconstruction of the same data(at least in least square sense, &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;msub&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;l_2&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; norm). However, Fourier transform does not guarantee such a premise.&lt;/li&gt;
&lt;li&gt;If the data has a lot of correlation among its variables(redundancy), then PCA could exploit this redundancy by uncorrelating the variables whereas Fourier transform cannot exploit this redundancy(at least explicitly).&lt;/li&gt;
&lt;li&gt;When PCA is used for dimensionality reduction, it is quite good at preserving the distance between the observations in the projection space.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;What about the disadvantages?&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The components are not independent but uncorrelated. It would be even better if we have a representation which are independent to each other. It is called unsurprisingly &lt;em&gt;Independent Component Analysis&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;PCA seeks for linear combinations of the original variables. The nonlinear combination may even yield better representation. PCA has an extension for doing this type of analysis, &lt;em&gt;Nonlinear PCA&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Instead of &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;msub&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;l_2&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; norm, it may be advantageous to use &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;msub&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;l_1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; norm. Especially, if the signal that we want to represent is sparse or has a sparse representation in some other space. PCA is extended for this specific problem as well, which is called &lt;em&gt;Sparse PCA&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;assumptions-that-pca-does&quot;&gt;Assumptions that PCA does:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Assumption 1: In general, high correlation between variables could be a sign of high redundancy.&lt;/li&gt;
&lt;li&gt;Assumption 2: The most important dynamics are the ones with the largest variance.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;eigenvalues-and-eigenvectors&quot;&gt;Eigenvalues and Eigenvectors&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Eigenvalues measure the amount of variation(information) explaiend by each principal components and will be largest for the first PC and smaller for the subsequent PCs.&lt;/li&gt;
&lt;li&gt;An eigenvalue greater than 1 indicates that principal component accounts for more variance than accounted by one of the original variables in standardized data. This could be used to threshold to determine the number of eigenvectors.&lt;/li&gt;
&lt;li&gt;Eigenvectors provide the weights to compute the uncorrelated principal components, which are the linear combination of the original variables.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;what-does-pca-do-in-a-nutshell&quot;&gt;What does PCA do (in a nutshell)?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;PCA transforms the observations into uncorrelated components, which are nothing but linear combination of observations.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;caveats&quot;&gt;Caveats&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;PCA is sensitive to scaling.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;By modifying the variance of the variables(scaling), it is possible to attribute different importance to them. By doing so, the prior information or the belief on the importance of the attributes can be preserved even in the PCA stage.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;definition-of-principal-components&quot;&gt;Definition of Principal Components&lt;/h3&gt;
&lt;p&gt;Given a sample &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;n&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; observations on a vector &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;p&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; variables:&lt;br /&gt;
&lt;math display=&quot;block&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;(&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mi&gt;…&lt;/mi&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;/msub&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;postfix&quot;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;x = (x_1, x_2, \ldots, x_p)&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; define the principal component of the sample by a linear transformation which is given as following:&lt;br /&gt;
&lt;math display=&quot;block&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;z&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;msup&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;/msup&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;munderover&gt;&lt;mo&gt;∑&lt;/mo&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;/munderover&gt;&lt;msub&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;msub&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt; z = a^T x = \displaystyle\sum_{i=1}^p a_i x_i &lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; where &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;a&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; is &lt;math display=&quot;block&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;(&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mi&gt;…&lt;/mi&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;/msub&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;postfix&quot;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt; a = (a_1, a_2, \ldots, a_p) &lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; which is chosen to maximize the variance of &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mi&gt;z&lt;/mi&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;z&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; and subject to &lt;math display=&quot;block&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;[&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;z&lt;/mi&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;z&lt;/mi&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;/msub&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;postfix&quot;&gt;]&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;mo&gt;&amp;gt;&lt;/mo&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mo&gt;≥&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt; cov[z_k, z_l] = 0, k \gt l \geq 1 &lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; and to &lt;math display=&quot;block&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;/msup&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt; a^T a = 1 &lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/p&gt;
&lt;h3 id=&quot;how-to-derive-the-coefficients-a&quot;&gt;How to derive the coefficients &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;a&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; ?&lt;/h3&gt;
&lt;p&gt;The variance is:&lt;br /&gt;
&lt;math display=&quot;block&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;[&lt;/mo&gt;&lt;mi&gt;z&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;postfix&quot;&gt;]&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mo&gt;&amp;lt;&lt;/mo&gt;&lt;msup&gt;&lt;mi&gt;z&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msup&gt;&lt;mo&gt;&amp;gt;&lt;/mo&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mo&gt;&amp;lt;&lt;/mo&gt;&lt;mi&gt;z&lt;/mi&gt;&lt;mover&gt;&lt;mo&gt;&amp;gt;&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/mover&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt; var[z] = \lt z^2\gt - \lt z \gt^2&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; &lt;math display=&quot;block&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;munderover&gt;&lt;mo&gt;∑&lt;/mo&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;/munderover&gt;&lt;msub&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;msub&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;&amp;lt;&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;msub&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;&amp;gt;&lt;/mo&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;munderover&gt;&lt;mo&gt;∑&lt;/mo&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;/munderover&gt;&lt;msub&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;msub&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;&amp;lt;&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;&amp;gt;&lt;/mo&gt;&lt;mo&gt;&amp;lt;&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;&amp;gt;&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt; = \displaystyle \sum_{i,j = 1}^p a_i a_j \lt x_i x_j \gt - \displaystyle \sum_{i,j=1}^p a_i a_j \lt x_i \gt \lt x_j \gt &lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; &lt;math display=&quot;block&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;munderover&gt;&lt;mo&gt;∑&lt;/mo&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;/munderover&gt;&lt;msub&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;msub&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;/msub&gt;&lt;msub&gt;&lt;mi&gt;S&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt; = \displaystyle\sum_{i,j = 1}^p a_i a_j S_{ij}  &lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; where &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;S&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mo&gt;&amp;lt;&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;msub&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;&amp;gt;&lt;/mo&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mo&gt;&amp;lt;&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;&amp;gt;&lt;/mo&gt;&lt;mo&gt;&amp;lt;&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;&amp;gt;&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;S_{ij} = \lt x_i x_j \gt - \lt x_i \gt \lt x_j \gt&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; is the covariance matrix for &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;x&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;.&lt;br /&gt;
To find &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;a&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; which maximizes &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;[&lt;/mo&gt;&lt;mi&gt;z&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;postfix&quot;&gt;]&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;var[z]&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; subject to &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;/msup&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;a^T a = 1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;, let us introduce a lagrange multiplier &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mi&gt;λ&lt;/mi&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\lambda&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;. Then, the maximization equation becomes &lt;math display=&quot;block&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;/msup&gt;&lt;mi&gt;S&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mi&gt;λ&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;(&lt;/mo&gt;&lt;msup&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;/msup&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;postfix&quot;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt; a^T S a - \lambda (a^T a - 1) &lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; If we take the derivative with respect to &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;a&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;, then the equation becomes &lt;math display=&quot;block&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;S&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mi&gt;λ&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt; S a - \lambda a = 0 &lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; &lt;math display=&quot;block&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;S&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mi&gt;λ&lt;/mi&gt;&lt;mi&gt;I&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;postfix&quot;&gt;)&lt;/mo&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt; (S - \lambda I) a = 0 &lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; Therefore, &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;a&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; is an eigenvector of &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mi&gt;S&lt;/mi&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;S&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; which has the corresponding value of &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mi&gt;λ&lt;/mi&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\lambda&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In short, we are interested in representing the most of the variation in the data by transforming the original variables into principal components. These components are orthogonal and ordered by magnitude so that the first few of them could explain most of the variation in the original observation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;eigenface&quot;&gt;EigenFace&lt;/h3&gt;
&lt;p&gt;PCA has a very good application which is in the computer vision domain, called &lt;a href=&quot;http://www.cs.ucsb.edu/~mturk/Papers/jcn.pdf&quot;&gt;EigenFace&lt;/a&gt;, &lt;a href=&quot;http://www.cs.ucsb.edu/~mturk/Papers/mturk-CVPR91.pdf&quot;&gt;short version&lt;/a&gt;. Eigenface is a name for eigenvectors which are the components of the face itself. It has been used for face recognition where the most variations considered as important. It was quite successful as well for some 20 years ago although it was replaced then by other methods. In this implementation, I used a particular subset of &lt;a href=&quot;http://cvc.yale.edu/projects/yalefaces/yalefaces.html&quot;&gt;Yale Face Database&lt;/a&gt;.&lt;br /&gt;
The images that I used are given below: &lt;img src=&quot;https://raw.github.com/bugra/EigenFace/master/img/images.png&quot; title=&quot;Images&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;
&lt;p&gt;If we average the face used for PCA, we get the following face: &lt;img src=&quot;https://raw.github.com/bugra/EigenFace/master/img/average_face.png&quot; title=&quot;Average Face&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The eigenfaces that we generated out of 11 faces are given below. &lt;img src=&quot;https://raw.github.com/bugra/EigenFace/master/img/eigen_faces.png&quot; title=&quot;EigenFaces&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The eigenface which has the most variation(almost half of it) is given below(note the illumination variation) &lt;img src=&quot;https://raw.github.com/bugra/EigenFace/master/img/first_eigen_face.png&quot; title=&quot;First EigenFace&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Cumulative sum of first 10 eigenvalues is given below. &lt;img src=&quot;https://raw.github.com/bugra/EigenFace/master/img/eigen_values.png&quot; title=&quot;Cumulative Sum of Eigenvalues&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;
&lt;p&gt;As it could be seen from &lt;a href=&quot;http://nbviewer.ipython.org/6099547&quot;&gt;here&lt;/a&gt;(the last line), the top 4 eigenfaces can explain 95% variance of the faces.&lt;/p&gt;
&lt;p&gt;The program that I used to generate the images in &lt;a href=&quot;https://github.com/bugra/EigenFace&quot;&gt;here&lt;/a&gt; and see the &lt;a href=&quot;http://nbviewer.ipython.org/6099547&quot;&gt;Notebook&lt;/a&gt; for the flow of overall program.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</content>
  </entry>
  <entry xml:base="https://bugra.github.io/">
    <title type="text">Pydata Silicon Valley 2014 Part 2</title>
    <id>https://bugra.github.io/posts/2014/7/20/pydata-silicon-valley-part-2</id>
    <updated>2014-07-20T00:00:00Z</updated>
    <published>2014-07-20T00:00:00Z</published>
    <link href="https://bugra.github.io/posts/2014/7/20/pydata-silicon-valley-part-2" />
    <author>
      <name>Bugra Akyildiz</name>
    </author>
    <content type="html">&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;
  &lt;title&gt;-&lt;/title&gt;
  &lt;style&gt;
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
    pre &gt; code.sourceCode { white-space: pre; position: relative; }
    pre &gt; code.sourceCode &gt; span { display: inline-block; line-height: 1.25; }
    pre &gt; code.sourceCode &gt; span:empty { height: 1.2em; }
    code.sourceCode &gt; span { color: inherit; text-decoration: inherit; }
    div.sourceCode { margin: 1em 0; }
    pre.sourceCode { margin: 0; }
    @media screen {
    div.sourceCode { overflow: auto; }
    }
    @media print {
    pre &gt; code.sourceCode { white-space: pre-wrap; }
    pre &gt; code.sourceCode &gt; span { text-indent: -5em; padding-left: 5em; }
    }
    pre.numberSource code
      { counter-reset: source-line 0; }
    pre.numberSource code &gt; span
      { position: relative; left: -4em; counter-increment: source-line; }
    pre.numberSource code &gt; span &gt; a:first-child::before
      { content: counter(source-line);
        position: relative; left: -1em; text-align: right; vertical-align: baseline;
        border: none; display: inline-block;
        -webkit-touch-callout: none; -webkit-user-select: none;
        -khtml-user-select: none; -moz-user-select: none;
        -ms-user-select: none; user-select: none;
        padding: 0 4px; width: 4em;
        color: #aaaaaa;
      }
    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
    div.sourceCode
      {   }
    @media screen {
    pre &gt; code.sourceCode &gt; span &gt; a:first-child::before { text-decoration: underline; }
    }
    code span.al { color: #ff0000; font-weight: bold; } /* Alert */
    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
    code span.at { color: #7d9029; } /* Attribute */
    code span.bn { color: #40a070; } /* BaseN */
    code span.bu { } /* BuiltIn */
    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
    code span.ch { color: #4070a0; } /* Char */
    code span.cn { color: #880000; } /* Constant */
    code span.co { color: #60a0b0; font-style: italic; } /* Comment */
    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
    code span.do { color: #ba2121; font-style: italic; } /* Documentation */
    code span.dt { color: #902000; } /* DataType */
    code span.dv { color: #40a070; } /* DecVal */
    code span.er { color: #ff0000; font-weight: bold; } /* Error */
    code span.ex { } /* Extension */
    code span.fl { color: #40a070; } /* Float */
    code span.fu { color: #06287e; } /* Function */
    code span.im { } /* Import */
    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
    code span.kw { color: #007020; font-weight: bold; } /* Keyword */
    code span.op { color: #666666; } /* Operator */
    code span.ot { color: #007020; } /* Other */
    code span.pp { color: #bc7a00; } /* Preprocessor */
    code span.sc { color: #4070a0; } /* SpecialChar */
    code span.ss { color: #bb6688; } /* SpecialString */
    code span.st { color: #4070a0; } /* String */
    code span.va { color: #19177c; } /* Variable */
    code span.vs { color: #4070a0; } /* VerbatimString */
    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
  &lt;/style&gt;
  &lt;!--[if lt IE 9]&gt;
    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;
  &lt;![endif]--&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;figure&gt;
&lt;img src=&quot;http://i.imgur.com/tInmSM1.png&quot; title=&quot;Pydata Silicon Valley 2014&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Pydata Silicon Valley 2014&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The Pydata Silicon Valley videos are put into Youtube, thanks to Facebook, Continuum and Parse.ly. Check it &lt;a href=&quot;https://www.youtube.com/user/PyDataTV&quot;&gt;out&lt;/a&gt;. They are pretty great.&lt;/p&gt;
&lt;p&gt;I already wrote about(kind of wrap-up) the presentations that I attended &lt;a href=&quot;http://bugra.github.io/work/notes/2014-05-12/pydata-silicon-valley-2014/&quot;&gt;here&lt;/a&gt;. This one will be similar to the ones that I could not attend but watch the videos.&lt;/p&gt;
&lt;p&gt;I somehow managed to miss some of the most interesting talks but could follow the presentation much better through their videos on Youtube than real-life so it kind of worked better than I expected.&lt;/p&gt;
&lt;h3 id=&quot;ggplot&quot;&gt;ggplot&lt;/h3&gt;
&lt;p&gt;Presenter: Greg Lamb&lt;/p&gt;
&lt;p&gt;As I already mentioned in the first part, this tutorial introduces &lt;code&gt;ggplot&lt;/code&gt; visualization library which is based on Grammar of Graphics.&lt;/p&gt;
&lt;h3 id=&quot;what-is-ggplot&quot;&gt;What is ggplot?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Based on Grammar of Graphics&lt;/li&gt;
&lt;li&gt;Implementation in Python(from R implementation, ggplot2)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;matplotlib&quot;&gt;Matplotlib&lt;/h3&gt;
&lt;h4 id=&quot;advantages&quot;&gt;Advantages&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Mature, it has been around for some time&lt;/li&gt;
&lt;li&gt;Integration with Ipython Notebook&lt;/li&gt;
&lt;li&gt;Customizable&lt;/li&gt;
&lt;li&gt;Community&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;disadvantages&quot;&gt;Disadvantages&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;API, learning curve, syntax, default themes&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;d3.js is like a Mona Lisa painting where &lt;code&gt;ggplot&lt;/code&gt; is like a camera. You buy the painting to show off where camera is more like a utility.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This comparison quite good, generally the plots(either ggplot or matplotlib) are either ad-hoc analysises or for internal usage. If you are producing something consumer facing, you should be using much more suited library for the job. From the conference, I actually used &lt;code&gt;ggplot&lt;/code&gt; for couple of projects and I liked its syntax and api as well as the integration with pandas. From a 2-3 years matplotlib user, I think it will be great library when it reaches maturity. However, I think &lt;code&gt;ggplot&lt;/code&gt; is more a competitor to &lt;code&gt;seaborn&lt;/code&gt; rather than matplotlib. Matlotlib is a plotting library in a much broader sense(it has support for maps, images, 3D visualizations as well) where &lt;code&gt;ggplot&lt;/code&gt; and &lt;code&gt;seaborn&lt;/code&gt; are more targeted to a specific subset of visualizations. The subset is quite important, though.&lt;/p&gt;
&lt;p&gt;That being said, it attacks the disadvantages of matplotlib quite well. It has great API, concise syntax and much better default themes.&lt;/p&gt;
&lt;h3 id=&quot;syntax&quot;&gt;Syntax&lt;/h3&gt;
&lt;p&gt;Especially, syntax of &lt;code&gt;ggplot&lt;/code&gt; is great.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;#cb1-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-2&quot;&gt;&lt;a href=&quot;#cb1-2&quot;&gt;&lt;/a&gt;p &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; ggplot(mtcars, aes(x&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;’wt’, y&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;’mpg’))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is &lt;em&gt;what&lt;/em&gt; step. This is where you say I want to bind &lt;code&gt;wt&lt;/code&gt; to x axis and &lt;code&gt;mpg&lt;/code&gt; to y axis. Then, in the &lt;em&gt;how&lt;/em&gt; step, you will say how&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;#cb2-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-2&quot;&gt;&lt;a href=&quot;#cb2-2&quot;&gt;&lt;/a&gt;p &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; geom_point()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This produces a scatterplot. If you want to produce a density graph, you could change it &lt;code&gt;p + geom_density()&lt;/code&gt; without changing &lt;em&gt;what&lt;/em&gt; step. This is pretty great. If you want to put also an averaging window over the variable, &lt;code&gt;p + geom_point() + stat_smooth()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This layered approach provides couple of benefits. All of the layers can be treated independently as visualization is mainly defined in &lt;em&gt;what&lt;/em&gt; step rather than &lt;em&gt;how&lt;/em&gt;. Therefore, you could easily experiment and play with different layers on your data visualization. Icing on the cake, faceting becomes very easy with &lt;code&gt;ggplot&lt;/code&gt; as it has a faceting utility out of the box. I am big fan of faceting, in order to understand some categorical variable on the parameters and to be able to see the effect, so it is a great tool to do exploratory data analysis. If you want to learn more, check out the &lt;a href=&quot;http://yhat.github.io/ggplot/&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;functional-performance-with-core-data-structures&quot;&gt;Functional Performance with Core Data Structures&lt;/h3&gt;
&lt;p&gt;Presenter: Matthew Rocklin&lt;/p&gt;
&lt;p&gt;The premise of this talk is the following two:&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;Pure Python is not slow&lt;/li&gt;
&lt;li&gt;Python is a decent language.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In order to prove the first one, he provides benchmarks to show that Python is not “that” slow comparing to other languages. For second one, he introduces a functional programming library &lt;a href=&quot;https://github.com/pytoolz/toolz/&quot;&gt;Toolz&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The library is actually pretty great. He was influenced by Clojure which I wrote how great it is &lt;a href=&quot;http://bugra.github.io/work/notes/2014-07-09/pigpen-hadoop-pig-clojure-cascading/&quot;&gt;here.&lt;/a&gt; The library promotes laziness, functions, pure functions, composability; all of the good stuff that are common in functional programming languages. Surprisingly, some of the functions are actually same with standard library function like; &lt;code&gt;groupby&lt;/code&gt; in &lt;code&gt;itertools&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt; and he claimed functions are actually faster than standard library equivalents. Some of the functions are not in the Python like &lt;code&gt;take&lt;/code&gt;, &lt;code&gt;interleave&lt;/code&gt;, or &lt;code&gt;pipe&lt;/code&gt;. &lt;code&gt;pipe&lt;/code&gt; is pretty good, it provides a similar mechanism with &lt;code&gt;-&amp;gt;&amp;gt;&lt;/code&gt; clojure where you could chain a bunch of functions and does not sacrifice readability and execution order.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb3&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb3-1&quot;&gt;&lt;a href=&quot;#cb3-1&quot;&gt;&lt;/a&gt;pipe(&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, double, &lt;span class=&quot;bu&quot;&gt;str&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to get the string representation of 3.0. This is a great way to compose functions.&lt;/p&gt;
&lt;p&gt;Another example he gave is much more impressive:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb4&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb4-1&quot;&gt;&lt;a href=&quot;#cb4-1&quot;&gt;&lt;/a&gt;pipe(‘data&lt;span class=&quot;op&quot;&gt;/&lt;/span&gt;tale&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;of&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;two&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;cities.txt’, &lt;span class=&quot;bu&quot;&gt;open&lt;/span&gt;,&lt;/span&gt;
&lt;span id=&quot;cb4-2&quot;&gt;&lt;a href=&quot;#cb4-2&quot;&gt;&lt;/a&gt;                                    &lt;span class=&quot;bu&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;bu&quot;&gt;str&lt;/span&gt;.strip),&lt;/span&gt;
&lt;span id=&quot;cb4-3&quot;&gt;&lt;a href=&quot;#cb4-3&quot;&gt;&lt;/a&gt;                                    &lt;span class=&quot;bu&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;bu&quot;&gt;str&lt;/span&gt;.split),&lt;/span&gt;
&lt;span id=&quot;cb4-4&quot;&gt;&lt;a href=&quot;#cb4-4&quot;&gt;&lt;/a&gt;                                    concat,&lt;/span&gt;
&lt;span id=&quot;cb4-5&quot;&gt;&lt;a href=&quot;#cb4-5&quot;&gt;&lt;/a&gt;                                    &lt;span class=&quot;bu&quot;&gt;map&lt;/span&gt;(stem),&lt;/span&gt;
&lt;span id=&quot;cb4-6&quot;&gt;&lt;a href=&quot;#cb4-6&quot;&gt;&lt;/a&gt;                                    frequencies)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is pretty great.&lt;/p&gt;
&lt;p&gt;He also gave another library direction which implements the same functionality of Toolz in C, which is more efficient, called unsurprisingly &lt;a href=&quot;https://github.com/pytoolz/cytoolz&quot;&gt;Cytoolz&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I am quite happy to see there are great libraries like these two to make at least a dent for functional programming in Python.&lt;/p&gt;
&lt;p&gt;He then summarizes why Functional programming is becoming more relevant as following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Good software practices&lt;/li&gt;
&lt;li&gt;Composition promotes scalable software systems&lt;/li&gt;
&lt;li&gt;Purity, composition promotes testing&lt;/li&gt;
&lt;li&gt;Sequence abstractions support streaming computation(if you have low memory, you have no other choice anyway)&lt;/li&gt;
&lt;li&gt;Purity, serializability promotes parallel and concurrent processing.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;querying-your-database-in-natural-languages&quot;&gt;Querying your database in natural languages&lt;/h3&gt;
&lt;p&gt;Presenter: Daniel Moisset&lt;/p&gt;
&lt;p&gt;This is one of the talk that I regretted most that I did not attend. Not only it is quite interesting on its own, one of previous project that I did(querying yelp restaurants with natural language) is directly related.&lt;/p&gt;
&lt;p&gt;Generally, speaking or natural language in writing provides a much easy interface to user. However, the systems that process these inputs are in their early periods so they cannot really process the inputs very effectively. Therefore, you’d see all those radiobuttons, sliders, checkboxes and text input area for user to enter structured information rather than user typing “show me the closest five restaurants that serve Turkish food and accepts credit card”. Question types vary quite a lot for different people and even the order, verbs and nouns are not something most people agree on. Therefore, most companies provide “intuitive” interfaces to get structuresd data, to make it easier sometimes they help, too.(autocomplete) &lt;a href=&quot;http://quepy.machinalis.com/&quot;&gt;Quepy&lt;/a&gt; attacks the problem in a somehow different angle. First, it tries to find &lt;strong&gt;what&lt;/strong&gt; is being filtered and then, try to return the query based on the filtering parameters. As I mentioned later, tackling the question variation in a regular expression way is somehow limited but since building different of versions of questions is easy, it kind of compensates its limitation by providing ease of use. Other than that, installing and integrating the library in your application is quite easy.(some of the commands resemble Django as well). It is a very nice library.&lt;/p&gt;
&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Data is everywhere&lt;/li&gt;
&lt;li&gt;Collecting data is not the problem but what to do with is the real problem&lt;/li&gt;
&lt;li&gt;Any operation starts with selecting and filtering data.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;natural-language-queries&quot;&gt;Natural Language Queries&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Very accessible, trivial to learn&lt;/li&gt;
&lt;li&gt;Weak is mos applications as it has limited list of queries that it can handle&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;quepy&quot;&gt;&lt;a href=&quot;http://quepy.machinalis.com/&quot;&gt;Quepy&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;They propose &lt;strong&gt;Quepy&lt;/strong&gt; which is an &lt;a href=&quot;https://github.com/machinalis/quepy&quot;&gt;open-sourced&lt;/a&gt; framework to translate natural language questions into a database query langauge.&lt;/li&gt;
&lt;li&gt;Support for database query language is somehow limited(SparQL and MQL).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;approach&quot;&gt;Approach&lt;/h3&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;First it parses the query&lt;/li&gt;
&lt;li&gt;Matches and creates an intermediate representation&lt;/li&gt;
&lt;li&gt;Then, based on representation, it generates query and Domain Specific Language&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;parsing&quot;&gt;Parsing&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;It is done in a word level
&lt;ul&gt;
&lt;li&gt;is: is/be/VBZ&lt;/li&gt;
&lt;li&gt;swallows: swallows/swallow/NNS&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Question Rule =&amp;gt; Regular expressions
&lt;ul&gt;
&lt;li&gt;Token(“what”) + Lemma (“be”) + Question Pos(“DT”) + Pos(“NN”) =&amp;gt; The word “what” followed by any verb “of to be” veryb, optionally followed by a word determines the count(“all”, “every”), followed by one or more nouns.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;In my opinion, the biggest disadvantage is question rule. As the regular expressions are very limited in terms of structure, and it seems only could “answer” &lt;em&gt;Wh&lt;/em&gt; questions for specific forms. “Give me”, “Find me” order forms, yes-no questions, subordinate clauses(this corresponds to “where” in sql langauge) do not exist. Otherwise, library especially in terms of usage seems very good. However, various question forms could be easily added to the question types using &lt;code&gt;QuestionTemplate&lt;/code&gt;. However, I was still expecting, very common question type support out of the box for a natural langauge translator to database query.(Only this one is quite hard problem to be fair)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;intermediate-representation&quot;&gt;Intermediate Representation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Graph-like, with some known values and some holes(x0, x1, x2). Always has a “root”.&lt;/li&gt;
&lt;li&gt;Similar to knowledge databases(like freebase)&lt;/li&gt;
&lt;li&gt;Easy to build from python code.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;dsl&quot;&gt;DSL&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Single concepts with fixed relations or entities.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb5&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb5-1&quot;&gt;&lt;a href=&quot;#cb5-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; WhatIs(QuestionTemplate):&lt;/span&gt;
&lt;span id=&quot;cb5-2&quot;&gt;&lt;a href=&quot;#cb5-2&quot;&gt;&lt;/a&gt;    regex &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; Lemma(“what”) &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; Lemma(“be”) &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;\&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-3&quot;&gt;&lt;a href=&quot;#cb5-3&quot;&gt;&lt;/a&gt;        Question(POS(“DT”)) &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; Thing() &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; Question(POS(“.”))&lt;/span&gt;
&lt;span id=&quot;cb5-4&quot;&gt;&lt;a href=&quot;#cb5-4&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-5&quot;&gt;&lt;a href=&quot;#cb5-5&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; interpret(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;, match):&lt;/span&gt;
&lt;span id=&quot;cb5-6&quot;&gt;&lt;a href=&quot;#cb5-6&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; DefinitionOf(match, thing)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This Python code is great in terms of several aspects. First is very easy to construct question types in this from. Second, it is very expressive and readable what type of question types that you cover if you want to see what types of questions you already covered. For fixed type DSLs, it resembles a lot like freebase.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb6&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb6-1&quot;&gt;&lt;a href=&quot;#cb6-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; IsPerson(FixedType):&lt;/span&gt;
&lt;span id=&quot;cb6-2&quot;&gt;&lt;a href=&quot;#cb6-2&quot;&gt;&lt;/a&gt;    fixed_type &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; “&lt;span class=&quot;op&quot;&gt;/&lt;/span&gt;people&lt;span class=&quot;op&quot;&gt;/&lt;/span&gt;person”&lt;/span&gt;
&lt;span id=&quot;cb6-3&quot;&gt;&lt;a href=&quot;#cb6-3&quot;&gt;&lt;/a&gt;    fixed_type_relation &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; “&lt;span class=&quot;op&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;bu&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;bu&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;/&lt;/span&gt;type”&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;apps-gluing-it-all-together&quot;&gt;Apps: Gluing it all together&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;You build a Python package with&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb7&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb7-1&quot;&gt;&lt;a href=&quot;#cb7-1&quot;&gt;&lt;/a&gt;quepy startapp myapp&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;There you add dsl and questions templates&lt;/li&gt;
&lt;li&gt;Then configure it editing &lt;code&gt;myapp/settings.py&lt;/code&gt;(output query language, data encoding)&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Resembles a lot like Django.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb8&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb8-1&quot;&gt;&lt;a href=&quot;#cb8-1&quot;&gt;&lt;/a&gt;app &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; quepy.install(“myapp”)&lt;/span&gt;
&lt;span id=&quot;cb8-2&quot;&gt;&lt;a href=&quot;#cb8-2&quot;&gt;&lt;/a&gt;question &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; “what &lt;span class=&quot;kw&quot;&gt;is&lt;/span&gt; love”&lt;/span&gt;
&lt;span id=&quot;cb8-3&quot;&gt;&lt;a href=&quot;#cb8-3&quot;&gt;&lt;/a&gt;target, query, metadata &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; app.get_query(question)&lt;/span&gt;
&lt;span id=&quot;cb8-4&quot;&gt;&lt;a href=&quot;#cb8-4&quot;&gt;&lt;/a&gt;db.execute(query)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;the-good-things&quot;&gt;The Good Things&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Effort to add questions template is small and the benefit is linear with respect to effort.&lt;/li&gt;
&lt;li&gt;Good for industry applications.&lt;/li&gt;
&lt;li&gt;Low specialization requireed to extend&lt;/li&gt;
&lt;li&gt;Human work is very parallelizable&lt;/li&gt;
&lt;li&gt;Easy to get many people to work on questions.&lt;/li&gt;
&lt;li&gt;Better for domain specific databases.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;future-directions&quot;&gt;Future Directions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Testing this under databases.&lt;/li&gt;
&lt;li&gt;Improving performance&lt;/li&gt;
&lt;li&gt;Collecting uncovered questions, add machine learning to learn new patterns(Yes, especially trying to cover all of the forms from a set of question forms would be very valuable)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;pyalgoviz-python-algorithm-visualization-in-the-browser&quot;&gt;PyAlgoViz: Python Algorithm Visualization in the browser&lt;/h3&gt;
&lt;p&gt;Presenter: Chriss Laffra&lt;/p&gt;
&lt;p&gt;He presents a very nice visualization environment &lt;a href=&quot;http://pyalgoviz.appspot.com/&quot;&gt;PyAlgoViz&lt;/a&gt; where any developer could visualize execution steps of the algorithm or algorithm in general in a visualization rich way. This kind of opens up the algorithms black box and makes them more memorable through visualizations as well as nice way to learn what they are in the first place. Debugging would be also easier in this type of environment if your algorithm does not produce the output that you are expecting.&lt;/p&gt;
&lt;h3 id=&quot;building-an-army-of-data-collecting-posts-in-python&quot;&gt;Building an Army of Data Collecting Posts in Python&lt;/h3&gt;
&lt;p&gt;Presenter: Freedom Dumlao&lt;/p&gt;
&lt;p&gt;This presentation’s focus is more on architecture than anything else. He took a real-world problem and try to tackle it. Architecturing the whole framework bit by bit was a nice approach to build the system.&lt;/p&gt;
&lt;p&gt;I really like the presentation style(along with James Horey) where they present the solutions in a story.(his friend and a beginner Python developer) This makes somehow easier to both understand the problem, domain, contextand how the proposed method solves the given problem.&lt;/p&gt;
&lt;h3 id=&quot;opengraph-protocol&quot;&gt;OpenGraph Protocol&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;This protocol enables any webpage to become a rich object in a social graph.&lt;/li&gt;
&lt;li&gt;The reason when you share something, open graph title, url and image is used in the the social media that you are sharing with.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;rq&quot;&gt;RQ&lt;/h3&gt;
&lt;p&gt;They used RQ to handle job queues with Redis to store the files.&lt;/p&gt;
&lt;h3 id=&quot;services&quot;&gt;3 Services&lt;/h3&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;ElasticSearch (it is used like a database, ), qbox.io&lt;/li&gt;
&lt;li&gt;Task Queue (RQ &amp;amp; Redis) =&amp;gt; Redis to Go&lt;/li&gt;
&lt;li&gt;Compute (Heroku)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;rules-to-keep-in-mind&quot;&gt;Rules to keep in mind&lt;/h3&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;Don’t do DOS to your neighbors&lt;/li&gt;
&lt;li&gt;Look at robots.txt if you are permitted&lt;/li&gt;
&lt;li&gt;Don’t be a jerk.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;ferry-share-and-deploy-big-data-applications-with-docker&quot;&gt;Ferry Share and Deploy Big Data Applications with Docker&lt;/h3&gt;
&lt;p&gt;Presenter: James Horey&lt;/p&gt;
&lt;p&gt;I had the chance to talk with &lt;a href=&quot;http://jhorey.github.io/&quot;&gt;him&lt;/a&gt; on Saturday, his presentation was also like him, quite awesome. If you want to understand what Docker or why it is necessary/beneficial, definitely watch his talk. It is a beginner talk for infrastructure. This is also one of the most organized presentation that I saw as well so it is very easy to follow as well. He eventually introduces his library managing containers &lt;a href=&quot;http://ferry.opencore.io/&quot;&gt;Ferry&lt;/a&gt;, which makes it easy to manage the containers.&lt;/p&gt;
&lt;h3 id=&quot;docker&quot;&gt;Docker&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Encapsulates applications in isolated containers.&lt;/li&gt;
&lt;li&gt;Makes it easy and safe to distribute applications.&lt;/li&gt;
&lt;li&gt;Easy to get started.&lt;/li&gt;
&lt;li&gt;Nice way to isolate the runtime environment.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Docker allows public images to be shared freely.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Using docker gives isolated environments advantages and very low overhead and disadvantages.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;cassandra&quot;&gt;Cassandra&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Highly scalable and fault-tolerant.&lt;/li&gt;
&lt;li&gt;Great for storing streaming data(sensors, messages)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;ferry&quot;&gt;Ferry&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Specify the containers that constitue your application in YAML.&lt;/li&gt;
&lt;li&gt;Support for Hadoop, Cassandra, GlusterFS, and OpenMPI.&lt;/li&gt;
&lt;li&gt;It’s a little bit like &lt;code&gt;pip&lt;/code&gt; for your Docker-based runtime environment.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;advantages-of-using-ferry&quot;&gt;Advantages of using Ferry&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Even simple applications can be complicated to install and run.&lt;/li&gt;
&lt;li&gt;Docker solves this by encapsulating the entire runtime environment in lightweight containers.&lt;/li&gt;
&lt;li&gt;Ferry enables plugging in external big data dependencies.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;crushing-the-head-of-the-snake&quot;&gt;Crushing the Head of the Snake&lt;/h3&gt;
&lt;p&gt;Presenter: Robert Brewer&lt;/p&gt;
&lt;p&gt;It was an optimization talks where he walks through what to do improving the speed of the code.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;timeit&lt;/code&gt;’s default argument is 1000000, nobody wants to wait that long to profile. It has also overhead, so for benchmarking, that needs to be subtracted from the end result.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb9&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb9-1&quot;&gt;&lt;a href=&quot;#cb9-1&quot;&gt;&lt;/a&gt;Timer(“xrange(&lt;span class=&quot;dv&quot;&gt;1000&lt;/span&gt;)”).repeat(&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this run, take the minimum of three as the others may have some other background or some other overhead processes are added.&lt;/p&gt;
&lt;h3 id=&quot;some-rule-of-thumbs&quot;&gt;Some Rule of Thumbs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Use Python builtins. As they are written in C, the ones that you will be using from external libraries would be slower(written in Python).&lt;/li&gt;
&lt;li&gt;Reduce function calls. There is some overhead in calling functions in Python.&lt;/li&gt;
&lt;li&gt;Vector operations can be done in Numpy.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;parallelization&quot;&gt;Parallelization&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb10&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb10-1&quot;&gt;&lt;a href=&quot;#cb10-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; multiprocessin &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; Pool&lt;/span&gt;
&lt;span id=&quot;cb10-2&quot;&gt;&lt;a href=&quot;#cb10-2&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; run():&lt;/span&gt;
&lt;span id=&quot;cb10-3&quot;&gt;&lt;a href=&quot;#cb10-3&quot;&gt;&lt;/a&gt;    results &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; Pool().&lt;span class=&quot;bu&quot;&gt;map&lt;/span&gt;(run_one, &lt;span class=&quot;bu&quot;&gt;range&lt;/span&gt;(segments))&lt;/span&gt;
&lt;span id=&quot;cb10-4&quot;&gt;&lt;a href=&quot;#cb10-4&quot;&gt;&lt;/a&gt;    result &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; stddev(results)&lt;/span&gt;
&lt;span id=&quot;cb10-5&quot;&gt;&lt;a href=&quot;#cb10-5&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; result&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;introducing-x-ray-extended-arrays-for-scientific-datasets&quot;&gt;Introducing x-ray: extended arrays for scientific datasets&lt;/h3&gt;
&lt;p&gt;Presenter: Stephan Hoyer&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://xray.readthedocs.org/en/stable/&quot;&gt;X-ray&lt;/a&gt; is a library that provides a rich datastructure for weather data which handles multidimensional data.&lt;/p&gt;
&lt;h3 id=&quot;why-it-is-necessary&quot;&gt;Why it is necessary?&lt;/h3&gt;
&lt;p&gt;5 dimensional weather forecasts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;labeled&lt;/li&gt;
&lt;li&gt;big&lt;/li&gt;
&lt;li&gt;binary&lt;/li&gt;
&lt;li&gt;high-dimensioanl&lt;/li&gt;
&lt;li&gt;not very natural to put in a pandas dataframe&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;what-we-want&quot;&gt;What we want?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Like &lt;code&gt;numpy.ndarray&lt;/code&gt;, but better&lt;/li&gt;
&lt;li&gt;N-dimensional&lt;/li&gt;
&lt;li&gt;Handles missing data&lt;/li&gt;
&lt;li&gt;Labeled dimensions(axes)
&lt;ul&gt;
&lt;li&gt;“time”, “latitude”, “longitude”&lt;/li&gt;
&lt;li&gt;not “index” and “columns”&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Labeled coordinates(ticks)&lt;/li&gt;
&lt;li&gt;Lazy array acess(out of memory data)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;xray-design-goals&quot;&gt;Xray Design Goals&lt;/h3&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;Labeld, N-dimensional arrays for scientific data&lt;/li&gt;
&lt;li&gt;Don’t rebuild the wheel
&lt;ul&gt;
&lt;li&gt;reuse pandas indexing&lt;/li&gt;
&lt;li&gt;copy the pandas API&lt;/li&gt;
&lt;li&gt;Interoperate with the rest of the scientific task.&lt;/li&gt;
&lt;li&gt;Implement a proven data model.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;xray-data-model&quot;&gt;Xray Data Model&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;DataArray
&lt;ul&gt;
&lt;li&gt;N-dimensional&lt;/li&gt;
&lt;li&gt;labeled dimensions (axes)&lt;/li&gt;
&lt;li&gt;labeled coordinates (indices)&lt;/li&gt;
&lt;li&gt;homogeneous dtype&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Dataset
&lt;ul&gt;
&lt;li&gt;a dict-like container of DataArrays&lt;/li&gt;
&lt;li&gt;shared dimensions and coordinates&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Both keep track of arbitrary metadata (attributes)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;pointers&quot;&gt;Pointers&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://xray.readthedocs.org/en/stable/&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/xray/xray&quot;&gt;Source&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;generators-will-free-your-mind&quot;&gt;Generators Will Free Your Mind&lt;/h3&gt;
&lt;p&gt;Presenter: James Powell&lt;/p&gt;
&lt;p&gt;James shows us why usage of generators may change our programming style or at least how we approach problems. I think a better title for this talk “Functional Programming Will Free Your Mind” as most of the concepts and some portion of talk is about why functional programming is better than imperative style. Some of the code he writes, especially how he tackles the formatting problem is quite mind-opening. Especially, I come to like adding predicates instead of &lt;code&gt;if else&lt;/code&gt; into code whenever I want to add some feature to the existing code. This not only makes less assumptions on the data that you are getting but also makes it easier to read and more maintainable code. Generators, lazy evaluations part that he stresses on is also great. Instead of giving me the &lt;strong&gt;all&lt;/strong&gt; data give me as much as I want. If I want to process the data in a batch fashion, let me handle that for myself.(less assumption, memory efficiency). It was a quite great talk.&lt;/p&gt;
&lt;h3 id=&quot;themes&quot;&gt;Themes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Generators are a very useful way of modeling problems in Python&lt;/li&gt;
&lt;li&gt;The ways we model problems using generators is fundamentally different&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;functional-programming&quot;&gt;Functional Programming&lt;/h3&gt;
&lt;p&gt;Modalities could be &lt;strong&gt;injected&lt;/strong&gt; through functional programming.&lt;/p&gt;
&lt;h3 id=&quot;template-usage&quot;&gt;Template Usage&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb11&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb11-1&quot;&gt;&lt;a href=&quot;#cb11-1&quot;&gt;&lt;/a&gt;template &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; ‘{region}: {align} &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; {profit}’.&lt;span class=&quot;bu&quot;&gt;format&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb11-2&quot;&gt;&lt;a href=&quot;#cb11-2&quot;&gt;&lt;/a&gt;line &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; template(region&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;region, profit&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;profit, align&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;align)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;what-is-generator-coroutine&quot;&gt;What is generator &amp;amp; Coroutine?&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb12&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb12-1&quot;&gt;&lt;a href=&quot;#cb12-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; fib(a&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, b&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;):&lt;/span&gt;
&lt;span id=&quot;cb12-2&quot;&gt;&lt;a href=&quot;#cb12-2&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;cf&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;:&lt;/span&gt;
&lt;span id=&quot;cb12-3&quot;&gt;&lt;a href=&quot;#cb12-3&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;cf&quot;&gt;yield&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&quot;cb12-4&quot;&gt;&lt;a href=&quot;#cb12-4&quot;&gt;&lt;/a&gt;        a, b &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; b, a &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; b&lt;/span&gt;
&lt;span id=&quot;cb12-5&quot;&gt;&lt;a href=&quot;#cb12-5&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb12-6&quot;&gt;&lt;a href=&quot;#cb12-6&quot;&gt;&lt;/a&gt;&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; itertools &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; islice&lt;/span&gt;
&lt;span id=&quot;cb12-7&quot;&gt;&lt;a href=&quot;#cb12-7&quot;&gt;&lt;/a&gt;&lt;span class=&quot;bu&quot;&gt;list&lt;/span&gt;(islice(fib(), &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;nice-util-functions-for-functional-programming&quot;&gt;Nice Util Functions for Functional Programming&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb13&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb13-1&quot;&gt;&lt;a href=&quot;#cb13-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; itertools &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; islice, izip, tee&lt;/span&gt;
&lt;span id=&quot;cb13-2&quot;&gt;&lt;a href=&quot;#cb13-2&quot;&gt;&lt;/a&gt;nwise &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;lambda&lt;/span&gt; g, n: izip(&lt;span class=&quot;op&quot;&gt;**&lt;/span&gt;islice(g, i, &lt;span class=&quot;va&quot;&gt;None&lt;/span&gt;) &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; i, g &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;enumerate&lt;/span&gt;(tee(g, n)))&lt;/span&gt;
&lt;span id=&quot;cb13-3&quot;&gt;&lt;a href=&quot;#cb13-3&quot;&gt;&lt;/a&gt;ratio &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;lambda&lt;/span&gt; g: (y&lt;span class=&quot;op&quot;&gt;/&lt;/span&gt;x fro x,y &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; nwise(g, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&quot;cb13-4&quot;&gt;&lt;a href=&quot;#cb13-4&quot;&gt;&lt;/a&gt;&lt;span class=&quot;bu&quot;&gt;list&lt;/span&gt;(islice(ratio(fib(), &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;)))&lt;/span&gt;
&lt;span id=&quot;cb13-5&quot;&gt;&lt;a href=&quot;#cb13-5&quot;&gt;&lt;/a&gt;&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; itertools &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; takewhile, dropwhile&lt;/span&gt;
&lt;span id=&quot;cb13-6&quot;&gt;&lt;a href=&quot;#cb13-6&quot;&gt;&lt;/a&gt;&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;bu&quot;&gt;list&lt;/span&gt;(islice(fib(), &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;)))&lt;/span&gt;
&lt;span id=&quot;cb13-7&quot;&gt;&lt;a href=&quot;#cb13-7&quot;&gt;&lt;/a&gt;&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;bu&quot;&gt;list&lt;/span&gt;(takewhile(&lt;span class=&quot;kw&quot;&gt;lambda&lt;/span&gt; x: x &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;, fib(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;pointers-1&quot;&gt;Pointers&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://nbviewer.ipython.org/urls/gist.githubusercontent.com/dutc/4eb5124bda88eedd476e/raw/a06c32ab62dd9ca941ef8537dab796d212348201/generators-free-your-mind.ipynb&quot;&gt;Ipython Notebook-Slides&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;how-to-spy-with-python&quot;&gt;How to Spy with Python&lt;/h3&gt;
&lt;p&gt;Presenter: Lynn Root&lt;/p&gt;
&lt;p&gt;This talk was about how to sniff packages around Python, at least for most part of it. Otherwise, she presented a great historical context what an NSA is, how it may be doing the surveillance, using metadata, and whatnot. This not only provides a much more richer context than what is available, but also provides where it started and where it is growing/going.&lt;/p&gt;
&lt;h3 id=&quot;prism&quot;&gt;Prism&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Planning tool for Resource Integration, Synchronization and Management&lt;/li&gt;
&lt;li&gt;Mines electronic data for the purpose of mass surveillance.&lt;/li&gt;
&lt;li&gt;Collects intelligence that passes through US servers&lt;/li&gt;
&lt;li&gt;Targets foreigners, but is elusive about data on US citizens.&lt;/li&gt;
&lt;li&gt;Only collects metadata(supposedly).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;what-is-xkeyscore&quot;&gt;What is XKeyScore?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Digital Network Intelligence Exploitation System&lt;/li&gt;
&lt;li&gt;Federated Query System of completely unfiltered data&lt;/li&gt;
&lt;li&gt;500-700 servers, as of 2008&lt;/li&gt;
&lt;li&gt;Gives users ability to query for email addresses, a target’s activity, phone numbers, HTTP traffic, extract file attachments, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;technologies&quot;&gt;Technologies&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.secdev.org/projects/scapy/&quot;&gt;scapy&lt;/a&gt;: packet sniffing &amp;amp; manipulation&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://code.google.com/p/pygeoip/&quot;&gt;pygeoip&lt;/a&gt;: API for GEOIP databases&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://geojson.org/&quot;&gt;geojson&lt;/a&gt;: bindings &amp;amp; utilities for GeoJSON&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://xael.org/norman/python/python-nmap/&quot;&gt;python-nmap&lt;/a&gt;: wrapper around nmap port scanner&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;wrap-up&quot;&gt;Wrap-Up&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Long historical precedence for mass surveillance with very little oversight or restriction.&lt;/li&gt;
&lt;li&gt;Safe to assume they spy everyone.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;pointers-2&quot;&gt;Pointers&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://rogue.ly/spy&quot;&gt;The presentation material&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://nbviewer.ipython.org/urls/gist.github.com/econchick/7610860/raw/bfd06d3b326ee019425f2a46e9a088d3dbba1ca6/pycones.ipynb&quot;&gt;The notebook here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rogue.ly/spy-quick&quot;&gt;Introduction to Scapy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/econchick/spy&quot;&gt;Spy Github Repo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;hustle-a-column-oriented-distributed-event-database&quot;&gt;Hustle: A column Oriented, Distributed Event Database&lt;/h3&gt;
&lt;p&gt;Presenter: Tim Spurway&lt;/p&gt;
&lt;p&gt;Hustle is another distributed database. It is relational and claims to do super fast queries and distributed writes(inserts). It is an interesting concept and its domain query language is Python based. Seeing Python to be different DSL’s of data processing frameworks, it was not a big suprise for me seeing a database solely depends on Python for all querying tasks.&lt;/p&gt;
&lt;h3 id=&quot;hustle-features&quot;&gt;Hustle Features&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Open Source&lt;/li&gt;
&lt;li&gt;Column Oriented, pipelined execution = Fast queries&lt;/li&gt;
&lt;li&gt;Embarrasingly distributed =&amp;gt; Disco MIR pipelines, DDFS&lt;/li&gt;
&lt;li&gt;Embarrasingly fast = LMDB bt Tree&lt;/li&gt;
&lt;li&gt;Relational = Join Large Tables&lt;/li&gt;
&lt;li&gt;Partitioned = Smart, Automatic Sharding&lt;/li&gt;
&lt;li&gt;Query Language: Python DSL&lt;/li&gt;
&lt;li&gt;Advanced Compression; store even more&lt;/li&gt;
&lt;li&gt;Command Line Interface: Ad-hoc queries&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;column-orientation&quot;&gt;Column Orientation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;As opposed to traditional row oriented DBMSes&lt;/li&gt;
&lt;li&gt;Typical use-case is extremely large datasets.&lt;/li&gt;
&lt;li&gt;Very efficient column aggreggation&lt;/li&gt;
&lt;li&gt;Excellent compression characteristics.&lt;/li&gt;
&lt;li&gt;Works well with Bitmap indices&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;insert-into-hustle&quot;&gt;Insert into Hustle&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Distributed inserts - support massive write overload(millions recors/sec)&lt;/li&gt;
&lt;li&gt;Two steps:
&lt;ul&gt;
&lt;li&gt;Create standalone Marble file (LMDB)&lt;/li&gt;
&lt;li&gt;Push Marble to DDFS (cheap, cluster-to-local)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;An insert can create and push any number of partitioned Marbles.&lt;/li&gt;
&lt;li&gt;CSV, JSON, fixed field supported&lt;/li&gt;
&lt;li&gt;Bulk append semantics - pay careful attention to ETL.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;query-hustle&quot;&gt;Query Hustle&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Python DSL - operator overloads in where clause&lt;/li&gt;
&lt;li&gt;Aggregating Functions/ Grouping (h-sum, h-count, h-avg)&lt;/li&gt;
&lt;li&gt;Efficient, distributed join&lt;/li&gt;
&lt;li&gt;Order, limit, desc, distinct&lt;/li&gt;
&lt;li&gt;Nested queries&lt;/li&gt;
&lt;li&gt;Extensible query language&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;hustle-query-execution&quot;&gt;Hustle Query Execution&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Hustle queries are distributed Disco pipeline jobs&lt;/li&gt;
&lt;li&gt;Query optimizer and replication minimize data movement in cluster.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;pointers-3&quot;&gt;Pointers&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/chango/hustle&quot;&gt;Source Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;socialite-python-integrated-query-langauge-for-big-data-analysis&quot;&gt;Socialite Python Integrated Query Langauge for Big Data Analysis&lt;/h3&gt;
&lt;p&gt;Presenter: Jiwon Seo&lt;/p&gt;
&lt;p&gt;Another big data processing framework and its query language could be integrated into Python seamlessly as you could use the variables of Python in the query language or vice versa. It claims to be faster than Graphlab and Not necessarily than Spark I guess, it is memory-in computation, so in that aspect it differs from Hadoop-based frameworks.&lt;/p&gt;
&lt;h3 id=&quot;why-another-big-data-platform&quot;&gt;Why Another Big Data Platform?&lt;/h3&gt;
&lt;p&gt;Problems in existing platforms:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Too difficult(low-level primitives)&lt;/li&gt;
&lt;li&gt;Inefficient(not network bound)&lt;/li&gt;
&lt;li&gt;Too many (sub) framework&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;introducing-socialite&quot;&gt;Introducing Socialite&lt;/h3&gt;
&lt;p&gt;Socialite is a high level language:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Easy and efficient&lt;/li&gt;
&lt;li&gt;Compiled to optimized code&lt;/li&gt;
&lt;li&gt;Python integration(Jython)&lt;/li&gt;
&lt;li&gt;Good for
&lt;ul&gt;
&lt;li&gt;Graph Analysis&lt;/li&gt;
&lt;li&gt;Data Mining&lt;/li&gt;
&lt;li&gt;Relational Queries&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;outline&quot;&gt;Outline&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Concepts in Socialite
&lt;ul&gt;
&lt;li&gt;Distributed Tables&lt;/li&gt;
&lt;li&gt;Python Integration (Jython and Python)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;System overview&lt;/li&gt;
&lt;li&gt;Analysis Algorithms
&lt;ul&gt;
&lt;li&gt;Shortest paths, PageRank&lt;/li&gt;
&lt;li&gt;K-Means, Logistic Regression&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Evaluation&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;distributed-in-memory-tables&quot;&gt;Distributed In-Memory Tables&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Primary data structure in Socialite&lt;/li&gt;
&lt;li&gt;Column oriented storage&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;python-integration&quot;&gt;Python Integration&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Socialite queries in Python code
&lt;ul&gt;
&lt;li&gt;Queries are quoted in backtick&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Python functions, variables are accessible in Socialite queries.&lt;/li&gt;
&lt;li&gt;Socialite tables are readable from Python.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb14&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb14-1&quot;&gt;&lt;a href=&quot;#cb14-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(“This &lt;span class=&quot;kw&quot;&gt;is&lt;/span&gt; Python code”)&lt;/span&gt;
&lt;span id=&quot;cb14-2&quot;&gt;&lt;a href=&quot;#cb14-2&quot;&gt;&lt;/a&gt;`Foo[&lt;span class=&quot;bu&quot;&gt;int&lt;/span&gt; i](String s)&lt;/span&gt;
&lt;span id=&quot;cb14-3&quot;&gt;&lt;a href=&quot;#cb14-3&quot;&gt;&lt;/a&gt;Foo[i](s) :&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; i&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;41&lt;/span&gt;, s&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;”the answer”`&lt;/span&gt;
&lt;span id=&quot;cb14-4&quot;&gt;&lt;a href=&quot;#cb14-4&quot;&gt;&lt;/a&gt;v&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;”Python variable”&lt;/span&gt;
&lt;span id=&quot;cb14-5&quot;&gt;&lt;a href=&quot;#cb14-5&quot;&gt;&lt;/a&gt;`Foo[i](s) :&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; i&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;44&lt;/span&gt;,s&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;$func`&lt;/span&gt;
&lt;span id=&quot;cb14-6&quot;&gt;&lt;a href=&quot;#cb14-6&quot;&gt;&lt;/a&gt;&lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; i, s &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; `Foo[i](s)`:&lt;/span&gt;
&lt;span id=&quot;cb14-7&quot;&gt;&lt;a href=&quot;#cb14-7&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(i,s)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;system-optimizations&quot;&gt;System Optimizations&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Custom Memory Allocator (temporary table)&lt;/li&gt;
&lt;li&gt;Optimized Serialization&lt;/li&gt;
&lt;li&gt;Direct ByteBuffer (network Buffer)&lt;/li&gt;
&lt;li&gt;Multiple network channels among workers&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Distributed query language&lt;/li&gt;
&lt;li&gt;Integration with Python&lt;/li&gt;
&lt;li&gt;Easy and efficient&lt;/li&gt;
&lt;li&gt;Algorithms in Socialite&lt;/li&gt;
&lt;li&gt;Competitive Performance&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;pointers-4&quot;&gt;Pointers&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://socialite-lang.github.io/&quot;&gt;Project page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;
</content>
  </entry>
  <entry xml:base="https://bugra.github.io/">
    <title type="text">PigPen, Hadoop, Pig, Clojure and All That</title>
    <id>https://bugra.github.io/posts/2014/7/9/pig-pen-or-clojure-for-big-data</id>
    <updated>2014-07-09T00:00:00Z</updated>
    <published>2014-07-09T00:00:00Z</published>
    <link href="https://bugra.github.io/posts/2014/7/9/pig-pen-or-clojure-for-big-data" />
    <author>
      <name>Bugra Akyildiz</name>
    </author>
    <content type="html">&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;
  &lt;title&gt;-&lt;/title&gt;
  &lt;style&gt;
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
    pre &gt; code.sourceCode { white-space: pre; position: relative; }
    pre &gt; code.sourceCode &gt; span { display: inline-block; line-height: 1.25; }
    pre &gt; code.sourceCode &gt; span:empty { height: 1.2em; }
    code.sourceCode &gt; span { color: inherit; text-decoration: inherit; }
    div.sourceCode { margin: 1em 0; }
    pre.sourceCode { margin: 0; }
    @media screen {
    div.sourceCode { overflow: auto; }
    }
    @media print {
    pre &gt; code.sourceCode { white-space: pre-wrap; }
    pre &gt; code.sourceCode &gt; span { text-indent: -5em; padding-left: 5em; }
    }
    pre.numberSource code
      { counter-reset: source-line 0; }
    pre.numberSource code &gt; span
      { position: relative; left: -4em; counter-increment: source-line; }
    pre.numberSource code &gt; span &gt; a:first-child::before
      { content: counter(source-line);
        position: relative; left: -1em; text-align: right; vertical-align: baseline;
        border: none; display: inline-block;
        -webkit-touch-callout: none; -webkit-user-select: none;
        -khtml-user-select: none; -moz-user-select: none;
        -ms-user-select: none; user-select: none;
        padding: 0 4px; width: 4em;
        color: #aaaaaa;
      }
    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
    div.sourceCode
      {   }
    @media screen {
    pre &gt; code.sourceCode &gt; span &gt; a:first-child::before { text-decoration: underline; }
    }
    code span.al { color: #ff0000; font-weight: bold; } /* Alert */
    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
    code span.at { color: #7d9029; } /* Attribute */
    code span.bn { color: #40a070; } /* BaseN */
    code span.bu { } /* BuiltIn */
    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
    code span.ch { color: #4070a0; } /* Char */
    code span.cn { color: #880000; } /* Constant */
    code span.co { color: #60a0b0; font-style: italic; } /* Comment */
    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
    code span.do { color: #ba2121; font-style: italic; } /* Documentation */
    code span.dt { color: #902000; } /* DataType */
    code span.dv { color: #40a070; } /* DecVal */
    code span.er { color: #ff0000; font-weight: bold; } /* Error */
    code span.ex { } /* Extension */
    code span.fl { color: #40a070; } /* Float */
    code span.fu { color: #06287e; } /* Function */
    code span.im { } /* Import */
    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
    code span.kw { color: #007020; font-weight: bold; } /* Keyword */
    code span.op { color: #666666; } /* Operator */
    code span.ot { color: #007020; } /* Other */
    code span.pp { color: #bc7a00; } /* Preprocessor */
    code span.sc { color: #4070a0; } /* SpecialChar */
    code span.ss { color: #bb6688; } /* SpecialString */
    code span.st { color: #4070a0; } /* String */
    code span.va { color: #19177c; } /* Variable */
    code span.vs { color: #4070a0; } /* VerbatimString */
    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
  &lt;/style&gt;
  &lt;!--[if lt IE 9]&gt;
    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;
  &lt;![endif]--&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;figure&gt;
&lt;img src=&quot;http://i.imgur.com/dJ5nhHd.jpg&quot; title=&quot;Big Data vs me&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Big Data vs me&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;My humble contribution to &lt;a href=&quot;http://bigdatapix.tumblr.com/&quot;&gt;ridiculous images on big data&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This post is about &lt;a href=&quot;https://github.com/Netflix/PigPen&quot;&gt;PigPen&lt;/a&gt;, a library that Netflix open sourced in the beginning of this year. Yet, in order to introduce the library, I covered some background namely Hadoop, Pig and Clojure which PigPen builds on top of those. If you want to jump right away to my rant on PigPen right away, scroll a bit.&lt;/p&gt;
&lt;h3 id=&quot;hadoop&quot;&gt;Hadoop&lt;/h3&gt;
&lt;p&gt;Hadoop (a.k.a distributed data processing framework for counting words) built on top of idea of map-reduce, famous Google &lt;a href=&quot;http://static.googleusercontent.com/media/research.google.com/en/us/archive/mapreduce-osdi04.pdf&quot;&gt;paper&lt;/a&gt; not only changed how we process data(it is a data processing framework after all) but also create new perspectives on how we might think about data, what type of opportunities that it could provide, how can we use the data we collect. The latter one, the implicit role on collected data usage has a quite profound effect on different type of skills(data wrangling,data analysis, scraping and so on), job types(suddenly you started to hear data engineers, data scientists ..) and also company types(data companies that just collect data and provide in a nice interface possibly through an API, data analytics company that creates nice visualizations and interfaces to interact with and learn from the data, big data consulting companies that provide consulting for big data technologies and so on). Do not get me wrong, I am not saying Hadoop is the &lt;em&gt;only&lt;/em&gt; cause for this change but it plays a strong role as it contributed to the change on how we might perceive the data.&lt;/p&gt;
&lt;p&gt;Hadoop adoption was great at first thanks to “big data” and its tireless marketers, early adopters, media that repeatedly overloads the phrase, or maybe it was all because developers who want to learn another new cool technology. I am not sure at this point(I bet on “big data” gods, though). After some time, some researchers found out that &lt;a href=&quot;http://research.microsoft.com/pubs/163083/hotcbp12%20final.pdf&quot;&gt;Noboy got ever fired for using Hadoop on a cluster&lt;/a&gt; which is a skeptical view of Hadoop and tries to advocate the usage of memory as it becomes cheaper and cheaper. If you are following big data space, they were almost suggesting using Spark. However, even if the Hadoop popularity suffered a little bit, its adoption did not seem to decrease over time. People who have big data, they still try to use Hadoop for their data processing system.&lt;/p&gt;
&lt;p&gt;However, one thing became clear after Hadoop became mainstream that nobody really wanted to write vanilla map-reduce programs. Not only they were very low level but also you need to write a lot of boiler plate for the things that are very common in a data processing systems. They wanted more abstraction than what Hadoop provides. They wanted other language interfaces, too. Because writing Java has been one of the most fulfilling development experience said an experienced nobody developer.(By the way, Java is a fine programming language if not great if you ask me.)&lt;/p&gt;
&lt;h3 id=&quot;abstractions-abstractions-and-more-abstractions&quot;&gt;Abstractions, Abstractions, and more Abstractions&lt;/h3&gt;
&lt;p&gt;We need moar abstractions said one junior developer who spent two days to write a buggy combiner. Not only more abstractions, we need functional programming language interfaces said another junior developer who loves Haskell. We need better workflows for common tasks said another developer. We already know SQL and hate it, why learning another new domain specific language and hate it said a senior developer. Later this developer would happily announce that he hates Hive as much as he hates SQL.&lt;/p&gt;
&lt;h3 id=&quot;software-abstraction-projects-on-top-of-hadoop&quot;&gt;Software Abstraction Projects on Top of Hadoop&lt;/h3&gt;
&lt;p&gt;Software abstraction projects then developed in order to satisfy some of these needs. The abstraction does not refer mere software abstractions and the concepts that Hadoop provides but also it refers how common tasks(counting words) are abstracted in a way that minimal boilerplate code requires.(if a project requires one-liner for counting words, then it wins.)&lt;/p&gt;
&lt;p&gt;Pig and Hive came into the play first. Pig provides a nice language and data processing flow for data processing tasks through User Defined Functions(UDFs). I write a little bit about on Pig in &lt;a href=&quot;http://bugra.github.io/work/notes/2014-02-08/pig-advantages-and-disadvantages/&quot;&gt;here&lt;/a&gt; if you want to learn more.&lt;/p&gt;
&lt;p&gt;Hive’s adoption is surprisingly good, whose query language is very similar to SQL. The data analysts that write SQL queries start to write HiveQL queries to analyze the data so the effort that requires for another new language became minimal. Instead of learning a new language, it may make more sense for the companies that want to minimize their efforts and want to maximize the outcome of their employees.&lt;/p&gt;
&lt;p&gt;If I compare these two, I would much prefer Pig just because its language is better than SQL. In general, I strongly believe that declarative style is not very good how you might want to interact with your data. Pig’s transformation based approach, especially the transformations as a first class citizen approach is very good in this regard.&lt;/p&gt;
&lt;h3 id=&quot;cascading&quot;&gt;Cascading&lt;/h3&gt;
&lt;p&gt;What if you do not want to learn any new technology, but you will write code that you write everyday, but magically it will process big data out of the box. Cascading is a project that wants to abstract whole map-reduce flow flow and creates the pipeline for you out of the box. Cascading is the framework name and it is for Java but it has quite a lot of interfaces for different languages as well, the most prominent is Scalding for Scala. It has also Clojure interface which is Cascalog and PigPen could be considered as a competitor for Cascalog.&lt;/p&gt;
&lt;p&gt;It has a bunch of cool projects on top of it, I will mention in here briefly, but if you are interested in check it on their website. Especially, Pattern seems quite nice for Machine Learning models as it supports PMML and you could dploy your models tested on smaller data on big data seamlessly.&lt;/p&gt;
&lt;h3 id=&quot;pattern&quot;&gt;Pattern&lt;/h3&gt;
&lt;p&gt;It also has Pattern which combines Predictive Model Markup Language(PMML) with Cascading to make the Machine learning deployment much easier. This is very nice for a number of reasons but most important reason is that if you evaluate your machine learning algorithm for small dataset, then to apply the model into the production is quite seamless.&lt;/p&gt;
&lt;h3 id=&quot;lingual&quot;&gt;Lingual&lt;/h3&gt;
&lt;p&gt;SQL for Cascading would be a good term to explain what Lingual is. It provides a SQL interface for Hadoop, which makes it easier to interact the data. This also aims to interoperability as you could make SQL queries for big data in the same way you do in a much smaller scale. If you are using any third party application on top of your data, you could also connect through this interface as your big data supports for big data as well.&lt;/p&gt;
&lt;h3 id=&quot;driven&quot;&gt;Driven&lt;/h3&gt;
&lt;p&gt;It tries to visualize your data processing system on top of Cascading; dependencies and other components. Similar to &lt;a href=&quot;https://github.com/Netflix/Lipstick&quot;&gt;Lipstick&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;netflix-approach&quot;&gt;Netflix approach&lt;/h3&gt;
&lt;p&gt;Instead of Cascading, Netlix seems to choose Pig as a data processing backbone for processing data. Therefore, they seem to build their stack on top of Pig. They put up Lipstick previously which is very similar to Driven. Now, they are putting PigPen which is very similar to Cascalog in spirit. Main(maybe not only) difference is the underlying data processing environments.&lt;/p&gt;
&lt;p&gt;Cascading generally differs from Pig and Hive where you do not want to write quick-dirty scripts but rather a production environment which you could deploy. Otherwise, if you want to do data ad-hoc data analysis Pig or even Hive might give better solutions than what Cascading provides. Even for this reason, PigPen is a nice competitor for Cascalog in Clojure league.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There are also Scoobi, Scrunch and Spark that you may want to consider for your needs. Especially, if you have data that could be fit a good computer, Spark may be more suitable.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;pig&quot;&gt;Pig&lt;/h3&gt;
&lt;h4 id=&quot;twitter&quot;&gt;Twitter&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;http://www.umiacs.umd.edu/~jimmylin/publications/Lin_Kolcz_SIGMOD2012.pdf&quot;&gt;Large Scale Machine Learning at Twitter paper&lt;/a&gt; gives a good overview why Pig is good for Machine learning and data processing in general.(If you are interested in the paper, its presentation is &lt;a href=&quot;http://videolectures.net/eswc2012_kolcz_twitter/&quot;&gt;here&lt;/a&gt;) It basically says that Pig is the backbone of the processing framework where you could use mighty Python libraries for scientific computing, data processing and machine learning. As you have a general domain programming language that you could depend on via User Defined Functions(UDF’s), you could pretty much process you data however you want independent from the big data as the platform built on Pig already handles query planning as well as Hadoop aspects. Only job is to write UDF’s and combine the processing steps in the Pig. Seems quite straightforward. Netflix also seems to adopt this approach and I find particularly very good for machine learning and data processing in general. I also wrote my rants on these issues as well; &lt;a href=&quot;http://bugra.github.io/work/notes/2014-02-08/pig-advantages-and-disadvantages/&quot;&gt;previously on Pig&lt;/a&gt; and on the &lt;a href=&quot;http://bugra.github.io/work/notes/2014-02-09/pig-not-so-foreign-language-paper-notes/&quot;&gt;original paper&lt;/a&gt; that explains the rationale behind Pig and some of its advantages and disadvantages over vanilla map-reduce.&lt;/p&gt;
&lt;p&gt;I really like Pig and its approach in data processing as I wrote previously. However, big data is a field that sees a surprisingly good adoption and growing community. Therefore, it is not unexpected that people actually try to push the field quite a lot, trying to come up better solutions for data processing problems. Pig is still being developed and see improvements, features(&lt;code&gt;cube&lt;/code&gt; and &lt;code&gt;roll&lt;/code&gt; functions) and bug fixes, which is great but what about its shortcomings?&lt;/p&gt;
&lt;h3 id=&quot;disadvantages-of-pig&quot;&gt;Disadvantages of Pig&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Even very simple tasks(i/o) requires a lot of boilerplate code. Importing jar files, registering macros, setting the parameters and so on.&lt;/li&gt;
&lt;li&gt;You need to maintain two and sometimes three different codebase(Java, Pig) or if you are using Jython for UDF’s, add Python as well.&lt;/li&gt;
&lt;li&gt;All of the scripts that are wrapped in Pig is specific to processing jobs. Therefore, even though UDF’s are reusable across different jobs, the component of jobs cannot be reusable. (Macros provide a limited mechanism to do so to be fair, though).&lt;/li&gt;
&lt;li&gt;Due to partially above reason, programs becomes scripts rather than full fledge production workfklows.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;functional-programming&quot;&gt;Functional Programming&lt;/h2&gt;
&lt;p&gt;Functional programming is a paradigm where it puts an emphasis on functions which are pure and evaluated as mathematical functions. That means for same input, they always yield same result. This is one of the reason why it is popular, as the functions do not have side effects, this leads cleaner, readable and more bug-free programs. There are a lot of functional programming languages: Common Lisp, Clojure, Erlang, Haskell, Ocaml, F# to name a few. However, these languages also differ quite drastically as some of the languages give more importance to types(Haskell) whereas some others adopt more dynamic approach(Clojure). Some programming languages are not pure functional programming languages but provide various structures and methods to enable developers to write functional programming style: Scala, Python and C# could be examples of this category.&lt;/p&gt;
&lt;h3 id=&quot;clojure&quot;&gt;Clojure&lt;/h3&gt;
&lt;p&gt;Clojure is a modern a dialect of List programming language specifically targeted to Java Virtual Machine(JVM). Rich Hikey who is the inventor and main developer of Clojure explains the rationale why there is a need for clojure in &lt;a href=&quot;http://clojure.org/rationale&quot;&gt;here&lt;/a&gt; which I would like to replicate some of the core aspects in here as well:&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;&lt;strong&gt;Functional Programming Language&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Designed for Concurrency&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Immutable data structures + first-class functions&lt;/li&gt;
&lt;li&gt;Dynamic emphasis instead of strongly types(unlike Haskell)&lt;/li&gt;
&lt;li&gt;JVM is good platform and Java community and libraries could be useful.&lt;/li&gt;
&lt;li&gt;Write Java wherever you have to, extend it with Clojure wherever you can.&lt;/li&gt;
&lt;li&gt;Object oriented programming language is overrated.&lt;/li&gt;
&lt;li&gt;Inheritance is not only way to do polymorphism.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Also, some of the design principles and features are listed in &lt;a href=&quot;http://clojure.org/features&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;syntax&quot;&gt;Syntax&lt;/h3&gt;
&lt;p&gt;Since it is a dialectic of Lisp, and the language is itself homoiconic, the syntax and also the layout of the programs tend to very similar. Most people hate parentheses but coming from Python, even if it is not readable as Python, it is much more pleasant than say Java or Perl where they exploit a lot of different non-characters to form their syntax. This makes it also learn the syntax of Clojure piece of cake.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre class=&quot;sourceCode clojure&quot;&gt;&lt;code class=&quot;sourceCode clojure&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;#cb1-1&quot;&gt;&lt;/a&gt;(&lt;span class=&quot;bu&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt; fibonacci&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-2&quot;&gt;&lt;a href=&quot;#cb1-2&quot;&gt;&lt;/a&gt;    (&lt;span class=&quot;kw&quot;&gt;lazy-cat&lt;/span&gt; [&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;] (&lt;span class=&quot;kw&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;+&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;rest&lt;/span&gt; fibonacci) fibonacci)))&lt;/span&gt;
&lt;span id=&quot;cb1-3&quot;&gt;&lt;a href=&quot;#cb1-3&quot;&gt;&lt;/a&gt;(&lt;span class=&quot;kw&quot;&gt;take&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt; fibonacci) &lt;span class=&quot;co&quot;&gt;; Get first 10 fibonacci numbers&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;S expressions are good but they become quite hard to unread if you are doing step by step data processing. Consider the next example;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre class=&quot;sourceCode clojure&quot;&gt;&lt;code class=&quot;sourceCode clojure&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;#cb2-1&quot;&gt;&lt;/a&gt;(&lt;span class=&quot;kw&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;str&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;inc&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;pos?&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;-5&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We are getting a vector, filter out the negative values, increment the rest of the numbers and return string representation. However, it is hard to read. Especially, if clojure would be useful for data processing, this becomes quite cumbersome, as we want to abstract each step(i/o, extract-tranformation-load(etl), preprocessing, processing). Clojure provides threading macro mechanism to handle this type of sequence processing.&lt;/p&gt;
&lt;h3 id=&quot;macros-to-rescue&quot;&gt;Macros to rescue&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb3&quot;&gt;&lt;pre class=&quot;sourceCode clojure&quot;&gt;&lt;code class=&quot;sourceCode clojure&quot;&gt;&lt;span id=&quot;cb3-1&quot;&gt;&lt;a href=&quot;#cb3-1&quot;&gt;&lt;/a&gt; (&lt;span class=&quot;kw&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-2&quot;&gt;&lt;a href=&quot;#cb3-2&quot;&gt;&lt;/a&gt;   (&lt;span class=&quot;kw&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;-5&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb3-3&quot;&gt;&lt;a href=&quot;#cb3-3&quot;&gt;&lt;/a&gt;   (&lt;span class=&quot;kw&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;pos?&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb3-4&quot;&gt;&lt;a href=&quot;#cb3-4&quot;&gt;&lt;/a&gt;   (&lt;span class=&quot;kw&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;inc&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb3-5&quot;&gt;&lt;a href=&quot;#cb3-5&quot;&gt;&lt;/a&gt;   (&lt;span class=&quot;kw&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;str&lt;/span&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The same expression as previous, yet much readable. Since it is also reversed order, you could follow the execution order where in the previous representation you need to go from the inner expressions to the outer expressions. What would be equivalent of this processing in Python.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb4&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb4-1&quot;&gt;&lt;a href=&quot;#cb4-1&quot;&gt;&lt;/a&gt;[&lt;span class=&quot;bu&quot;&gt;str&lt;/span&gt;(ii&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; ii &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;) &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; ii &lt;span class=&quot;op&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Definitely, very readable but not perfect(Pythonic, though). Python supports functional programming to some degree, so we could use functional programming approach to tackle the same problem.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb5&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb5-1&quot;&gt;&lt;a href=&quot;#cb5-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;bu&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;bu&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;bu&quot;&gt;str&lt;/span&gt;, &lt;span class=&quot;bu&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;lambda&lt;/span&gt; k: k&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;bu&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;lambda&lt;/span&gt; k: k &lt;span class=&quot;op&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;bu&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;)))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We could improve the &lt;code&gt;lambda&lt;/code&gt; expressions if we abstract into functions similar to clojure:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb6&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb6-1&quot;&gt;&lt;a href=&quot;#cb6-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;bu&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;bu&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;bu&quot;&gt;str&lt;/span&gt;, &lt;span class=&quot;bu&quot;&gt;map&lt;/span&gt;(inc_, &lt;span class=&quot;bu&quot;&gt;filter&lt;/span&gt;(pos, &lt;span class=&quot;bu&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;)))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;More readable and improved, yet it is not Pythonic and still suffers reading from the inner expressions to outer expressions, hard to read:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb7&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb7-1&quot;&gt;&lt;a href=&quot;#cb7-1&quot;&gt;&lt;/a&gt;pos_vals &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;filter&lt;/span&gt;(pos, &lt;span class=&quot;bu&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&quot;cb7-2&quot;&gt;&lt;a href=&quot;#cb7-2&quot;&gt;&lt;/a&gt;inc_vals &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;map&lt;/span&gt;(inc_, pos_vals)&lt;/span&gt;
&lt;span id=&quot;cb7-3&quot;&gt;&lt;a href=&quot;#cb7-3&quot;&gt;&lt;/a&gt;str_vals &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;bu&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;bu&quot;&gt;str&lt;/span&gt;, inc_vals))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Generally, Python programmers write programs like these, use intermediate variables, as it is much easier to debug, also much easier to read. One-liners are cool but not readable nor maintainable. I choose this example because of both syntax similarities as well as keyword names’ similarities of Python and Clojure for this particular example.&lt;/p&gt;
&lt;p&gt;Clojure with threading macro provides a great mechanism, other languages Javascript provides also a method chaining mechanism where you want to process data by cascading methods in a readable fashion. Scalding (Scala implementation of Cascading) also provides a very similar syntax and feeling, if you are familiar, check that out as well.&lt;/p&gt;
&lt;h2 id=&quot;pigpen&quot;&gt;PigPen&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/mhil2yS.png%20PigPen%20Logo&quot; alt=&quot;PigPen&quot; /&gt; PigPen combines the Clojure awesomeness namely functional programming, Lisp and JVM on top of Pig. This is quite awesome for a number of reasons:&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;You write clojure, no Pig at all. I know I said Pig is great language but with either Python or Java UDF’s, it is harder to maintain two codebase rather than one. And for data processing, however I like transformations first approach of Pig, I much prefer Clojure’s functional programming style to deal with data.&lt;/li&gt;
&lt;li&gt;You get to use Clojure wherever you want in the processing seamlessly. Either that could be a preprocessing step or it could be something that you used UDF’s for, it does not matter, use Clojure. Therefore, you are not limited to Pig functions at all. Similar to UDF’s, except you are writing the UDF’s in the overall flow.&lt;/li&gt;
&lt;li&gt;Clojure has not been around for a long time and its library support is not great. Therefore, the libraries that you want to use may not exist in clojure. However, do not despair, JVM to rescue! If there is a library in Java, which does not exist for Clojure, import the Java library inside of Clojure. Clojure core exploits a number of Java primitive functions like &lt;code&gt;Integer/valueOf&lt;/code&gt; to get integer representation of a string. JVM works for Clojure, exploit it wherever you can without paying the burden of writing Java.&lt;/li&gt;
&lt;li&gt;You could write composable programs since Clojure provides much nicer abstractions than Pig. You could write general purpose functions and reuse all the time, e.g loading data:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb8&quot;&gt;&lt;pre class=&quot;sourceCode clojure&quot;&gt;&lt;code class=&quot;sourceCode clojure&quot;&gt;&lt;span id=&quot;cb8-1&quot;&gt;&lt;a href=&quot;#cb8-1&quot;&gt;&lt;/a&gt;(&lt;span class=&quot;bu&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt; input-data &lt;/span&gt;[input-path]&lt;/span&gt;
&lt;span id=&quot;cb8-2&quot;&gt;&lt;a href=&quot;#cb8-2&quot;&gt;&lt;/a&gt;  (pig/load-tsv input-path))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;5&quot; type=&quot;1&quot;&gt;
&lt;li&gt;Pig becomes a library that you could just import in the dependencies(with Leiningen) this is straightforward. (If you are using Jython for Python UDF’s, jars, dependencies become a nightmare after some time.) To be able to use it, only the following lines are needed in &lt;code&gt;project.clj&lt;/code&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb9&quot;&gt;&lt;pre class=&quot;sourceCode clojure&quot;&gt;&lt;code class=&quot;sourceCode clojure&quot;&gt;&lt;span id=&quot;cb9-1&quot;&gt;&lt;a href=&quot;#cb9-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;at&quot;&gt;:dependencies&lt;/span&gt; [[org.clojure/clojure “&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;.&lt;span class=&quot;fl&quot;&gt;6.0&lt;/span&gt;”]&lt;/span&gt;
&lt;span id=&quot;cb9-2&quot;&gt;&lt;a href=&quot;#cb9-2&quot;&gt;&lt;/a&gt;               [com.netflix.pigpen/pigpen “&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;fl&quot;&gt;2.6&lt;/span&gt;”]]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Remaining is handled by mighty &lt;strong&gt;Leiningen&lt;/strong&gt; for you.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It just works. Just works.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Yes, there are no jar files, no external binary files. Only one line states PigPen dependency and that is it.&lt;/p&gt;
&lt;ol start=&quot;6&quot; type=&quot;1&quot;&gt;
&lt;li&gt;Pig is actually another library that you import and you could use Pig functions wherever you need to. Pig functions could be called after importing PigPen:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb10&quot;&gt;&lt;pre class=&quot;sourceCode clojure&quot;&gt;&lt;code class=&quot;sourceCode clojure&quot;&gt;&lt;span id=&quot;cb10-1&quot;&gt;&lt;a href=&quot;#cb10-1&quot;&gt;&lt;/a&gt;(&lt;span class=&quot;kw&quot;&gt;require&lt;/span&gt; ‘[pigpen.core &lt;span class=&quot;at&quot;&gt;:as&lt;/span&gt; pig])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Pig functions are good old Pig functions with very-to-no differences between actual Pig functions. 7. Scripts are not specific to jobs, they are regular functions that could use other functions. See the example:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb11&quot;&gt;&lt;pre class=&quot;sourceCode clojure&quot;&gt;&lt;code class=&quot;sourceCode clojure&quot;&gt;&lt;span id=&quot;cb11-1&quot;&gt;&lt;a href=&quot;#cb11-1&quot;&gt;&lt;/a&gt;(&lt;span class=&quot;bu&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt; process-data &lt;/span&gt;[input-path output-path]&lt;/span&gt;
&lt;span id=&quot;cb11-2&quot;&gt;&lt;a href=&quot;#cb11-2&quot;&gt;&lt;/a&gt;     (input-data input-path)&lt;/span&gt;
&lt;span id=&quot;cb11-3&quot;&gt;&lt;a href=&quot;#cb11-3&quot;&gt;&lt;/a&gt;     (process)&lt;/span&gt;
&lt;span id=&quot;cb11-4&quot;&gt;&lt;a href=&quot;#cb11-4&quot;&gt;&lt;/a&gt;     (pig/dump)&lt;/span&gt;
&lt;span id=&quot;cb11-5&quot;&gt;&lt;a href=&quot;#cb11-5&quot;&gt;&lt;/a&gt;     (spit output-path)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;where &lt;code&gt;process&lt;/code&gt; is your awesome logic that includes different transformations and does the heavy processing to your data. Reuse in this example should be obvious, and all of the logic is in the process that could change independently from the i/o. Orthogonality is increased. You could further abstract input and output if you want. This could be done in Pig at some level using Macros to be fair. But not this clean and not this straightforward. This is pure beauty.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</content>
  </entry>
  <entry xml:base="https://bugra.github.io/">
    <title type="text">Unreasonable Effectiveness of Metadata</title>
    <id>https://bugra.github.io/posts/2014/1/30/gmail-analysis</id>
    <updated>2014-01-30T00:00:00Z</updated>
    <published>2014-01-30T00:00:00Z</published>
    <link href="https://bugra.github.io/posts/2014/1/30/gmail-analysis" />
    <author>
      <name>Bugra Akyildiz</name>
    </author>
    <content type="html">&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;
  &lt;title&gt;-&lt;/title&gt;
  &lt;style&gt;
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
  &lt;/style&gt;
  &lt;!--[if lt IE 9]&gt;
    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;
  &lt;![endif]--&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h3 id=&quot;metadata&quot;&gt;Metadata&lt;/h3&gt;
&lt;p&gt;Metadata could be translated as data about data if we want to translate ‘mot à mot’. Generally, it defines what the data is about and gives some descriptive information around that. Still quite abstract huh? If the content of email is data, then sender, receiver, date and time could be considered as metadata. Metadata could be quite important when data is not available or unobservable due to various reasons.&lt;br /&gt;
One of the reasons why they could be collected quite freely and and abundant is because apparently it does not have to go through the same &lt;a href=&quot;http://www.slate.com/articles/news_and_politics/war_stories/2014/01/obama_s_nsa_reforms_the_president_s_proposals_for_metadata_and_the_fisa.html&quot;&gt;privacy concerns&lt;/a&gt; unlike data goes. Moreover, it is likely that its digital footprint is much smaller than data and this leads to efficient storage, computation, analysis and inference. As its name suggests, it is an &lt;strong&gt;abstraction&lt;/strong&gt; of the data it sits on top of the data; it does not necessarily tell the story, but that does not mean it does not reveal anything about data itself. Contrarily, it may expose a lot of interesting patterns and even not just about data.&lt;/p&gt;
&lt;h3 id=&quot;gmail-outage&quot;&gt;Gmail Outage&lt;/h3&gt;
&lt;p&gt;Last week Gmail had an &lt;a href=&quot;http://googleblog.blogspot.in/2014/01/todays-outage-for-several-google.html&quot;&gt;outage&lt;/a&gt; and users could not use their Gmail accounts for almost one hour.&lt;br /&gt;
Consider this scenario, we cannot observe the outage of Gmail(after all it just prompts an error, temporary error 502), but we have all of the metadata of users who use Gmail. It would be quite easy to infer that there is something wrong with Gmail infrastructure and this could be done pretty quickly and efficiently assuming we have all of the statistics and email metada information of users. Looking at the data of the users has another important advantage; you actually do not care if the infrastructure works but if &lt;strong&gt;your users&lt;/strong&gt; could actually use your service. But is there a pattern to begin with?&lt;/p&gt;
&lt;h3 id=&quot;gmail-usage-analysis&quot;&gt;Gmail Usage Analysis&lt;/h3&gt;
&lt;p&gt;So, I used my work gmail account that I used from beginning of June 2013 up to January 2014. I looked at received email and sent email times. The results was quite interesting. Although there are a lot of third party applications which shows some usage statistics, I found none of them secure and reliable. So, I pulled the data from Gmail using standard library &lt;a href=&quot;https://nest.com/&quot;&gt;imaplib&lt;/a&gt;. Apart from easiness, you could have control of all of the folders in your email for arbitrary time intervals whereas third party applications generally either gives predefined(inbox, sent) or put restrictions in the time interval. Python has a batteries-included approach which works quite convenient at the times when you want to do implement something that is already implemented in the standard library.&lt;/p&gt;
&lt;h3 id=&quot;received-emails&quot;&gt;Received Emails&lt;/h3&gt;
&lt;h4 id=&quot;emails-per-day&quot;&gt;Emails Per Day&lt;/h4&gt;
&lt;p&gt;For daily counts of emails, Monday and Thursday has two days less than other days this is due to the federal holidays. But I must say most of the received emails are from project management web app that we were using. When I looked at my received emails, I see mostly notifications rather than “emails”.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2014/1/27/received_email_by_day_bar_plot.png&quot; title=&quot;Received Email By Day&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Received Email By Day&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;What do we infer from the above graph? For some reason, we have less number of emails in Wednesday. Could it be we were working less in Wednesday? Actually, yes. We used to have company meetings in Wednesday. This may not change a lot for one person, but if you consider all of the people in the company spent their times on the meeting, then total time spent becomes ‘meeting-hour * number-of-people’ which apparently has an effect on the total number of emails.&lt;/p&gt;
&lt;h3 id=&quot;what-you-were-receiving-emails-on-sunday&quot;&gt;What!, you were receiving emails on Sunday?&lt;/h3&gt;
&lt;p&gt;So, we were a distributed team and Israeli team took vacations on Friday and worked on Sunday. Those emails are mostly due to the activities and emails from Israeli team. This would also lead to high number of sent emails on Monday as you will see later. What I found interesting is that, more or less most of the days have same number of emails. Even though it &lt;strong&gt;feels&lt;/strong&gt; like beginning of the weeks are stressful and hectic, apparently if we sum the number of emails per day, we get similar number of emails for each day.&lt;/p&gt;
&lt;h3 id=&quot;emails-per-hour&quot;&gt;Emails Per Hour&lt;/h3&gt;
&lt;p&gt;The following graph actually explains what type of email activity shows a distributed and a team which has quite different timezones(USA, Europe, Israel).&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2014/1/27/received_email_by_hour_histogram.png&quot; title=&quot;Received Email By Hour&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Received Email By Hour&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;emails-per-hour-over-time&quot;&gt;Emails Per Hour Over Time&lt;/h3&gt;
&lt;p&gt;There is a “inactive” time zone which corresponds to between 3 am and 6 am EST. However, as different people have are in different time zones, generally the inbox email flow seems to be continuous except inactive time zone. &lt;img src=&quot;/images/work/notes/2014/1/27/received_email_by_hour_month_scatter_plot.png%20%22Received%20Email%20By%20Hour%20Scatter%20Plot%22&quot; alt=&quot;Received Email By Day&quot; /&gt;&lt;/p&gt;
&lt;p&gt;As I have mentioned, the emails are mostly project updates, notifications and lastly and in a small percentage emails. What is more interesting is actually &lt;strong&gt;sent&lt;/strong&gt; folder as it will reveal my email and for some extent working behaviour.&lt;/p&gt;
&lt;h3 id=&quot;sent-emails&quot;&gt;Sent Emails&lt;/h3&gt;
&lt;h4 id=&quot;emails-per-day-1&quot;&gt;Emails Per Day&lt;/h4&gt;
&lt;p&gt;Remember, when I said the beginnings of the week was stressful and hectic, it actually was. Generally, every week either task that I was assigned in the previous week was completed or it the method/algorithm/approach was not working, then we switch to other approaches. Therefore, first two days of the week are mostly spent of trying to understand the task and try to figure out what is actually needed. This process brings a lot of questions and leads to high number of emails and communication. And, yes I was answering emails on Sunday time to time.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2014/1/27/sent_email_by_day_bar_plot.png&quot; title=&quot;Sent Email By Day&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Sent Email By Day&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;emails-per-hour-1&quot;&gt;Emails Per Hour&lt;/h3&gt;
&lt;p&gt;The following graph actually explains a lot of my daily activity. Can you see when I have lunch? Or when I commute to work or when I leave from the work? Such daily behavior probably also affects my reactions and responses to advertisements that I see on web. My probability of responding to a restaurant or a meal ad around noon peaks whereas after 1 hour, I would lose all of my interest to food. Similarly, Uber ads around 9 am and 6 pm would may mean a lot to me whereas I am quite unlikely to respond to the ads at other times.&lt;/p&gt;
&lt;p&gt;I also have two other accounts of in gmail which I use for my personal needs. With combination of those data, more or less my daily activity are actually could be inferred quite accurately from my gmail usage. And, do not forget we did not yet go through my emails but only metada, timestamps of emails. Yet, even this much of data reveals a lot of my daily activity.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2014/1/27/sent_email_by_hour_histogram.png&quot; title=&quot;Sent Email By Hour&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Sent Email By Hour&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;emails-per-hour-over-time-1&quot;&gt;Emails Per Hour Over Time&lt;/h3&gt;
&lt;p&gt;From the following graph, could you see when I took vacation or switched to another job so that my daily activity becomes almost zero? Could you also see the activity in my transition and how it gets moved to non-working hours (mostly).&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2014/1/27/sent_email_by_hour_month_scatter_plot.png&quot; title=&quot;Sent Email By Hour Scatter Plot&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Sent Email By Hour Scatter Plot&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;What is more is of course whom I contacted, what tasks or projects that I worked, what type of emails I received and sent. However, even without context, even without using &lt;em&gt;actual&lt;/em&gt; data, I could go this far. With recent acquisition of &lt;a href=&quot;https://nest.com/&quot;&gt;Nest&lt;/a&gt;, Google not only has our online activity(search, email) but also physical activities which it is fundamental to complete &lt;strong&gt;the cycle&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&quot;what-is-next&quot;&gt;What is next?&lt;/h3&gt;
&lt;p&gt;What is next is to infer the activities from data and predict what we will do next. In order to do that, Google needs abundant data which it already has and machine learning algorithms that are effective for unlabeled and large amounts of data, which it acqui-hires top-notch researchers &lt;a href=&quot;http://www.cifar.ca/Google-DDNresearch-Geoffrey%20Hinton&quot;&gt;Geoffrey Hinton&lt;/a&gt;, &lt;a href=&quot;http://www.technologyreview.com/news/524026/is-google-cornering-the-market-on-deep-learning/&quot;&gt;DeepMind&lt;/a&gt; in order to enable just that.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</content>
  </entry>
  <entry xml:base="https://bugra.github.io/">
    <title type="text">Scala Basics Continued for Python Developers</title>
    <id>https://bugra.github.io/posts/2014/10/20/scala-basics-continued</id>
    <updated>2014-10-20T00:00:00Z</updated>
    <published>2014-10-20T00:00:00Z</published>
    <link href="https://bugra.github.io/posts/2014/10/20/scala-basics-continued" />
    <author>
      <name>Bugra Akyildiz</name>
    </author>
    <content type="html">&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;
  &lt;title&gt;-&lt;/title&gt;
  &lt;style&gt;
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
    pre &gt; code.sourceCode { white-space: pre; position: relative; }
    pre &gt; code.sourceCode &gt; span { display: inline-block; line-height: 1.25; }
    pre &gt; code.sourceCode &gt; span:empty { height: 1.2em; }
    code.sourceCode &gt; span { color: inherit; text-decoration: inherit; }
    div.sourceCode { margin: 1em 0; }
    pre.sourceCode { margin: 0; }
    @media screen {
    div.sourceCode { overflow: auto; }
    }
    @media print {
    pre &gt; code.sourceCode { white-space: pre-wrap; }
    pre &gt; code.sourceCode &gt; span { text-indent: -5em; padding-left: 5em; }
    }
    pre.numberSource code
      { counter-reset: source-line 0; }
    pre.numberSource code &gt; span
      { position: relative; left: -4em; counter-increment: source-line; }
    pre.numberSource code &gt; span &gt; a:first-child::before
      { content: counter(source-line);
        position: relative; left: -1em; text-align: right; vertical-align: baseline;
        border: none; display: inline-block;
        -webkit-touch-callout: none; -webkit-user-select: none;
        -khtml-user-select: none; -moz-user-select: none;
        -ms-user-select: none; user-select: none;
        padding: 0 4px; width: 4em;
        color: #aaaaaa;
      }
    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
    div.sourceCode
      {   }
    @media screen {
    pre &gt; code.sourceCode &gt; span &gt; a:first-child::before { text-decoration: underline; }
    }
    code span.al { color: #ff0000; font-weight: bold; } /* Alert */
    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
    code span.at { color: #7d9029; } /* Attribute */
    code span.bn { color: #40a070; } /* BaseN */
    code span.bu { } /* BuiltIn */
    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
    code span.ch { color: #4070a0; } /* Char */
    code span.cn { color: #880000; } /* Constant */
    code span.co { color: #60a0b0; font-style: italic; } /* Comment */
    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
    code span.do { color: #ba2121; font-style: italic; } /* Documentation */
    code span.dt { color: #902000; } /* DataType */
    code span.dv { color: #40a070; } /* DecVal */
    code span.er { color: #ff0000; font-weight: bold; } /* Error */
    code span.ex { } /* Extension */
    code span.fl { color: #40a070; } /* Float */
    code span.fu { color: #06287e; } /* Function */
    code span.im { } /* Import */
    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
    code span.kw { color: #007020; font-weight: bold; } /* Keyword */
    code span.op { color: #666666; } /* Operator */
    code span.ot { color: #007020; } /* Other */
    code span.pp { color: #bc7a00; } /* Preprocessor */
    code span.sc { color: #4070a0; } /* SpecialChar */
    code span.ss { color: #bb6688; } /* SpecialString */
    code span.st { color: #4070a0; } /* String */
    code span.va { color: #19177c; } /* Variable */
    code span.vs { color: #4070a0; } /* VerbatimString */
    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
  &lt;/style&gt;
  &lt;!--[if lt IE 9]&gt;
    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;
  &lt;![endif]--&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h3 id=&quot;classes&quot;&gt;Classes&lt;/h3&gt;
&lt;h3 id=&quot;inheritance&quot;&gt;Inheritance&lt;/h3&gt;
&lt;p&gt;In Scala, inheritance works in the same way as Java. You could extend the parent class either overriding the methods or building on top of parent class.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre class=&quot;sourceCode scala&quot;&gt;&lt;code class=&quot;sourceCode scala&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;#cb1-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Animal&lt;/span&gt;(name: String, age: Int, family: String)&lt;/span&gt;
&lt;span id=&quot;cb1-2&quot;&gt;&lt;a href=&quot;#cb1-2&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Mammalian&lt;/span&gt;(name: String, age: Int) &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Animal&lt;/span&gt;(name, age, &lt;span class=&quot;st&quot;&gt;&amp;quot;Mammalian&amp;quot;&lt;/span&gt;) {}&lt;/span&gt;
&lt;span id=&quot;cb1-3&quot;&gt;&lt;a href=&quot;#cb1-3&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Insect&lt;/span&gt;(name: String, age: Int) &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Animal&lt;/span&gt;(name, age, &lt;span class=&quot;st&quot;&gt;&amp;quot;Insect&amp;quot;&lt;/span&gt;){}&lt;/span&gt;
&lt;span id=&quot;cb1-4&quot;&gt;&lt;a href=&quot;#cb1-4&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Bird&lt;/span&gt;(name: String, age: Int) &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Animal&lt;/span&gt;(namge, age, &lt;span class=&quot;st&quot;&gt;&amp;quot;Bird&amp;quot;&lt;/span&gt;){}&lt;/span&gt;
&lt;span id=&quot;cb1-5&quot;&gt;&lt;a href=&quot;#cb1-5&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-6&quot;&gt;&lt;a href=&quot;#cb1-6&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;// Both blueWhale1 and blueWhale2 have the same attributes&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-7&quot;&gt;&lt;a href=&quot;#cb1-7&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;val&lt;/span&gt; blueWhale1 = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Animal&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;Churchill&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;Mammalian&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb1-8&quot;&gt;&lt;a href=&quot;#cb1-8&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;val&lt;/span&gt; blueWhale2 = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Mammalian&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;Churchill&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;traits&quot;&gt;Traits&lt;/h3&gt;
&lt;p&gt;If you want to use functionality of other class and do not have direct inheritance between two classes, &lt;code&gt;trait&lt;/code&gt;s are very useful for mixin for those applications.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre class=&quot;sourceCode scala&quot;&gt;&lt;code class=&quot;sourceCode scala&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;#cb2-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;trait&lt;/span&gt; Sound {&lt;/span&gt;
&lt;span id=&quot;cb2-2&quot;&gt;&lt;a href=&quot;#cb2-2&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;val&lt;/span&gt; volume: Int&lt;/span&gt;
&lt;span id=&quot;cb2-3&quot;&gt;&lt;a href=&quot;#cb2-3&quot;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&quot;cb2-4&quot;&gt;&lt;a href=&quot;#cb2-4&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;trait&lt;/span&gt; Move {&lt;/span&gt;
&lt;span id=&quot;cb2-5&quot;&gt;&lt;a href=&quot;#cb2-5&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;val&lt;/span&gt; speed: Int&lt;/span&gt;
&lt;span id=&quot;cb2-6&quot;&gt;&lt;a href=&quot;#cb2-6&quot;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&quot;cb2-7&quot;&gt;&lt;a href=&quot;#cb2-7&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-8&quot;&gt;&lt;a href=&quot;#cb2-8&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Snake &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Animal&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;Black Mamba&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;Insect&amp;quot;&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;with&lt;/span&gt; Sound &lt;span class=&quot;kw&quot;&gt;with&lt;/span&gt; Move {&lt;/span&gt;
&lt;span id=&quot;cb2-9&quot;&gt;&lt;a href=&quot;#cb2-9&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;val&lt;/span&gt; volume = &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-10&quot;&gt;&lt;a href=&quot;#cb2-10&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;val&lt;/span&gt; speed = &lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-11&quot;&gt;&lt;a href=&quot;#cb2-11&quot;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&quot;cb2-12&quot;&gt;&lt;a href=&quot;#cb2-12&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;// snake is an animal with sound and speed&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-13&quot;&gt;&lt;a href=&quot;#cb2-13&quot;&gt;&lt;/a&gt;snake.&lt;span class=&quot;fu&quot;&gt;volume&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// prints 5&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-14&quot;&gt;&lt;a href=&quot;#cb2-14&quot;&gt;&lt;/a&gt;snake.&lt;span class=&quot;fu&quot;&gt;speed&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// prints 20&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;partial-function-call&quot;&gt;Partial Function Call&lt;/h3&gt;
&lt;p&gt;In the &lt;a href=&quot;&quot;&gt;previous post&lt;/a&gt;, if I want to use closure-like function factories, I showed how one may could apply currying to leave one or more parameters in the function call. Instead of curring, one could leave out one of the parameters in the function call and still be able to get a function. So, let’s assume I have the following &lt;code&gt;adderFactory&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb3&quot;&gt;&lt;pre class=&quot;sourceCode scala&quot;&gt;&lt;code class=&quot;sourceCode scala&quot;&gt;&lt;span id=&quot;cb3-1&quot;&gt;&lt;a href=&quot;#cb3-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;adderFactory&lt;/span&gt;(x: Int, y: Int) : Int = {&lt;/span&gt;
&lt;span id=&quot;cb3-2&quot;&gt;&lt;a href=&quot;#cb3-2&quot;&gt;&lt;/a&gt;    x + y&lt;/span&gt;
&lt;span id=&quot;cb3-3&quot;&gt;&lt;a href=&quot;#cb3-3&quot;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&quot;cb3-4&quot;&gt;&lt;a href=&quot;#cb3-4&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;val&lt;/span&gt; adder10 = &lt;span class=&quot;fu&quot;&gt;adderFactory&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;, _: Int)&lt;/span&gt;
&lt;span id=&quot;cb3-5&quot;&gt;&lt;a href=&quot;#cb3-5&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;adder10&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;) &lt;span class=&quot;co&quot;&gt;// prints 15&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that, this version is more flexible in terms of which variables are not used. If you know which variables are first used, and which would be used in the returned function, then you could use directly currying. If not, this approach would still works as in the following:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb4&quot;&gt;&lt;pre class=&quot;sourceCode scala&quot;&gt;&lt;code class=&quot;sourceCode scala&quot;&gt;&lt;span id=&quot;cb4-1&quot;&gt;&lt;a href=&quot;#cb4-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;mulSquareFactory&lt;/span&gt;(x: Int, y: Int, z: Int) : Int = {&lt;/span&gt;
&lt;span id=&quot;cb4-2&quot;&gt;&lt;a href=&quot;#cb4-2&quot;&gt;&lt;/a&gt;    x * y * y * z&lt;/span&gt;
&lt;span id=&quot;cb4-3&quot;&gt;&lt;a href=&quot;#cb4-3&quot;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&quot;cb4-4&quot;&gt;&lt;a href=&quot;#cb4-4&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;val&lt;/span&gt; power15 = &lt;span class=&quot;fu&quot;&gt;mulSquareFactory&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, _: Int, &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb4-5&quot;&gt;&lt;a href=&quot;#cb4-5&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;power15&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;) &lt;span class=&quot;co&quot;&gt;// prints 240 =&amp;gt; 3 * 4 * 4 * 5&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Also, I could curry the multiple argument functions however I like.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb5&quot;&gt;&lt;pre class=&quot;sourceCode scala&quot;&gt;&lt;code class=&quot;sourceCode scala&quot;&gt;&lt;span id=&quot;cb5-1&quot;&gt;&lt;a href=&quot;#cb5-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;val&lt;/span&gt; curriedMulSquareFactory = (mulSquareFactory _).&lt;span class=&quot;fu&quot;&gt;curried&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-2&quot;&gt;&lt;a href=&quot;#cb5-2&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;curriedMulSquareFactory&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;)(&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;)(&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;) &lt;span class=&quot;co&quot;&gt;// prints 240&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-3&quot;&gt;&lt;a href=&quot;#cb5-3&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;val&lt;/span&gt; power15 = &lt;span class=&quot;fu&quot;&gt;curriedMulSquareFactory&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;)(_: Int)(&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In Python, we could use decorators to to be able to use somewhat similar paradigm, but currying is more powerful as you could leave out parameters and then could pass in later steps.&lt;/p&gt;
&lt;h3 id=&quot;variable-argument-function-call&quot;&gt;Variable Argument Function Call&lt;/h3&gt;
&lt;p&gt;In Python, I could capture the variable arguments by position using &lt;code&gt;*&lt;/code&gt;, and variable arguments by keywords &lt;code&gt;**&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb6&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb6-1&quot;&gt;&lt;a href=&quot;#cb6-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; to_title(&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;args):&lt;/span&gt;
&lt;span id=&quot;cb6-2&quot;&gt;&lt;a href=&quot;#cb6-2&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; [ii.lower().title() &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; ii &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; args]&lt;/span&gt;
&lt;span id=&quot;cb6-3&quot;&gt;&lt;a href=&quot;#cb6-3&quot;&gt;&lt;/a&gt;titled_names &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; to_title(&lt;span class=&quot;st&quot;&gt;&amp;#39;elephant&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;bee&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;horse&amp;#39;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb6-4&quot;&gt;&lt;a href=&quot;#cb6-4&quot;&gt;&lt;/a&gt;&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(titled_names) &lt;span class=&quot;op&quot;&gt;//&lt;/span&gt; [&lt;span class=&quot;st&quot;&gt;&amp;#39;Elephant&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;Bee&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;Horse&amp;#39;&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Similarly, (even systax resembles to Python), one can do the same thing in Scala as well using &lt;code&gt;*&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb7&quot;&gt;&lt;pre class=&quot;sourceCode scala&quot;&gt;&lt;code class=&quot;sourceCode scala&quot;&gt;&lt;span id=&quot;cb7-1&quot;&gt;&lt;a href=&quot;#cb7-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;toTitle&lt;/span&gt;(args: String*) = {&lt;/span&gt;
&lt;span id=&quot;cb7-2&quot;&gt;&lt;a href=&quot;#cb7-2&quot;&gt;&lt;/a&gt;    args.&lt;span class=&quot;fu&quot;&gt;map&lt;/span&gt; { arg =&amp;gt;&lt;/span&gt;
&lt;span id=&quot;cb7-3&quot;&gt;&lt;a href=&quot;#cb7-3&quot;&gt;&lt;/a&gt;       arg.&lt;span class=&quot;fu&quot;&gt;toLowerCase&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;capitalize&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-4&quot;&gt;&lt;a href=&quot;#cb7-4&quot;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&quot;cb7-5&quot;&gt;&lt;a href=&quot;#cb7-5&quot;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&quot;cb7-6&quot;&gt;&lt;a href=&quot;#cb7-6&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;val&lt;/span&gt; titledNames = &lt;span class=&quot;fu&quot;&gt;toTitle&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;elePhant&amp;quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;bEe&amp;quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;hoRSe&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb7-7&quot;&gt;&lt;a href=&quot;#cb7-7&quot;&gt;&lt;/a&gt;ArrayBuffer(Elephant, Bee, Horse)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;functional-programming&quot;&gt;Functional Programming&lt;/h3&gt;
&lt;p&gt;Scala supports functional programming quite heavily in both programming language and other constructs that it uses. &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;reduce&lt;/code&gt;, &lt;code&gt;fold&lt;/code&gt; and many more constructs are defined on powerful data structures.&lt;/p&gt;
&lt;p&gt;Using anonymous functions, (since functions are first-class citizens), I could pass the function to other higher order functions.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb8&quot;&gt;&lt;pre class=&quot;sourceCode scala&quot;&gt;&lt;code class=&quot;sourceCode scala&quot;&gt;&lt;span id=&quot;cb8-1&quot;&gt;&lt;a href=&quot;#cb8-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;val&lt;/span&gt; radiusses = (&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; to &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb8-2&quot;&gt;&lt;a href=&quot;#cb8-2&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;val&lt;/span&gt; areas = radiusses.&lt;span class=&quot;fu&quot;&gt;map&lt;/span&gt;(ii =&amp;gt; math.&lt;span class=&quot;fu&quot;&gt;Pi&lt;/span&gt; * ii * ii)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We could also define our function and pass that function into map, and even better we could use combinators to be more expressive:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb9&quot;&gt;&lt;pre class=&quot;sourceCode scala&quot;&gt;&lt;code class=&quot;sourceCode scala&quot;&gt;&lt;span id=&quot;cb9-1&quot;&gt;&lt;a href=&quot;#cb9-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;area&lt;/span&gt;(r: Int): Double = {&lt;/span&gt;
&lt;span id=&quot;cb9-2&quot;&gt;&lt;a href=&quot;#cb9-2&quot;&gt;&lt;/a&gt;   math.&lt;span class=&quot;fu&quot;&gt;Pi&lt;/span&gt; * r * r&lt;/span&gt;
&lt;span id=&quot;cb9-3&quot;&gt;&lt;a href=&quot;#cb9-3&quot;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&quot;cb9-4&quot;&gt;&lt;a href=&quot;#cb9-4&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;val&lt;/span&gt; areas = radiusses.&lt;span class=&quot;fu&quot;&gt;map&lt;/span&gt;(area)&lt;/span&gt;
&lt;span id=&quot;cb9-5&quot;&gt;&lt;a href=&quot;#cb9-5&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;// Using combinator, map function call become more expressive&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb9-6&quot;&gt;&lt;a href=&quot;#cb9-6&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;val&lt;/span&gt; areas = radiusses map area&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;filter&lt;/code&gt; is also similar except it accepts a predicate to be able to filter the list. Function combinators could be still used as in the case of &lt;code&gt;map&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb10&quot;&gt;&lt;pre class=&quot;sourceCode scala&quot;&gt;&lt;code class=&quot;sourceCode scala&quot;&gt;&lt;span id=&quot;cb10-1&quot;&gt;&lt;a href=&quot;#cb10-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;isEven&lt;/span&gt;(x: Int): Boolean = {&lt;/span&gt;
&lt;span id=&quot;cb10-2&quot;&gt;&lt;a href=&quot;#cb10-2&quot;&gt;&lt;/a&gt;   x % &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; == &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb10-3&quot;&gt;&lt;a href=&quot;#cb10-3&quot;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&quot;cb10-4&quot;&gt;&lt;a href=&quot;#cb10-4&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;// I could pass partially applied function as well&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb10-5&quot;&gt;&lt;a href=&quot;#cb10-5&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;val&lt;/span&gt; evenRadiusses = radiusses.&lt;span class=&quot;fu&quot;&gt;filter&lt;/span&gt;(isEven _)&lt;/span&gt;
&lt;span id=&quot;cb10-6&quot;&gt;&lt;a href=&quot;#cb10-6&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;// Function combinators work, too&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb10-7&quot;&gt;&lt;a href=&quot;#cb10-7&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;val&lt;/span&gt; evenRadiusses = radiusses filter isEven&lt;/span&gt;
&lt;span id=&quot;cb10-8&quot;&gt;&lt;a href=&quot;#cb10-8&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(evenRadiusses) &lt;span class=&quot;co&quot;&gt;// prints Vector(2, 4, 6, 8, 10)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;function-composition&quot;&gt;Function Composition&lt;/h3&gt;
&lt;p&gt;We could have function compoosition as well, let’s assume we have the following two functions:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb11&quot;&gt;&lt;pre class=&quot;sourceCode scala&quot;&gt;&lt;code class=&quot;sourceCode scala&quot;&gt;&lt;span id=&quot;cb11-1&quot;&gt;&lt;a href=&quot;#cb11-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;// f(x) =&amp;gt; x^2 (symbolic expression)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb11-2&quot;&gt;&lt;a href=&quot;#cb11-2&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;f&lt;/span&gt;(x: String): String = {&lt;/span&gt;
&lt;span id=&quot;cb11-3&quot;&gt;&lt;a href=&quot;#cb11-3&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;(&amp;quot;&lt;/span&gt; + x + &lt;span class=&quot;st&quot;&gt;&amp;quot;)^2&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb11-4&quot;&gt;&lt;a href=&quot;#cb11-4&quot;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&quot;cb11-5&quot;&gt;&lt;a href=&quot;#cb11-5&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb11-6&quot;&gt;&lt;a href=&quot;#cb11-6&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;// g(x) =&amp;gt; (x + 1) (symbolic expression)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb11-7&quot;&gt;&lt;a href=&quot;#cb11-7&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;g&lt;/span&gt;(x: String): String = {&lt;/span&gt;
&lt;span id=&quot;cb11-8&quot;&gt;&lt;a href=&quot;#cb11-8&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;(&amp;quot;&lt;/span&gt; + x + &lt;span class=&quot;st&quot;&gt;&amp;quot;+1)&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb11-9&quot;&gt;&lt;a href=&quot;#cb11-9&quot;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I could compose this functions using partially applied functions with &lt;code&gt;compose&lt;/code&gt; as in the following:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb12&quot;&gt;&lt;pre class=&quot;sourceCode scala&quot;&gt;&lt;code class=&quot;sourceCode scala&quot;&gt;&lt;span id=&quot;cb12-1&quot;&gt;&lt;a href=&quot;#cb12-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;// first calls g and then f (similar to mathematical definition)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb12-2&quot;&gt;&lt;a href=&quot;#cb12-2&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;val&lt;/span&gt; fComposesG = f _ compose g _&lt;/span&gt;
&lt;span id=&quot;cb12-3&quot;&gt;&lt;a href=&quot;#cb12-3&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;fComposesG&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;3&amp;quot;&lt;/span&gt;) &lt;span class=&quot;co&quot;&gt;// prints  ((3+1))^2&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we want to reverse the order in the function call, we could use &lt;code&gt;andThen&lt;/code&gt;(or simply reverse the order using &lt;code&gt;compose&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb13&quot;&gt;&lt;pre class=&quot;sourceCode scala&quot;&gt;&lt;code class=&quot;sourceCode scala&quot;&gt;&lt;span id=&quot;cb13-1&quot;&gt;&lt;a href=&quot;#cb13-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;val&lt;/span&gt; gComposesF = g _ compose f _&lt;/span&gt;
&lt;span id=&quot;cb13-2&quot;&gt;&lt;a href=&quot;#cb13-2&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;val&lt;/span&gt; fAndThenG = f _ andThen g _&lt;/span&gt;
&lt;span id=&quot;cb13-3&quot;&gt;&lt;a href=&quot;#cb13-3&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb13-4&quot;&gt;&lt;a href=&quot;#cb13-4&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;fAndThenG&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;3&amp;quot;&lt;/span&gt;) &lt;span class=&quot;co&quot;&gt;// ((3)^2+1)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb13-5&quot;&gt;&lt;a href=&quot;#cb13-5&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;gComposesF&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;3&amp;quot;&lt;/span&gt;) &lt;span class=&quot;co&quot;&gt;// ((3)^2+1)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;pattern-matching&quot;&gt;Pattern Matching&lt;/h3&gt;
&lt;p&gt;One of the mostly praised aspect of the language. Quite comprehensive and even sometimes replaces conditional statements in order to control the flow of the program.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb14&quot;&gt;&lt;pre class=&quot;sourceCode scala&quot;&gt;&lt;code class=&quot;sourceCode scala&quot;&gt;&lt;span id=&quot;cb14-1&quot;&gt;&lt;a href=&quot;#cb14-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;val&lt;/span&gt; name = &lt;span class=&quot;st&quot;&gt;&amp;quot;Bugra&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb14-2&quot;&gt;&lt;a href=&quot;#cb14-2&quot;&gt;&lt;/a&gt; name &lt;span class=&quot;kw&quot;&gt;match&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&quot;cb14-3&quot;&gt;&lt;a href=&quot;#cb14-3&quot;&gt;&lt;/a&gt;     &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Bugra&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;It is my name!&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb14-4&quot;&gt;&lt;a href=&quot;#cb14-4&quot;&gt;&lt;/a&gt;     &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;John&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;It is John&amp;#39;s name&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb14-5&quot;&gt;&lt;a href=&quot;#cb14-5&quot;&gt;&lt;/a&gt;     &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; _ =&amp;gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;We do not know who has this name&amp;quot;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// It will match everything&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb14-6&quot;&gt;&lt;a href=&quot;#cb14-6&quot;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Pattern matching could be also used for matching different types as well. But most importantly, if you want to match objects, you could use &lt;code&gt;case class&lt;/code&gt;es in order to match based on attributes of an object which is very useful as it completely gets rid of writing custom functions.&lt;/p&gt;
&lt;h3 id=&quot;case-classes&quot;&gt;Case Classes&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb15&quot;&gt;&lt;pre class=&quot;sourceCode scala&quot;&gt;&lt;code class=&quot;sourceCode scala&quot;&gt;&lt;span id=&quot;cb15-1&quot;&gt;&lt;a href=&quot;#cb15-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Animal&lt;/span&gt;(name: String, age: Int, family: String)&lt;/span&gt;
&lt;span id=&quot;cb15-2&quot;&gt;&lt;a href=&quot;#cb15-2&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb15-3&quot;&gt;&lt;a href=&quot;#cb15-3&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;// Note that I am not using new keyword for case classes&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb15-4&quot;&gt;&lt;a href=&quot;#cb15-4&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;val&lt;/span&gt; blueWhale = &lt;span class=&quot;fu&quot;&gt;Animal&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;Mobby Dick&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;Mammalian&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb15-5&quot;&gt;&lt;a href=&quot;#cb15-5&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;val&lt;/span&gt; bluishWhale = &lt;span class=&quot;fu&quot;&gt;Animal&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;Mobby Dick&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;Mammalian&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb15-6&quot;&gt;&lt;a href=&quot;#cb15-6&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb15-7&quot;&gt;&lt;a href=&quot;#cb15-7&quot;&gt;&lt;/a&gt;blueWhale == bluishWhale &lt;span class=&quot;co&quot;&gt;// prints True&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Case classes are great for pattern matching as well:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb16&quot;&gt;&lt;pre class=&quot;sourceCode scala&quot;&gt;&lt;code class=&quot;sourceCode scala&quot;&gt;&lt;span id=&quot;cb16-1&quot;&gt;&lt;a href=&quot;#cb16-1&quot;&gt;&lt;/a&gt;blueWhale &lt;span class=&quot;kw&quot;&gt;match&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&quot;cb16-2&quot;&gt;&lt;a href=&quot;#cb16-2&quot;&gt;&lt;/a&gt;   &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Animal&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;Mobby Dick&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;Mammalian&amp;quot;&lt;/span&gt;) =&amp;gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;It is Mobby Dick&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb16-3&quot;&gt;&lt;a href=&quot;#cb16-3&quot;&gt;&lt;/a&gt;   &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Animal&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;Black Mumba&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;Insect&amp;quot;&lt;/span&gt;) =&amp;gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;It is Black Mumba&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb16-4&quot;&gt;&lt;a href=&quot;#cb16-4&quot;&gt;&lt;/a&gt;   &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Animal&lt;/span&gt;(_, _, _) =&amp;gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Unknown animal&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb16-5&quot;&gt;&lt;a href=&quot;#cb16-5&quot;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</content>
  </entry>
  <entry xml:base="https://bugra.github.io/">
    <title type="text">Scala Basics for Python Developers</title>
    <id>https://bugra.github.io/posts/2014/10/18/scala-for-python-developers</id>
    <updated>2014-10-18T00:00:00Z</updated>
    <published>2014-10-18T00:00:00Z</published>
    <link href="https://bugra.github.io/posts/2014/10/18/scala-for-python-developers" />
    <author>
      <name>Bugra Akyildiz</name>
    </author>
    <content type="html">&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;
  &lt;title&gt;-&lt;/title&gt;
  &lt;style&gt;
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
    pre &gt; code.sourceCode { white-space: pre; position: relative; }
    pre &gt; code.sourceCode &gt; span { display: inline-block; line-height: 1.25; }
    pre &gt; code.sourceCode &gt; span:empty { height: 1.2em; }
    code.sourceCode &gt; span { color: inherit; text-decoration: inherit; }
    div.sourceCode { margin: 1em 0; }
    pre.sourceCode { margin: 0; }
    @media screen {
    div.sourceCode { overflow: auto; }
    }
    @media print {
    pre &gt; code.sourceCode { white-space: pre-wrap; }
    pre &gt; code.sourceCode &gt; span { text-indent: -5em; padding-left: 5em; }
    }
    pre.numberSource code
      { counter-reset: source-line 0; }
    pre.numberSource code &gt; span
      { position: relative; left: -4em; counter-increment: source-line; }
    pre.numberSource code &gt; span &gt; a:first-child::before
      { content: counter(source-line);
        position: relative; left: -1em; text-align: right; vertical-align: baseline;
        border: none; display: inline-block;
        -webkit-touch-callout: none; -webkit-user-select: none;
        -khtml-user-select: none; -moz-user-select: none;
        -ms-user-select: none; user-select: none;
        padding: 0 4px; width: 4em;
        color: #aaaaaa;
      }
    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
    div.sourceCode
      {   }
    @media screen {
    pre &gt; code.sourceCode &gt; span &gt; a:first-child::before { text-decoration: underline; }
    }
    code span.al { color: #ff0000; font-weight: bold; } /* Alert */
    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
    code span.at { color: #7d9029; } /* Attribute */
    code span.bn { color: #40a070; } /* BaseN */
    code span.bu { } /* BuiltIn */
    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
    code span.ch { color: #4070a0; } /* Char */
    code span.cn { color: #880000; } /* Constant */
    code span.co { color: #60a0b0; font-style: italic; } /* Comment */
    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
    code span.do { color: #ba2121; font-style: italic; } /* Documentation */
    code span.dt { color: #902000; } /* DataType */
    code span.dv { color: #40a070; } /* DecVal */
    code span.er { color: #ff0000; font-weight: bold; } /* Error */
    code span.ex { } /* Extension */
    code span.fl { color: #40a070; } /* Float */
    code span.fu { color: #06287e; } /* Function */
    code span.im { } /* Import */
    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
    code span.kw { color: #007020; font-weight: bold; } /* Keyword */
    code span.op { color: #666666; } /* Operator */
    code span.ot { color: #007020; } /* Other */
    code span.pp { color: #bc7a00; } /* Preprocessor */
    code span.sc { color: #4070a0; } /* SpecialChar */
    code span.ss { color: #bb6688; } /* SpecialString */
    code span.st { color: #4070a0; } /* String */
    code span.va { color: #19177c; } /* Variable */
    code span.vs { color: #4070a0; } /* VerbatimString */
    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
  &lt;/style&gt;
  &lt;!--[if lt IE 9]&gt;
    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;
  &lt;![endif]--&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;Python is great language, its syntax, standard library and scientific computing stack(&lt;code&gt;numpy&lt;/code&gt;, &lt;code&gt;scipy&lt;/code&gt;, &lt;code&gt;scikit-learn&lt;/code&gt;, &lt;code&gt;matplotlib&lt;/code&gt; and many others) are just great. I feel like whenever I have a problem at my hand, it will be my first to go language no matter what with the extensive library support and community. However, as every programming language has its own shortcomings, Python has its own as well. It is not well-suited concurrent programming and parallelism, it is slow(comparing to JVM based languages), its support for functional programming is limited to &lt;code&gt;map&lt;/code&gt; function and &lt;code&gt;functools&lt;/code&gt; module. Also, with rising &lt;em&gt;big data&lt;/em&gt;, both Hadoop and Spark favor JVM based languages(Java and Scala), for large scale data processing, Python’s longtime data processing disadvantages increased by one. You could use interfaces through Jython but development of Jython is lacking and sometimes due to version differences you may not use the feature-full Python with Python.&lt;/p&gt;
&lt;p&gt;In this post, I will make a comparison in &lt;em&gt;variables&lt;/em&gt;, &lt;em&gt;functions&lt;/em&gt; and &lt;em&gt;classes&lt;/em&gt; of both languages. Admittedly, they cover very easy constructs but my hope is that it would be a good start for Python developers who want to learn more about Scala.&lt;/p&gt;
&lt;h3 id=&quot;scala&quot;&gt;Scala&lt;/h3&gt;
&lt;p&gt;If you have not heard of Scala, it is JVM based, modern programming language, succinct syntax and supports both object-oriented and functional programming style with many more advanced features which I will tell a little bit about shortly.&lt;/p&gt;
&lt;h4 id=&quot;why&quot;&gt;Why&lt;/h4&gt;
&lt;p&gt;Mainly for Big Data to be honest. Adoption of Scala from companies is also good but especially Scalding and Spark use Scala, I thought I should give it a shot Scala as well as I have been playing/using Clojure for some time and &lt;shameless id=&quot;promotion&quot;&gt; I open-sourced a &lt;a href=&quot;https://github.com/bugra/knn&quot;&gt;K Nearest Neighbor classifier&lt;/a&gt; in Clojure if you are interested) &lt;/shameless&gt;, enjoying it so far. Also, I found very powerful to be able to combine a Java library with Clojure as it is pretty seamless with Leiningen. What I like about this hybrid approach, you get to use all of these mature libraries written in Java where you write Clojure on top of it.(In this case, Scala). I think using JVM under the hood and building on top of long-time&lt;/p&gt;
&lt;h3 id=&quot;advantages&quot;&gt;Advantages&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;It is JVM based and you could use almost all of the available Java libraries(similar to Clojure in this sense)&lt;/li&gt;
&lt;li&gt;It is a hybrid language which combines object-oriented programming style and functional programming style. If you want to use one aspect heavily and not so much for the other aspect, that is great as it does not compromise in any particular part of the language.&lt;/li&gt;
&lt;li&gt;It has type inference unlike Java, you could pass functions freely unlike Java. All in all, it is superior to Java in almost all aspects where it does not compromise the speed.&lt;/li&gt;
&lt;li&gt;Great pattern matching support. Some of them could be also used for conditional statements as well.&lt;/li&gt;
&lt;li&gt;Scala’s programs tend to be more succinct and terse. Compare this verbosity of Java and you could see an decrease in development time and increase in productivity. This is partially because functional programming makes it much easier to common operations but also data structures(especially the collections) are simply a better version of Java’s. Also, the classes provide nice shortcuts for Java bean so that you could get away with not writing &lt;code&gt;getter&lt;/code&gt; and &lt;code&gt;setter&lt;/code&gt;s for basic classes.&lt;/li&gt;
&lt;li&gt;Immutable data structures make concurrent programs much easier to run(similar to Clojure as well).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;disadvantages&quot;&gt;Disadvantages&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;There are many ways to do one thing. This is the biggest one. This must be avoided if one language wants to be readable by many people. But for the coverage of Scala is overwhelmingly is large and supports so many things that, this could not be avoided in the design of language, I guess.&lt;/li&gt;
&lt;li&gt;Tooling is not very great. Even though the language has been around for some time(~11 years), I am surprised by &lt;code&gt;sbt&lt;/code&gt; and how inferior the available tooling is for the language. Hopefully, this will improve in the future.&lt;/li&gt;
&lt;li&gt;Some people complain about how slow it is when it comes to compile large projects, I did not use Scala for large projects but I could see how this might be quite problematic in the environments where you want to do multiple iterations in large projects.&lt;/li&gt;
&lt;li&gt;Syntax. There are ton of features in the language, and some of the features could be applied with syntactic sugar. This is not disadvantage per se, but still contributes the problem of having many ways to do one thing.&lt;/li&gt;
&lt;li&gt;There is a native XML data structure. The following code is valid in Scala:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre class=&quot;sourceCode scala&quot;&gt;&lt;code class=&quot;sourceCode scala&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;#cb1-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;val&lt;/span&gt; xmlRepresentation =  &amp;lt;p&amp;gt;&amp;lt;a href=&lt;span class=&quot;st&quot;&gt;&amp;quot;http://bugra.github.io/&amp;quot;&lt;/span&gt;&amp;gt;Bugra Akyildiz&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If this is not a disadvantage per se, it is weird. I would understand JSON but XML, really Scala? I thought you are superior to Java, but it turns out that you are Java in some aspects!&lt;/p&gt;
&lt;h3 id=&quot;installation-on-mac-os-x&quot;&gt;Installation on Mac OS X&lt;/h3&gt;
&lt;h4 id=&quot;homebrew&quot;&gt;Homebrew&lt;/h4&gt;
&lt;p&gt;If you do not have &lt;code&gt;homebrew&lt;/code&gt; in Mac OS X, use the following command to install first the package manager:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;#cb2-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;ruby&lt;/span&gt; -e “&lt;span class=&quot;va&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;ex&quot;&gt;curl&lt;/span&gt; -fsSL https://raw.github.com/Homebrew/homebrew/go/install&lt;span class=&quot;va&quot;&gt;)&lt;/span&gt;”&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;scala-1&quot;&gt;Scala&lt;/h3&gt;
&lt;p&gt;Then, you could install &lt;code&gt;scala&lt;/code&gt; via home-brew:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb3&quot;&gt;&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb3-1&quot;&gt;&lt;a href=&quot;#cb3-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;brew&lt;/span&gt; install scala&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After installing the scala, you could type scala to the command line in order to start the interactive REPL.&lt;/p&gt;
&lt;h3 id=&quot;sbt&quot;&gt;Sbt&lt;/h3&gt;
&lt;p&gt;In the meantime, you want to install &lt;code&gt;sbt&lt;/code&gt;(scala build tool), similar to &lt;code&gt;maven&lt;/code&gt; and &lt;code&gt;ant&lt;/code&gt; in Java if you are familiar with one of those.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb4&quot;&gt;&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb4-1&quot;&gt;&lt;a href=&quot;#cb4-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;brew&lt;/span&gt; install sbt&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;ide-support&quot;&gt;IDE Support&lt;/h3&gt;
&lt;p&gt;Scala has official support for Eclipse, one can use Intellij IDEA for Scala through Plugin. I am using Intellij, so I installed plugin(Preferences -&amp;gt; Plugins -&amp;gt; Scala). Installation is quite straightforward.&lt;/p&gt;
&lt;h3 id=&quot;variables-in-scala&quot;&gt;Variables in Scala&lt;/h3&gt;
&lt;p&gt;There are two different ways to define variables in Scala. First one is immutable(which is a nice fit for functional programming style) and the other one is mutable ones(surprise!). Immutable data structures cannot be changed after variables are assigned whereas mutable data structures could be changed. In order to define immutable ones, one can use &lt;code&gt;val&lt;/code&gt; and for mutable ones &lt;code&gt;var&lt;/code&gt;. Unlike Python, you could have a mutable and immutable string or integer, whereas in Python you have a predefined datasets which are immutable(string and tuple) and mutable(list and dictionary).&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb5&quot;&gt;&lt;pre class=&quot;sourceCode scala&quot;&gt;&lt;code class=&quot;sourceCode scala&quot;&gt;&lt;span id=&quot;cb5-1&quot;&gt;&lt;a href=&quot;#cb5-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;// String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-2&quot;&gt;&lt;a href=&quot;#cb5-2&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;val&lt;/span&gt; firstName: String = &lt;span class=&quot;st&quot;&gt;&amp;quot;Bugra&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-3&quot;&gt;&lt;a href=&quot;#cb5-3&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;// We could leave the type, and type inference takes into place&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-4&quot;&gt;&lt;a href=&quot;#cb5-4&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;val&lt;/span&gt; firstName = &lt;span class=&quot;st&quot;&gt;&amp;quot;Bugra&amp;quot;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// firstName is still string&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-5&quot;&gt;&lt;a href=&quot;#cb5-5&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;// Similarly, we could always remove the type in the declaration&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-6&quot;&gt;&lt;a href=&quot;#cb5-6&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;// part and expect it will be inferred from the value&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-7&quot;&gt;&lt;a href=&quot;#cb5-7&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;// Integer&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-8&quot;&gt;&lt;a href=&quot;#cb5-8&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;val&lt;/span&gt; firstPrimeNumber = &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-9&quot;&gt;&lt;a href=&quot;#cb5-9&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;// Double &lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-10&quot;&gt;&lt;a href=&quot;#cb5-10&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;val&lt;/span&gt; doubleNumber = &lt;span class=&quot;fl&quot;&gt;3.0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-11&quot;&gt;&lt;a href=&quot;#cb5-11&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;// Long&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-12&quot;&gt;&lt;a href=&quot;#cb5-12&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;val&lt;/span&gt; longNumber = 5L&lt;/span&gt;
&lt;span id=&quot;cb5-13&quot;&gt;&lt;a href=&quot;#cb5-13&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;// Up to this point, if you remove the types and val, everything &lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-14&quot;&gt;&lt;a href=&quot;#cb5-14&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;// works in Python similarly as well&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-15&quot;&gt;&lt;a href=&quot;#cb5-15&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-16&quot;&gt;&lt;a href=&quot;#cb5-16&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;// Characters are represented &amp;#39;&amp;#39; as in Java&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-17&quot;&gt;&lt;a href=&quot;#cb5-17&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;val&lt;/span&gt; firstChar = &lt;span class=&quot;fu&quot;&gt;firstName&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb5-18&quot;&gt;&lt;a href=&quot;#cb5-18&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;// Symbols are useful string representation for string interning&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-19&quot;&gt;&lt;a href=&quot;#cb5-19&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;// also makes it easier to compare two strings&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-20&quot;&gt;&lt;a href=&quot;#cb5-20&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;// There is no symbol equivalent for Python&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-21&quot;&gt;&lt;a href=&quot;#cb5-21&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;val&lt;/span&gt; symbol = &amp;#39;ha&lt;/span&gt;
&lt;span id=&quot;cb5-22&quot;&gt;&lt;a href=&quot;#cb5-22&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;// null, same null in Java, similar to None in Python&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-23&quot;&gt;&lt;a href=&quot;#cb5-23&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;val&lt;/span&gt; non = &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-24&quot;&gt;&lt;a href=&quot;#cb5-24&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;// List (First get Range and then convert it into list)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-25&quot;&gt;&lt;a href=&quot;#cb5-25&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;val&lt;/span&gt; numbers = (&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; to &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;toList&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-26&quot;&gt;&lt;a href=&quot;#cb5-26&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;// This works too&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-27&quot;&gt;&lt;a href=&quot;#cb5-27&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;val&lt;/span&gt; anotherNumbers = List(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb5-28&quot;&gt;&lt;a href=&quot;#cb5-28&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;// Tuple(very similar to Python, can contain different data structures and immutable)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-29&quot;&gt;&lt;a href=&quot;#cb5-29&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;val&lt;/span&gt; tuple = (firstName, doubleNumber, non, numbers)&lt;/span&gt;
&lt;span id=&quot;cb5-30&quot;&gt;&lt;a href=&quot;#cb5-30&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;// Access to tuple elements use an interesting syntax and &lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-31&quot;&gt;&lt;a href=&quot;#cb5-31&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;// starts with 1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-32&quot;&gt;&lt;a href=&quot;#cb5-32&quot;&gt;&lt;/a&gt;tuple._&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// =&amp;gt; returns firstName&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-33&quot;&gt;&lt;a href=&quot;#cb5-33&quot;&gt;&lt;/a&gt;tuple._&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// =&amp;gt; returns doubleNumber and so on&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-34&quot;&gt;&lt;a href=&quot;#cb5-34&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;// XML(!), needless to say, Python does not have equivalent &lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-35&quot;&gt;&lt;a href=&quot;#cb5-35&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;// of this&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-36&quot;&gt;&lt;a href=&quot;#cb5-36&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;val&lt;/span&gt; xmlRepresentation =  &amp;lt;p&amp;gt;&amp;lt;a href=&lt;span class=&quot;st&quot;&gt;&amp;quot;http://bugra.github.io/&amp;quot;&lt;/span&gt;&amp;gt;Bugra Akyildiz&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span id=&quot;cb5-37&quot;&gt;&lt;a href=&quot;#cb5-37&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;// Unit type, which is almost same void in Java&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-38&quot;&gt;&lt;a href=&quot;#cb5-38&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;val&lt;/span&gt; unitType : Unit = ()&lt;/span&gt;
&lt;span id=&quot;cb5-39&quot;&gt;&lt;a href=&quot;#cb5-39&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;val&lt;/span&gt; unitType = () &lt;span class=&quot;co&quot;&gt;// same as above, type inference&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-40&quot;&gt;&lt;a href=&quot;#cb5-40&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;// Dictionary Like Map which could have different types in their names and keys&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-41&quot;&gt;&lt;a href=&quot;#cb5-41&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;val&lt;/span&gt; blueWhale = Map(&lt;span class=&quot;st&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Blue Whale&amp;quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;weight&amp;quot;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;dv&quot;&gt;170&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;height&amp;quot;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;dv&quot;&gt;30&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb5-42&quot;&gt;&lt;a href=&quot;#cb5-42&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;// To access key, same as Python(with a tweak)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-43&quot;&gt;&lt;a href=&quot;#cb5-43&quot;&gt;&lt;/a&gt;blueWhale.&lt;span class=&quot;fu&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb5-44&quot;&gt;&lt;a href=&quot;#cb5-44&quot;&gt;&lt;/a&gt;blueWhale.&lt;span class=&quot;fu&quot;&gt;getOrElse&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;color&amp;quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;blue&amp;quot;&lt;/span&gt;) &lt;span class=&quot;co&quot;&gt;// returns blue&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With type inference, Scala generally feels like a dynamic language even if it is strongly typed language when it comes to variables.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Immutable 
val ii = 1
// Following gives: 
//&amp;lt;console&amp;gt;:9: error: value += is not a member of Int
//              ii += 1
//                 ^
// which means + operator is not defined on the immutable Int
ii += 1 
// Immutable data structures cannot be reassigned
// It gives the following error
// &amp;lt;console&amp;gt;:8: error: reassignment to val
//       ii = 3
//          ^
ii = 3 
// Instead use mutable with var
var ii = 0
ii += 1 // ii = 1&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;variables-in-python&quot;&gt;Variables in Python&lt;/h3&gt;
&lt;p&gt;In Python, there are some immutable data structures like tuple, string and some of them are mutable (list and dictionary) unlike Scala.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb7&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb7-1&quot;&gt;&lt;a href=&quot;#cb7-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;# string&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-2&quot;&gt;&lt;a href=&quot;#cb7-2&quot;&gt;&lt;/a&gt;first_name &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Bugra&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-3&quot;&gt;&lt;a href=&quot;#cb7-3&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;# integer&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-4&quot;&gt;&lt;a href=&quot;#cb7-4&quot;&gt;&lt;/a&gt;first_prime_number &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-5&quot;&gt;&lt;a href=&quot;#cb7-5&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;# double&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-6&quot;&gt;&lt;a href=&quot;#cb7-6&quot;&gt;&lt;/a&gt;double_number &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;3.0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-7&quot;&gt;&lt;a href=&quot;#cb7-7&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;# long&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-8&quot;&gt;&lt;a href=&quot;#cb7-8&quot;&gt;&lt;/a&gt;long_number &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;5L&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-9&quot;&gt;&lt;a href=&quot;#cb7-9&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-10&quot;&gt;&lt;a href=&quot;#cb7-10&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;There is no character variable in Python, this is string as well&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-11&quot;&gt;&lt;a href=&quot;#cb7-11&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;also note that Scala uses parenthesizes rather than square &lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-12&quot;&gt;&lt;a href=&quot;#cb7-12&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;brackets to access elements of collections, strings, arrays &lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-13&quot;&gt;&lt;a href=&quot;#cb7-13&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-14&quot;&gt;&lt;a href=&quot;#cb7-14&quot;&gt;&lt;/a&gt;first_char &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; first_name[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&quot;cb7-15&quot;&gt;&lt;a href=&quot;#cb7-15&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-16&quot;&gt;&lt;a href=&quot;#cb7-16&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;List (powerhorse of Python), very useful, can contain &lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-17&quot;&gt;&lt;a href=&quot;#cb7-17&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;different data structures &lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-18&quot;&gt;&lt;a href=&quot;#cb7-18&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-19&quot;&gt;&lt;a href=&quot;#cb7-19&quot;&gt;&lt;/a&gt;numbers &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb7-20&quot;&gt;&lt;a href=&quot;#cb7-20&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;# Tuple&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-21&quot;&gt;&lt;a href=&quot;#cb7-21&quot;&gt;&lt;/a&gt;tup &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (first_char, first_prime_numbers, numbers)&lt;/span&gt;
&lt;span id=&quot;cb7-22&quot;&gt;&lt;a href=&quot;#cb7-22&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;# indexing tuples and lists are same, with square brackets&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-23&quot;&gt;&lt;a href=&quot;#cb7-23&quot;&gt;&lt;/a&gt;&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(tup[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;], numbers[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;]) &lt;span class=&quot;op&quot;&gt;//&lt;/span&gt; first_char, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;/span&gt;
&lt;span id=&quot;cb7-24&quot;&gt;&lt;a href=&quot;#cb7-24&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;# Dictionary, JSON-like hash-maps of Python&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-25&quot;&gt;&lt;a href=&quot;#cb7-25&quot;&gt;&lt;/a&gt;blue_whale &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&quot;cb7-26&quot;&gt;&lt;a href=&quot;#cb7-26&quot;&gt;&lt;/a&gt;                            &lt;span class=&quot;st&quot;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&amp;#39;Blue Whale&amp;#39;&lt;/span&gt;,&lt;/span&gt;
&lt;span id=&quot;cb7-27&quot;&gt;&lt;a href=&quot;#cb7-27&quot;&gt;&lt;/a&gt;                            &lt;span class=&quot;st&quot;&gt;&amp;#39;weight&amp;#39;&lt;/span&gt;: &lt;span class=&quot;dv&quot;&gt;170&lt;/span&gt;,&lt;/span&gt;
&lt;span id=&quot;cb7-28&quot;&gt;&lt;a href=&quot;#cb7-28&quot;&gt;&lt;/a&gt;                            &lt;span class=&quot;st&quot;&gt;&amp;#39;height&amp;#39;&lt;/span&gt;: &lt;span class=&quot;dv&quot;&gt;30&lt;/span&gt;,&lt;/span&gt;
&lt;span id=&quot;cb7-29&quot;&gt;&lt;a href=&quot;#cb7-29&quot;&gt;&lt;/a&gt;                         }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;functions&quot;&gt;Functions&lt;/h3&gt;
&lt;p&gt;There are a lot of ways to define functions in Scala whereas in Python there are two ways; functions and anonymous functions. This “there are a lot of ways” is common afterwards in Scala. We will see there are a lot of ways to define classes as well in the next section.&lt;/p&gt;
&lt;h3 id=&quot;functions-in-python&quot;&gt;Functions in Python&lt;/h3&gt;
&lt;p&gt;You could define a function with a name, or define an anonymous function using &lt;code&gt;lambda&lt;/code&gt; expression and then assign it to to a name. Lambda expressions are limited to single line and cannot accept optional parameters. So, in practice, anonymous functions are generally used ad-hoc.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb8&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb8-1&quot;&gt;&lt;a href=&quot;#cb8-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; adder(x, y):&lt;/span&gt;
&lt;span id=&quot;cb8-2&quot;&gt;&lt;a href=&quot;#cb8-2&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; x &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; y&lt;/span&gt;
&lt;span id=&quot;cb8-3&quot;&gt;&lt;a href=&quot;#cb8-3&quot;&gt;&lt;/a&gt;adder(&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;) &lt;span class=&quot;co&quot;&gt;# 7&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb8-4&quot;&gt;&lt;a href=&quot;#cb8-4&quot;&gt;&lt;/a&gt;adder &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;lambda&lt;/span&gt; x, y: x &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; y&lt;/span&gt;
&lt;span id=&quot;cb8-5&quot;&gt;&lt;a href=&quot;#cb8-5&quot;&gt;&lt;/a&gt;adder(&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;) &lt;span class=&quot;co&quot;&gt;# 7 again&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;functions-in-scala&quot;&gt;Functions in Scala&lt;/h3&gt;
&lt;p&gt;The same adder can be defined in scala following way(Other than types, it is very similar to Python)&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb9&quot;&gt;&lt;pre class=&quot;sourceCode scala&quot;&gt;&lt;code class=&quot;sourceCode scala&quot;&gt;&lt;span id=&quot;cb9-1&quot;&gt;&lt;a href=&quot;#cb9-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;adder1&lt;/span&gt;(x: Int, y: Int): Int = {&lt;/span&gt;
&lt;span id=&quot;cb9-2&quot;&gt;&lt;a href=&quot;#cb9-2&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; x + y&lt;/span&gt;
&lt;span id=&quot;cb9-3&quot;&gt;&lt;a href=&quot;#cb9-3&quot;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&quot;cb9-4&quot;&gt;&lt;a href=&quot;#cb9-4&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;//  We could leave out the return type and return statement&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb9-5&quot;&gt;&lt;a href=&quot;#cb9-5&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;// Last statement automatically to be returned and return type &lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb9-6&quot;&gt;&lt;a href=&quot;#cb9-6&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;// is inferred by the compiler &lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb9-7&quot;&gt;&lt;a href=&quot;#cb9-7&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;adder2&lt;/span&gt;(x: Int, y: Int) = {&lt;/span&gt;
&lt;span id=&quot;cb9-8&quot;&gt;&lt;a href=&quot;#cb9-8&quot;&gt;&lt;/a&gt;    x + y&lt;/span&gt;
&lt;span id=&quot;cb9-9&quot;&gt;&lt;a href=&quot;#cb9-9&quot;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&quot;cb9-10&quot;&gt;&lt;a href=&quot;#cb9-10&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;// The same function could be defined using anonymous function&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb9-11&quot;&gt;&lt;a href=&quot;#cb9-11&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;val&lt;/span&gt; adder3 = (x: Int, y: Int) =&amp;gt; x + y&lt;/span&gt;
&lt;span id=&quot;cb9-12&quot;&gt;&lt;a href=&quot;#cb9-12&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;// Since cases return values as well, we could use them as functions&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb9-13&quot;&gt;&lt;a href=&quot;#cb9-13&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;val&lt;/span&gt; adder4: (Int, Int) =&amp;gt; Int = {&lt;/span&gt;
&lt;span id=&quot;cb9-14&quot;&gt;&lt;a href=&quot;#cb9-14&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; (x, y) =&amp;gt; x + y&lt;/span&gt;
&lt;span id=&quot;cb9-15&quot;&gt;&lt;a href=&quot;#cb9-15&quot;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&quot;cb9-16&quot;&gt;&lt;a href=&quot;#cb9-16&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;// Curried Functions are interesting&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb9-17&quot;&gt;&lt;a href=&quot;#cb9-17&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;adderFactory&lt;/span&gt;(x: Int)(y: Int) : Int = x + y&lt;/span&gt;
&lt;span id=&quot;cb9-18&quot;&gt;&lt;a href=&quot;#cb9-18&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;// We could create our own adders using currying&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb9-19&quot;&gt;&lt;a href=&quot;#cb9-19&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;val&lt;/span&gt; adder10 = &lt;span class=&quot;fu&quot;&gt;adderFactory&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;) _ &lt;/span&gt;
&lt;span id=&quot;cb9-20&quot;&gt;&lt;a href=&quot;#cb9-20&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;adder10&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;) &lt;span class=&quot;co&quot;&gt;// returns 15&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb9-21&quot;&gt;&lt;a href=&quot;#cb9-21&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;// Closures could be created using this currying concept in functions&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb9-22&quot;&gt;&lt;a href=&quot;#cb9-22&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb9-23&quot;&gt;&lt;a href=&quot;#cb9-23&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;// If we want to use only side effects of function, we could do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb9-24&quot;&gt;&lt;a href=&quot;#cb9-24&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;// This will return `unit` and called &amp;#39;procedure&amp;#39; as well&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb9-25&quot;&gt;&lt;a href=&quot;#cb9-25&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;// This does not accept any parameters either&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb9-26&quot;&gt;&lt;a href=&quot;#cb9-26&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; printer = {&lt;/span&gt;
&lt;span id=&quot;cb9-27&quot;&gt;&lt;a href=&quot;#cb9-27&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;I am printer&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb9-28&quot;&gt;&lt;a href=&quot;#cb9-28&quot;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&quot;cb9-29&quot;&gt;&lt;a href=&quot;#cb9-29&quot;&gt;&lt;/a&gt;printer &lt;span class=&quot;co&quot;&gt;// prints &amp;quot;I am printer&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;classes&quot;&gt;Classes&lt;/h3&gt;
&lt;p&gt;Both Python and Scala support object oriented programming style. They do not enforce the usage of object oriented programming style unlike Java, though. In that aspect, they are similar. But as in the case of functions, there are many ways to create classes in Scala and it has also quite some syntactic sugars when it comes to commonly used constructs in classes.&lt;/p&gt;
&lt;h3 id=&quot;classes-in-python&quot;&gt;Classes in Python&lt;/h3&gt;
&lt;p&gt;Python classes can be defined as in the following:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb10&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb10-1&quot;&gt;&lt;a href=&quot;#cb10-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb10-2&quot;&gt;&lt;a href=&quot;#cb10-2&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Operation(&lt;span class=&quot;bu&quot;&gt;object&lt;/span&gt;):&lt;/span&gt;
&lt;span id=&quot;cb10-3&quot;&gt;&lt;a href=&quot;#cb10-3&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;co&quot;&gt;&amp;quot;&amp;quot;&amp;quot; Arithmetic Operations on two numbers&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb10-4&quot;&gt;&lt;a href=&quot;#cb10-4&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb10-5&quot;&gt;&lt;a href=&quot;#cb10-5&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb10-6&quot;&gt;&lt;a href=&quot;#cb10-6&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;, x, y):&lt;/span&gt;
&lt;span id=&quot;cb10-7&quot;&gt;&lt;a href=&quot;#cb10-7&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;co&quot;&gt;&amp;quot;&amp;quot;&amp;quot; Arguments:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb10-8&quot;&gt;&lt;a href=&quot;#cb10-8&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;                    x, y(number-like):&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb10-9&quot;&gt;&lt;a href=&quot;#cb10-9&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb10-10&quot;&gt;&lt;a href=&quot;#cb10-10&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;._x &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; x&lt;/span&gt;
&lt;span id=&quot;cb10-11&quot;&gt;&lt;a href=&quot;#cb10-11&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;._y &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; y&lt;/span&gt;
&lt;span id=&quot;cb10-12&quot;&gt;&lt;a href=&quot;#cb10-12&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb10-13&quot;&gt;&lt;a href=&quot;#cb10-13&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; add(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;):&lt;/span&gt;
&lt;span id=&quot;cb10-14&quot;&gt;&lt;a href=&quot;#cb10-14&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;co&quot;&gt;&amp;quot;&amp;quot;&amp;quot; Add two numbers&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb10-15&quot;&gt;&lt;a href=&quot;#cb10-15&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb10-16&quot;&gt;&lt;a href=&quot;#cb10-16&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;._x &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;._y&lt;/span&gt;
&lt;span id=&quot;cb10-17&quot;&gt;&lt;a href=&quot;#cb10-17&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb10-18&quot;&gt;&lt;a href=&quot;#cb10-18&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; sub(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;):&lt;/span&gt;
&lt;span id=&quot;cb10-19&quot;&gt;&lt;a href=&quot;#cb10-19&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;co&quot;&gt;&amp;quot;&amp;quot;&amp;quot; Subtract two numbers&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb10-20&quot;&gt;&lt;a href=&quot;#cb10-20&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb10-21&quot;&gt;&lt;a href=&quot;#cb10-21&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;._x &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;._y&lt;/span&gt;
&lt;span id=&quot;cb10-22&quot;&gt;&lt;a href=&quot;#cb10-22&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb10-23&quot;&gt;&lt;a href=&quot;#cb10-23&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; mul(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;):&lt;/span&gt;
&lt;span id=&quot;cb10-24&quot;&gt;&lt;a href=&quot;#cb10-24&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;co&quot;&gt;&amp;quot;&amp;quot;&amp;quot; Multiply two numbers&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb10-25&quot;&gt;&lt;a href=&quot;#cb10-25&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb10-26&quot;&gt;&lt;a href=&quot;#cb10-26&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;._x &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;._y&lt;/span&gt;
&lt;span id=&quot;cb10-27&quot;&gt;&lt;a href=&quot;#cb10-27&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb10-28&quot;&gt;&lt;a href=&quot;#cb10-28&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; div(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;):&lt;/span&gt;
&lt;span id=&quot;cb10-29&quot;&gt;&lt;a href=&quot;#cb10-29&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;co&quot;&gt;&amp;quot;&amp;quot;&amp;quot; Divide two numbers&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb10-30&quot;&gt;&lt;a href=&quot;#cb10-30&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb10-31&quot;&gt;&lt;a href=&quot;#cb10-31&quot;&gt;&lt;/a&gt;        result &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;None&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb10-32&quot;&gt;&lt;a href=&quot;#cb10-32&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;cf&quot;&gt;try&lt;/span&gt;:&lt;/span&gt;
&lt;span id=&quot;cb10-33&quot;&gt;&lt;a href=&quot;#cb10-33&quot;&gt;&lt;/a&gt;            result &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;._x &lt;span class=&quot;op&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;float&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;._y)&lt;/span&gt;
&lt;span id=&quot;cb10-34&quot;&gt;&lt;a href=&quot;#cb10-34&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;cf&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;pp&quot;&gt;ZeroDivisionError&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;as&lt;/span&gt; e:&lt;/span&gt;
&lt;span id=&quot;cb10-35&quot;&gt;&lt;a href=&quot;#cb10-35&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(e)&lt;/span&gt;
&lt;span id=&quot;cb10-36&quot;&gt;&lt;a href=&quot;#cb10-36&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; result&lt;/span&gt;
&lt;span id=&quot;cb10-37&quot;&gt;&lt;a href=&quot;#cb10-37&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb10-38&quot;&gt;&lt;a href=&quot;#cb10-38&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;at&quot;&gt;@property&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb10-39&quot;&gt;&lt;a href=&quot;#cb10-39&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; x(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;):&lt;/span&gt;
&lt;span id=&quot;cb10-40&quot;&gt;&lt;a href=&quot;#cb10-40&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;._x&lt;/span&gt;
&lt;span id=&quot;cb10-41&quot;&gt;&lt;a href=&quot;#cb10-41&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb10-42&quot;&gt;&lt;a href=&quot;#cb10-42&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;at&quot;&gt;@x.setter&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb10-43&quot;&gt;&lt;a href=&quot;#cb10-43&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; x(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;, value):&lt;/span&gt;
&lt;span id=&quot;cb10-44&quot;&gt;&lt;a href=&quot;#cb10-44&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;._x &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; value&lt;/span&gt;
&lt;span id=&quot;cb10-45&quot;&gt;&lt;a href=&quot;#cb10-45&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb10-46&quot;&gt;&lt;a href=&quot;#cb10-46&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;at&quot;&gt;@x.deleter&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb10-47&quot;&gt;&lt;a href=&quot;#cb10-47&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; x(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;):&lt;/span&gt;
&lt;span id=&quot;cb10-48&quot;&gt;&lt;a href=&quot;#cb10-48&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;del&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;._x&lt;/span&gt;
&lt;span id=&quot;cb10-49&quot;&gt;&lt;a href=&quot;#cb10-49&quot;&gt;&lt;/a&gt;    &lt;/span&gt;
&lt;span id=&quot;cb10-50&quot;&gt;&lt;a href=&quot;#cb10-50&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;at&quot;&gt;@property&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb10-51&quot;&gt;&lt;a href=&quot;#cb10-51&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; y(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;):&lt;/span&gt;
&lt;span id=&quot;cb10-52&quot;&gt;&lt;a href=&quot;#cb10-52&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;._y&lt;/span&gt;
&lt;span id=&quot;cb10-53&quot;&gt;&lt;a href=&quot;#cb10-53&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb10-54&quot;&gt;&lt;a href=&quot;#cb10-54&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;at&quot;&gt;@y.setter&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb10-55&quot;&gt;&lt;a href=&quot;#cb10-55&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; y(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;, value):&lt;/span&gt;
&lt;span id=&quot;cb10-56&quot;&gt;&lt;a href=&quot;#cb10-56&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;._y &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; value&lt;/span&gt;
&lt;span id=&quot;cb10-57&quot;&gt;&lt;a href=&quot;#cb10-57&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb10-58&quot;&gt;&lt;a href=&quot;#cb10-58&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;at&quot;&gt;@y.deleter&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb10-59&quot;&gt;&lt;a href=&quot;#cb10-59&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; y(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;):&lt;/span&gt;
&lt;span id=&quot;cb10-60&quot;&gt;&lt;a href=&quot;#cb10-60&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;del&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;._y&lt;/span&gt;
&lt;span id=&quot;cb10-61&quot;&gt;&lt;a href=&quot;#cb10-61&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb10-62&quot;&gt;&lt;a href=&quot;#cb10-62&quot;&gt;&lt;/a&gt;operation &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; Operation(&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb10-63&quot;&gt;&lt;a href=&quot;#cb10-63&quot;&gt;&lt;/a&gt;operation.add() &lt;span class=&quot;co&quot;&gt;# 7&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb10-64&quot;&gt;&lt;a href=&quot;#cb10-64&quot;&gt;&lt;/a&gt;operation.sub() &lt;span class=&quot;co&quot;&gt;# -1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb10-65&quot;&gt;&lt;a href=&quot;#cb10-65&quot;&gt;&lt;/a&gt;operation.mul() &lt;span class=&quot;co&quot;&gt;# 12&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb10-66&quot;&gt;&lt;a href=&quot;#cb10-66&quot;&gt;&lt;/a&gt;operation.div() &lt;span class=&quot;co&quot;&gt;# 0.75&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb10-67&quot;&gt;&lt;a href=&quot;#cb10-67&quot;&gt;&lt;/a&gt;operation.x &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb10-68&quot;&gt;&lt;a href=&quot;#cb10-68&quot;&gt;&lt;/a&gt;operation.y &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb10-69&quot;&gt;&lt;a href=&quot;#cb10-69&quot;&gt;&lt;/a&gt;operation.add() &lt;span class=&quot;co&quot;&gt;# 15&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In Scala, we could make a shortcut of the properties as in the following:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb11&quot;&gt;&lt;pre class=&quot;sourceCode scala&quot;&gt;&lt;code class=&quot;sourceCode scala&quot;&gt;&lt;span id=&quot;cb11-1&quot;&gt;&lt;a href=&quot;#cb11-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;// Mutable, we want to change the values as in the following&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb11-2&quot;&gt;&lt;a href=&quot;#cb11-2&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;// val operation = new Operation(3, 4)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb11-3&quot;&gt;&lt;a href=&quot;#cb11-3&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;// operation.x = 5 &lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb11-4&quot;&gt;&lt;a href=&quot;#cb11-4&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Operation(&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; x: Int, &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; y: Int) {&lt;/span&gt;
&lt;span id=&quot;cb11-5&quot;&gt;&lt;a href=&quot;#cb11-5&quot;&gt;&lt;/a&gt;        &lt;/span&gt;
&lt;span id=&quot;cb11-6&quot;&gt;&lt;a href=&quot;#cb11-6&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;() : Int = {&lt;/span&gt;
&lt;span id=&quot;cb11-7&quot;&gt;&lt;a href=&quot;#cb11-7&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;x&lt;/span&gt; + &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;y&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb11-8&quot;&gt;&lt;a href=&quot;#cb11-8&quot;&gt;&lt;/a&gt;        }&lt;/span&gt;
&lt;span id=&quot;cb11-9&quot;&gt;&lt;a href=&quot;#cb11-9&quot;&gt;&lt;/a&gt;        &lt;/span&gt;
&lt;span id=&quot;cb11-10&quot;&gt;&lt;a href=&quot;#cb11-10&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;sub&lt;/span&gt;() : Int = {&lt;/span&gt;
&lt;span id=&quot;cb11-11&quot;&gt;&lt;a href=&quot;#cb11-11&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;x&lt;/span&gt; - &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;y&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb11-12&quot;&gt;&lt;a href=&quot;#cb11-12&quot;&gt;&lt;/a&gt;        }&lt;/span&gt;
&lt;span id=&quot;cb11-13&quot;&gt;&lt;a href=&quot;#cb11-13&quot;&gt;&lt;/a&gt;        &lt;/span&gt;
&lt;span id=&quot;cb11-14&quot;&gt;&lt;a href=&quot;#cb11-14&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;mul&lt;/span&gt;() : Int = {&lt;/span&gt;
&lt;span id=&quot;cb11-15&quot;&gt;&lt;a href=&quot;#cb11-15&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;x&lt;/span&gt; * &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;y&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb11-16&quot;&gt;&lt;a href=&quot;#cb11-16&quot;&gt;&lt;/a&gt;        }&lt;/span&gt;
&lt;span id=&quot;cb11-17&quot;&gt;&lt;a href=&quot;#cb11-17&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb11-18&quot;&gt;&lt;a href=&quot;#cb11-18&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;div&lt;/span&gt;() : Double = {&lt;/span&gt;
&lt;span id=&quot;cb11-19&quot;&gt;&lt;a href=&quot;#cb11-19&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;kw&quot;&gt;val&lt;/span&gt; doubleX = &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;x&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;toDouble&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb11-20&quot;&gt;&lt;a href=&quot;#cb11-20&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;kw&quot;&gt;val&lt;/span&gt; doubleY = &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;y&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;toDouble&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb11-21&quot;&gt;&lt;a href=&quot;#cb11-21&quot;&gt;&lt;/a&gt;            doubleX / doubleY&lt;/span&gt;
&lt;span id=&quot;cb11-22&quot;&gt;&lt;a href=&quot;#cb11-22&quot;&gt;&lt;/a&gt;        }&lt;/span&gt;
&lt;span id=&quot;cb11-23&quot;&gt;&lt;a href=&quot;#cb11-23&quot;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&quot;cb11-24&quot;&gt;&lt;a href=&quot;#cb11-24&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb11-25&quot;&gt;&lt;a href=&quot;#cb11-25&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;// object definition is very similar to Java&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb11-26&quot;&gt;&lt;a href=&quot;#cb11-26&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;// comparing to Python, there is an extra &amp;quot;new&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb11-27&quot;&gt;&lt;a href=&quot;#cb11-27&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;val&lt;/span&gt; operation = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Operation(&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb11-28&quot;&gt;&lt;a href=&quot;#cb11-28&quot;&gt;&lt;/a&gt;operation.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 7&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb11-29&quot;&gt;&lt;a href=&quot;#cb11-29&quot;&gt;&lt;/a&gt;operation.&lt;span class=&quot;fu&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// -1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb11-30&quot;&gt;&lt;a href=&quot;#cb11-30&quot;&gt;&lt;/a&gt;operation.&lt;span class=&quot;fu&quot;&gt;mul&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 12&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb11-31&quot;&gt;&lt;a href=&quot;#cb11-31&quot;&gt;&lt;/a&gt;operation.&lt;span class=&quot;fu&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 0.75&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb11-32&quot;&gt;&lt;a href=&quot;#cb11-32&quot;&gt;&lt;/a&gt;operation.&lt;span class=&quot;fu&quot;&gt;x&lt;/span&gt; = &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb11-33&quot;&gt;&lt;a href=&quot;#cb11-33&quot;&gt;&lt;/a&gt;operation.&lt;span class=&quot;fu&quot;&gt;y&lt;/span&gt; = &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb11-34&quot;&gt;&lt;a href=&quot;#cb11-34&quot;&gt;&lt;/a&gt;operation.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 15&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</content>
  </entry>
  <entry xml:base="https://bugra.github.io/">
    <title type="text">On Machine Learning</title>
    <id>https://bugra.github.io/posts/2014/8/23/on-machine-learning</id>
    <updated>2014-08-23T00:00:00Z</updated>
    <published>2014-08-23T00:00:00Z</published>
    <link href="https://bugra.github.io/posts/2014/8/23/on-machine-learning" />
    <author>
      <name>Bugra Akyildiz</name>
    </author>
    <content type="html">&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;
  &lt;title&gt;-&lt;/title&gt;
  &lt;style&gt;
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
    pre &gt; code.sourceCode { white-space: pre; position: relative; }
    pre &gt; code.sourceCode &gt; span { display: inline-block; line-height: 1.25; }
    pre &gt; code.sourceCode &gt; span:empty { height: 1.2em; }
    code.sourceCode &gt; span { color: inherit; text-decoration: inherit; }
    div.sourceCode { margin: 1em 0; }
    pre.sourceCode { margin: 0; }
    @media screen {
    div.sourceCode { overflow: auto; }
    }
    @media print {
    pre &gt; code.sourceCode { white-space: pre-wrap; }
    pre &gt; code.sourceCode &gt; span { text-indent: -5em; padding-left: 5em; }
    }
    pre.numberSource code
      { counter-reset: source-line 0; }
    pre.numberSource code &gt; span
      { position: relative; left: -4em; counter-increment: source-line; }
    pre.numberSource code &gt; span &gt; a:first-child::before
      { content: counter(source-line);
        position: relative; left: -1em; text-align: right; vertical-align: baseline;
        border: none; display: inline-block;
        -webkit-touch-callout: none; -webkit-user-select: none;
        -khtml-user-select: none; -moz-user-select: none;
        -ms-user-select: none; user-select: none;
        padding: 0 4px; width: 4em;
        color: #aaaaaa;
      }
    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
    div.sourceCode
      {   }
    @media screen {
    pre &gt; code.sourceCode &gt; span &gt; a:first-child::before { text-decoration: underline; }
    }
    code span.al { color: #ff0000; font-weight: bold; } /* Alert */
    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
    code span.at { color: #7d9029; } /* Attribute */
    code span.bn { color: #40a070; } /* BaseN */
    code span.bu { } /* BuiltIn */
    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
    code span.ch { color: #4070a0; } /* Char */
    code span.cn { color: #880000; } /* Constant */
    code span.co { color: #60a0b0; font-style: italic; } /* Comment */
    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
    code span.do { color: #ba2121; font-style: italic; } /* Documentation */
    code span.dt { color: #902000; } /* DataType */
    code span.dv { color: #40a070; } /* DecVal */
    code span.er { color: #ff0000; font-weight: bold; } /* Error */
    code span.ex { } /* Extension */
    code span.fl { color: #40a070; } /* Float */
    code span.fu { color: #06287e; } /* Function */
    code span.im { } /* Import */
    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
    code span.kw { color: #007020; font-weight: bold; } /* Keyword */
    code span.op { color: #666666; } /* Operator */
    code span.ot { color: #007020; } /* Other */
    code span.pp { color: #bc7a00; } /* Preprocessor */
    code span.sc { color: #4070a0; } /* SpecialChar */
    code span.ss { color: #bb6688; } /* SpecialString */
    code span.st { color: #4070a0; } /* String */
    code span.va { color: #19177c; } /* Variable */
    code span.vs { color: #4070a0; } /* VerbatimString */
    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
  &lt;/style&gt;
  &lt;!--[if lt IE 9]&gt;
    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;
  &lt;![endif]--&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;figure&gt;
&lt;img src=&quot;http://i.imgur.com/xmkGeNc.png&quot; title=&quot;Colorful Sparse Filters&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Sparse Colorful Filters&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Recently, I wrote &lt;a href=&quot;https://www.cbinsights.com/blog/human-resources-news-classification-machine-learning&quot;&gt;how we do classification at CB Insights&lt;/a&gt;. The post outlines some of the things that I have been thinking about how to apply machine learning for a given problem along with the process that we adopted for the classification problem at CB Insights, but also gave me a good opportunity to reflect even further about the machine learning process; shortcomings of papers, books and even traditional education system when it comes to teach the machine learning.&lt;/p&gt;
&lt;p&gt;My aim is not to focus on the algorithms, methods or classifiers but rather to offer a broader picture on how to approach a machine learning problem, and in the meantime give couple of bad advices. I will offer my bad advice for a classification problem(algorithm=classifier) and be warned that they may generalize better than your favorite classifier.(I will try not to overfit, but let me know if I do so in the comments.)&lt;/p&gt;
&lt;h3 id=&quot;machine-learning-algorithms&quot;&gt;Machine Learning Algorithms&lt;/h3&gt;
&lt;p&gt;Most of the machine learning book chapters and articles focus on algorithms/classifiers and sometimes optimization methods.&lt;/p&gt;
&lt;p&gt;From a theoretical perspective, they analyze the algorithms’ theoretical bounds and sometimes the learning function itself along with different types of optimization. The representation of the algorithm/classifier and what it really learns in the observation space and how does the learning function behaves under different constraints and conditions. This is very useful as you could understand what it learns, advantages and disadvantages over other classifiers. You could also reason about the shortcomings, whether it has a tendency to overfit or not; to make a sound decision and selection from a number of classifiers; this is quite important.&lt;/p&gt;
&lt;p&gt;From a practical perspective(mostly research papers), they offer different benchmarks for different algorithms in same dataset. This is useful for at least two different reasons. First one is that you could see the algorithm’s advantage; it could be faster than other algorithms, it may generalize better or it could simply may perform better than other classifiers. Second, if you have a similar problem at your hand, these benchmarks could become a baseline that you could experiment. The datasets in papers sometimes happen to be trivial and not necessarily reflect the real-world or in the wild dataset characteristics, though.&lt;/p&gt;
&lt;p&gt;These two different approaches are not themselves very bad to explain separate sections but not necessarily tell the whole story of what goes into a machine learning problem at hand. There is a significant amount of knowledge and experience one has to gain (sometimes just by experimentation) to cover the gap these two separate(yet not independent) two sections to build a pipeline.&lt;/p&gt;
&lt;h4 id=&quot;you-say-machine-learning-i-understand-data&quot;&gt;You say Machine Learning, I understand Data&lt;/h4&gt;
&lt;p&gt;If you take a step back and think about what machine learning is, it is at its core is &lt;strong&gt;data&lt;/strong&gt;. We want to leverage the data to do hard work for us; which is learning what data is (unsupervised learning) or why it is learning the things they learn(feature selection) or how it is learning the things they learn(optimization).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In God we trust, all others must bring data.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If I make an analogy with software programming, we put algorithms and data from input, output would become the program that we intended to write yet without explicitly writing it.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Machine learning is to be able to write programs with data and algorithms without explicitly writing it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is quite strong statement, let’s make it a little concrete.&lt;/p&gt;
&lt;h5 id=&quot;machine-learning-vs-control-structures&quot;&gt;Machine Learning vs Control Structures&lt;/h5&gt;
&lt;p&gt;If we have domain expertise about a classification problem, we could hard-code this knowledge in control structures to tackle the problem. Consider a classification problem in text domain where we want to do classify human resources news than other news. The words that are interest of us could be action verbs that are “hiring”, “laying off”, “resignation”, “joining” and so on.&lt;/p&gt;
&lt;h6 id=&quot;control-structures&quot;&gt;Control Structures&lt;/h6&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;#cb1-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;# we could get the lemmas in order to remove the variation of the words hire, hired, hiring, hires&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-2&quot;&gt;&lt;a href=&quot;#cb1-2&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;# A better approach to use regular expressions after deciding on the lemmas&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-3&quot;&gt;&lt;a href=&quot;#cb1-3&quot;&gt;&lt;/a&gt;&lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;#39;hire&amp;#39;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; text &lt;span class=&quot;kw&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;#39;hiring&amp;#39;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; text &lt;span class=&quot;kw&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;#39;join&amp;#39;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;#39;joining&amp;#39;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; text &lt;span class=&quot;kw&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;#39;laying off&amp;#39;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; text &lt;span class=&quot;kw&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;#39;resign&amp;#39;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; text:   &lt;/span&gt;
&lt;span id=&quot;cb1-4&quot;&gt;&lt;a href=&quot;#cb1-4&quot;&gt;&lt;/a&gt;    confidence &lt;span class=&quot;op&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-5&quot;&gt;&lt;a href=&quot;#cb1-5&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-6&quot;&gt;&lt;a href=&quot;#cb1-6&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;# Job titles are definitely good again, HR articles generally say the position of the new hire&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-7&quot;&gt;&lt;a href=&quot;#cb1-7&quot;&gt;&lt;/a&gt;&lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; job_title &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; job_titles:&lt;/span&gt;
&lt;span id=&quot;cb1-8&quot;&gt;&lt;a href=&quot;#cb1-8&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; job_title &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; text:&lt;/span&gt;
&lt;span id=&quot;cb1-9&quot;&gt;&lt;a href=&quot;#cb1-9&quot;&gt;&lt;/a&gt;    confidence &lt;span class=&quot;op&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-10&quot;&gt;&lt;a href=&quot;#cb1-10&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-11&quot;&gt;&lt;a href=&quot;#cb1-11&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;# If we have company name, that is a good sign as article could be in business domain&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-12&quot;&gt;&lt;a href=&quot;#cb1-12&quot;&gt;&lt;/a&gt;&lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; company_name &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; company_names:&lt;/span&gt;
&lt;span id=&quot;cb1-13&quot;&gt;&lt;a href=&quot;#cb1-13&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; company_name &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; text:&lt;/span&gt;
&lt;span id=&quot;cb1-14&quot;&gt;&lt;a href=&quot;#cb1-14&quot;&gt;&lt;/a&gt;        confidence &lt;span class=&quot;op&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h6 id=&quot;machine-learning-approach&quot;&gt;Machine Learning Approach&lt;/h6&gt;
&lt;p&gt;If we have data and labels for that class, we could train a classifier based on that data along with features, feature selection, and then classify the sample based on that classifier.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;#cb2-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;# Given trained classifier, vectorizer and feature selection method&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-2&quot;&gt;&lt;a href=&quot;#cb2-2&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;# This is how one may classify an article in Scikit-learn&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-3&quot;&gt;&lt;a href=&quot;#cb2-3&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;## Convert into a vector&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-4&quot;&gt;&lt;a href=&quot;#cb2-4&quot;&gt;&lt;/a&gt;count &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; vectorizer.transform(np.asarray(text).toarray())&lt;/span&gt;
&lt;span id=&quot;cb2-5&quot;&gt;&lt;a href=&quot;#cb2-5&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;## Do feature selection&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-6&quot;&gt;&lt;a href=&quot;#cb2-6&quot;&gt;&lt;/a&gt;selected_feats &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; feat_selector.transform(count)&lt;/span&gt;
&lt;span id=&quot;cb2-7&quot;&gt;&lt;a href=&quot;#cb2-7&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;## Classify&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-8&quot;&gt;&lt;a href=&quot;#cb2-8&quot;&gt;&lt;/a&gt;pred_class &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; clf.predict(selected_feats)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Machine learning actually refers to learning programs if you think about two pieces of code as a black box.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The above examples are just to make some of the ideas a little bit concrete otherwise both codes are not the code that you really put into production.&lt;/p&gt;
&lt;p&gt;You may see the manual programming problems, rules are never enough. There would be always cases you miss couple of rules or some structures in text are hard to express in hard-coded rules (if one company joins another company, that article is most probably partnership rather than HR), and it requires quite amount of effort both in development and also requires large domain expertise.&lt;/p&gt;
&lt;p&gt;The machine learning based solution is simply better most of the time. It could incorporate more data and use that data without putting more effort where you want to introduce new rules, you basically grow and grow your code base. This not only makes the code hard to maintain but also makes it unreadable. Also, in machine learning we may need domain expertise in order to build a good feature set. However, in manual programming, we solely depend on developer expertise in the domain as she expresses that knowledge purely in code.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Data does replace heuristics, hard-coded rules, assumptions and beliefs. Machine learning only enables data to do that.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure&gt;
&lt;img src=&quot;http://i.imgur.com/7hoflR2.gif&quot; title=&quot;Sparse Filters&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Sparse Grayscale Filters&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id=&quot;learning-is-not-only-learning&quot;&gt;Learning is not &lt;strong&gt;only&lt;/strong&gt; learning&lt;/h4&gt;
&lt;p&gt;Learning has three important components. First one is representation of input, second one is representation of the classifier and third one is evaluation. Although first one and second are closely related, I will separate them into different sections.&lt;/p&gt;
&lt;p&gt;Representation of input is to transform the input into a vector or some amenable form to be useful for learning. Bag of Words(BoW) or Term Frequency Inverse Document Frequency(TF-IDF) for text, pixel values or engineered features(SIFT, SURF) for images to give couple of examples. As most of the raw data found in the wild is not amenable learning, this step is crucial. In computer vision domain, even the pixel values are found to be not very good or discriminative, so computer vision researchers come up with higher level representations for the images.&lt;/p&gt;
&lt;p&gt;Representation of classifier is to choose the best learning function for the classifiers. There are hundreds of different classifiers available for different type of problems. The learning function space is also quite crowded. The classifiers could be classified into different categories based on their learning function. Neural networks, convolutional neural networks, Restricted Boltzmann Machines could be put into deep learning where the architecture of the net is quite important; decision trees, random forests could be put into an ensemble learning; probabilistic graphical models and conditional graphical models into graphical models; bayesian network, Monte Carlo Markov Chain based methods could be put into Bayesian methods and so on. Rather than knowing particular classifier strengths and weaknesses, even knowing categories of classifiers would be useful to make a good decision around which classifier to choose.&lt;/p&gt;
&lt;p&gt;Evaluation has two components; first one is to be able to choose a metric to optimize the classifications. This is highly related to the problem and product. For example, a search engine needs to take both precision and recall to evaluate the ranking where a classifier on medical domain may put more emphasis on Type-I error than Type-II error or vice versa. If you want to approximate a distribution, rather than single individual examples, you may want to look at K-L divergence of total distribution.&lt;/p&gt;
&lt;p&gt;Second, to choose a method to evaluate the classifier for that metric. This is generally done through cross-validation. You need to set some data aside for test set in order to evaluate the classifier that you trained on the data that classifier did not see. Looking at the score of this method for the metric that you choose earlier, you could determine the best classifier. (I will mention different cross-validation methods in the generalized section in a bit)&lt;/p&gt;
&lt;h4 id=&quot;input-representation&quot;&gt;Input Representation&lt;/h4&gt;
&lt;p&gt;When we have some input(text, image, video, discrete, continuous or categorical variables), which we want to learn some structure or train a classifier, the first thing that needs to be done is to represent the input in a way that the classifier or the algorithm could use. There are common methods to transform the input into vectors that could be used to applications. If there are several ways to represent an input, you may want to try different methods to see which would produce better and more efficient transformations for the problem at hand. Especially considering most of the raw inputs are not very suitable(e.g. individual pixel values for images, words in text), you may want to also build your &lt;em&gt;features&lt;/em&gt; which could be more higher level or in the same level but useful for learning. Representation is itself is not a solved problem across many domains and there are researchers that focus on how to represent better the inputs that we have. Papers published in &lt;a href=&quot;https://sites.google.com/site/representationlearning2014/&quot;&gt;International Conference on Learning Representations&lt;/a&gt; mainly tackle representation problems. Recently, most of the deep learning methods(Restricted Boltzmann Machines, Neural Networks) are found to be very good at learning representation both in computer vision as well as natural language processing.&lt;/p&gt;
&lt;p&gt;Representation is very important as how good your representation has a direct effect on how successful your classifier is. Not only that, but when you evaluate your classifiers, the ones that are generalizing well(performing good on the test dataset), turn out to be the ones that use better document representation rather than the differences of the methods.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The things that you induce has more to do with the data then the classifier itself.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you have a better representation for your input, your induction would be better, so the generalization. This is also the reason why more data always triumphs complex and arguably better classifiers(high accuracy in unseen data).&lt;/p&gt;
&lt;h5 id=&quot;engineering-the-feature&quot;&gt;Engineering the Feature&lt;/h5&gt;
&lt;p&gt;You tried a bunch of great classifiers into your training dataset but the results are far from satisfying and in different measures for performance, they may be even dismal. Since we tried a lot of classifiers, most probably the reason should not lie in the classifier but rather in the input representation. This part is the most time consuming part and if you do not have the domain knowledge, only thing that you need to do trial and error. If you have domain knowledge, then you are in a better shape as you could reason about what type of features would be more important and what needs to be done in order to improve the classification accuracies. If you do not know much about the domain, then you should probably be spending some time on the misclassifications and try to figure out why do these classifiers perform very poorly and what needs to be corrected in the representation. Hopefully, there is some pattern at the misclassified ones and then you should be able to see it and correct the representation to reach a higher classification accuracy.&lt;/p&gt;
&lt;p&gt;Feature generation will be different for different problems and somehow dependent on the problem/misclassified observations whereas classifiers are more independent from your input representations. For the most part you will be spending more time in this step than any other step for a given problem. However, at the same time this step is not mentioned most of the books and papers. The insights one gains in this step is also quite valuable for similar problems in the future.&lt;/p&gt;
&lt;p&gt;If you do not have a lot of domain expertise and have a lot of computation power and time in your hand, you may want to generate a lot of features, and then do feature selection on top of those features. This prevents further assumptions and biases that you may have for your own dataset. Further, you could actually see what type of features that are more relevant/important for the problem that you are trying to tackle based on the feature selection method.&lt;/p&gt;
&lt;p&gt;This approach may not be always applicable, though. For an image recognition problem, if you generate all of the possible combinations of raw pixels, you may still not learn a lot of from your inputs. For some of the problems and domains, the expertise and knowledge in domain is crucial to be able to get a reasonable classification accuracy.&lt;/p&gt;
&lt;h4 id=&quot;generalization&quot;&gt;Generalization&lt;/h4&gt;
&lt;p&gt;If machine learning offers one thing very powerful that is to be able to use &lt;strong&gt;data&lt;/strong&gt; to come up with a solution for a given problem rather than programming as mentioned earlier. But this is only possible if our machine learning algorithm could go beyond the dataset that we used. Ergo, the generalization becomes the ultimate goal of the machine learning; generalization beyond training data is what is important and what will determine the success of the algorithm.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Generalization is the &lt;strong&gt;sole&lt;/strong&gt; product of a machine learning system.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;User does not know what goes into the system, how you train the classifier, how you make the cross-validation but &lt;em&gt;only and only &lt;/em&gt; the generalization. If generalization is good, then product is good, if not product is not either. Generalization cannot be overemphasized when you are building and machine learning system.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You sell generalization at the end of the day.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;how-do-i-generalize-then&quot;&gt;How do I generalize then?&lt;/h5&gt;
&lt;p&gt;I will deal with generalization in the evaluation by using cross-validation and make sure that we have a separate test set rather than the dataset that we optimize the parameters for. If you have limited amount of data and setting aside some data may not me feasible, then you could do K-Fold cross validation. If your labels are not uniformly distributed among classes, you could do Stratified K-Fold cross validation. You could use &lt;strong&gt;bagging&lt;/strong&gt; to generate more similar data that you have in the dataset as well.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We need to learn small amount of data and induce from it; generalize over much larger datasets by using that knowledge.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Like inductive reasoning, the evidence(training set) needs to be strong(noise free or should have very minimal noise ideally) and also needs to have good enough sample observations.&lt;/p&gt;
&lt;p&gt;The problem with machine learning problem is that the thing that we are optimizing(cross-validation score) is not the score that we necessarily want to optimize. We want to optimize the classifier for the dataset that classifier did not see. Since we cannot observe the data at the time we train the classifier, this problem is quite ill-defined. Cross-validation and other evaluation methods do not solve this problem for us but only provides a better estimates for the data that classifier did not see.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I said noise-free training samples in the beginning of this section, but for some of algorithms(especially the ones that tend to overfit, some amount of noise may actually improve the classification accuracy due to the reasons that I explained above).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;what-is-next&quot;&gt;What is next?&lt;/h5&gt;
&lt;p&gt;Classifiers.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</content>
  </entry>
  <entry xml:base="https://bugra.github.io/">
    <title type="text">Workflow Engine Comparison(First Impressions)</title>
    <id>https://bugra.github.io/posts/2014/4/13/workflow-engine-comparison</id>
    <updated>2014-04-13T00:00:00Z</updated>
    <published>2014-04-13T00:00:00Z</published>
    <link href="https://bugra.github.io/posts/2014/4/13/workflow-engine-comparison" />
    <author>
      <name>Bugra Akyildiz</name>
    </author>
    <content type="html">&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;
  &lt;title&gt;-&lt;/title&gt;
  &lt;style&gt;
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
  &lt;/style&gt;
  &lt;!--[if lt IE 9]&gt;
    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;
  &lt;![endif]--&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;I was looking at different options for workflow engines. I have some experience in Oozie, little experience in Luigi and no experience in Azkaban. In this post, I will try to give an overview of these engines in terms of their advantages and disadvantages. Take my word with a grain of salt(based on the experience I have with these tools), though.&lt;/p&gt;
&lt;h3 id=&quot;crons-do-not-scalesurprise&quot;&gt;Crons do not scale(Surprise!)&lt;/h3&gt;
&lt;p&gt;If you have a lot of processes which manipulate, transform and write data to database, you will sooner or later will face the limitations of the cron jobs. You want to be able to handle failures, debug processes and rerun the failed jobs. You want to have multiple scripts to run based on data availability, data dependency and time-based scheduling. You may want to also share the data workflow with many people where you cannot do any of the items with cron jobs.&lt;/p&gt;
&lt;h3 id=&quot;what-is-sufficient&quot;&gt;What is sufficient?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Regular scheduling (depending on data availability and time-based)&lt;/li&gt;
&lt;li&gt;Workflow of multiple jobs&lt;/li&gt;
&lt;li&gt;You should be able to write workflows in the same way that you are writing programs&lt;/li&gt;
&lt;li&gt;You should handle the errors and failures gracefully&lt;/li&gt;
&lt;li&gt;Communication between cluster and client should be secure&lt;/li&gt;
&lt;li&gt;Community support should be very good&lt;/li&gt;
&lt;li&gt;Continuous integration(whenever you push to the master, it should adapt the changes(woohoo!))&lt;/li&gt;
&lt;li&gt;Testing should be supported out of the box&lt;/li&gt;
&lt;li&gt;Let’s cut to the chase; pretty much anything that you want to expect from a decent library or framework in terms of software quality and practices&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;lets-write-our-own-workflow-engine&quot;&gt;Let’s write our own workflow engine&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Resources are limited(time, effort, human resources)&lt;/li&gt;
&lt;li&gt;Is your usage is too specific or could you make it work in one of the available tools?&lt;/li&gt;
&lt;li&gt;No need to reinvent the wheel&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;what-do-we-want-from-the-workflow-engines&quot;&gt;What do we want from the workflow engines?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;First and foremost: resilient to failures&lt;/li&gt;
&lt;li&gt;Debugging is necessary and important advantage over cron jobs&lt;/li&gt;
&lt;li&gt;If we have similar workflows, we should not write too much boilerplate code to make it all work&lt;/li&gt;
&lt;li&gt;Support for databases, HDFS and common file formats&lt;/li&gt;
&lt;li&gt;You should be able to write workflows in the same way that you are writing programs&lt;/li&gt;
&lt;li&gt;You should handle the errors and failures gracefully&lt;/li&gt;
&lt;li&gt;Communication between cluster and client should be secure&lt;/li&gt;
&lt;li&gt;Community support should be very good&lt;/li&gt;
&lt;li&gt;Continuous integration(whenever you push to the master, it should adapt the changes(woohoo!))&lt;/li&gt;
&lt;li&gt;Testing should be supported out of the box&lt;/li&gt;
&lt;li&gt;Default logging would be icing on the cake&lt;/li&gt;
&lt;li&gt;Let’s cut to the chase; pretty much anything that you want to expect from a decent library or framework in terms of software quality and practices&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;oozie&quot;&gt;Oozie&lt;/h3&gt;
&lt;h4 id=&quot;advantages&quot;&gt;Advantages&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Mature&lt;/li&gt;
&lt;li&gt;Support from Hadoop community is strong&lt;/li&gt;
&lt;li&gt;Documentation&lt;/li&gt;
&lt;li&gt;Default support for Pig, ssh, java, filesystem&lt;/li&gt;
&lt;li&gt;Coordinators: when data is available, do the computation. For recurring jobs, you do not need to explicitly configure the job flow.&lt;/li&gt;
&lt;li&gt;Security&lt;/li&gt;
&lt;li&gt;Built in authentication&lt;/li&gt;
&lt;li&gt;It has own testing suite(Mini Oozie)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;disadvantages&quot;&gt;Disadvantages&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;XML(Verbose)&lt;/li&gt;
&lt;li&gt;Control flow is somehow restrictive&lt;/li&gt;
&lt;li&gt;Directed Acyclic Graph(Hard to rerun only a component after failure, perfectly goes along with Pig, though; Pig scripts also define DAG)&lt;/li&gt;
&lt;li&gt;User Interface&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;luigi&quot;&gt;Luigi&lt;/h3&gt;
&lt;h4 id=&quot;advantages-1&quot;&gt;Advantages&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Python!&lt;/li&gt;
&lt;li&gt;Control flow is advanced as tasks are code&lt;/li&gt;
&lt;li&gt;Dependencies between flows&lt;/li&gt;
&lt;li&gt;Customization and code reuse through object-oriented programming&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;disadvantages-1&quot;&gt;Disadvantages&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Visualizer is not as good as Azkaban&lt;/li&gt;
&lt;li&gt;No default support for Pig, Hive&lt;/li&gt;
&lt;li&gt;No storage of history and generally persistent storage is lacking&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;azkaban&quot;&gt;Azkaban&lt;/h3&gt;
&lt;h4 id=&quot;advantages-2&quot;&gt;Advantages&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;If you are using Voldemort, it supports out of the box&lt;/li&gt;
&lt;li&gt;Visualizations for tasks (svg, interactive) is advanced&lt;/li&gt;
&lt;li&gt;Authentication and Authorization&lt;/li&gt;
&lt;li&gt;History of tasks(which are completed and which are not)&lt;/li&gt;
&lt;li&gt;Plugins for Pig, Hive and many more&lt;/li&gt;
&lt;li&gt;Web deployment&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;disadvantages-2&quot;&gt;Disadvantages&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Support is not as good as Oozie.&lt;/li&gt;
&lt;li&gt;Scheduling is only time based. AFAIK, no data availability scheduling&lt;/li&gt;
&lt;li&gt;Workflow is somehow limited and restrictive comparing to Luigi and even Oozie.&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;
</content>
  </entry>
  <entry xml:base="https://bugra.github.io/">
    <title type="text">Short Notes on Thinking with Data</title>
    <id>https://bugra.github.io/posts/2014/3/18/thinking-with-data-short-notes</id>
    <updated>2014-03-18T00:00:00Z</updated>
    <published>2014-03-18T00:00:00Z</published>
    <link href="https://bugra.github.io/posts/2014/3/18/thinking-with-data-short-notes" />
    <author>
      <name>Bugra Akyildiz</name>
    </author>
    <content type="html">&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;
  &lt;title&gt;-&lt;/title&gt;
  &lt;style&gt;
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
  &lt;/style&gt;
  &lt;!--[if lt IE 9]&gt;
    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;
  &lt;![endif]--&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Arguments are how we convince ourselves that something is true.&lt;/li&gt;
&lt;li&gt;Argument theory provides a useful set of mental models for understanding arguments.&lt;/li&gt;
&lt;li&gt;Data work is held together by arguments.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;data&quot;&gt;Data&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Data are just (sadly) observations.&lt;/li&gt;
&lt;li&gt;What we want is knowledge and representation, maybe even understanding and insight.&lt;/li&gt;
&lt;li&gt;By doing so, arguments move from what is unknown/not agreed upon yet.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Arguments are how we turn observations into knowledge.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;arguments&quot;&gt;Arguments&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Claim&lt;/strong&gt; =&amp;gt; Audience does not believe it(yet).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Prior Knowledge&lt;/strong&gt; =&amp;gt; Things you/your audience believes already before the case is made.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Evidence&lt;/strong&gt; =&amp;gt; Where data enters into an argument. It becomes part of the argument, not just “data” anymore. It gains context in that sense.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Justification&lt;/strong&gt; =&amp;gt; Reasoning why evidence should cause vs to believe the claim.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Rebuttal&lt;/strong&gt; =&amp;gt; Any of the reasons why the justification might not hold in this particular case.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;patterns-of-arguments&quot;&gt;Patterns of Arguments&lt;/h3&gt;
&lt;h3 id=&quot;template-for-claims&quot;&gt;Template for Claims&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Categories of Dispute&lt;/li&gt;
&lt;li&gt;Causal Analysis&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;causal-analysis&quot;&gt;Causal Analysis&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Large set of patterns are necessary.&lt;/li&gt;
&lt;li&gt;Goal is to claim to have reasonably accounted for alternative explanations.&lt;/li&gt;
&lt;li&gt;People will interpret our work causally, we should try our best to make it reasonable to do so.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Mental models make our lives and our work better.&lt;/li&gt;
&lt;li&gt;Arguments are a deep part of working with data.&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;
</content>
  </entry>
  <entry xml:base="https://bugra.github.io/">
    <title type="text">Document Visualization with JS Divergence Matrix and Multi Dimensional Scaling</title>
    <id>https://bugra.github.io/posts/2014/3/16/document-representation-with-bow-and-js-divergence-matrix</id>
    <updated>2014-03-16T00:00:00Z</updated>
    <published>2014-03-16T00:00:00Z</published>
    <link href="https://bugra.github.io/posts/2014/3/16/document-representation-with-bow-and-js-divergence-matrix" />
    <author>
      <name>Bugra Akyildiz</name>
    </author>
    <content type="html">&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;
  &lt;title&gt;-&lt;/title&gt;
  &lt;style&gt;
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
  &lt;/style&gt;
  &lt;!--[if lt IE 9]&gt;
    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;
  &lt;![endif]--&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h3 id=&quot;bag-of-words-bow&quot;&gt;Bag of Words (BoW)&lt;/h3&gt;
&lt;p&gt;In text search and classification of text, word order contributes less to the search result or document classification unless it is part of a phrase. Therefore, it is a common practice to use the frequency of occurrence of words sacrificing the word order which is known as “bag of words”. In this document representation method, document is converted to vectors by simply counting number of occurrence of words. For example, the following two sentences would have the same vector representation: “I am who I become” and “I become who I am” as the frequency of occurrence of words are same even though the word order is different. The rationality behind of this document representation is that, the presence and count of words do matter more than the word sequence in a sentence for classification. In practice, this representation is “lingua franca” along with tf-idf representation.&lt;/p&gt;
&lt;h3 id=&quot;corpus&quot;&gt;Corpus&lt;/h3&gt;
&lt;p&gt;In BoW setup, corpus corresponds to the distinct number of words that covers all of the documents that we have in our dataset.&lt;/p&gt;
&lt;h3 id=&quot;stop-words&quot;&gt;Stop Words&lt;/h3&gt;
&lt;p&gt;Words that do not contribute to the distinctiveness of either class. They could occur quite a lot like (e.g. I, am, you, they) or occur infrequently. The ones that occur a lot may prevent the vectors to weight to the words that are distinct for particular class. The ones that occur infrequently prevents us to represent the documents efficiently and compactly as they make quite long corpus vectors. Therefore, for text classification, we want to remove both the words that occur infrequently and the words that occur a lot but do not contribute to the distinctiveness of either class. A very useful heuristics for these words are the most common (5% of the words that occur most) and the least common(5-10% of the words that occur least in the entire corpus). After removing these words, we would have a better corpus and hopefully better vector representation for the documents for each class. Note that, for a given dataset, due to nature of natural language, the distribution of a typical corpus follows long tail distribution. Therefore, even if the least common words would contribute to the distinctiveness of the classes, there may be trade-off where we gain some “information” incorporating the least common words and lose the compactness of vector representation.(This brings &lt;strong&gt;curse of dimensionality&lt;/strong&gt; problem which we would try to resolve by bringing a dimensionality reduction method to the table.)&lt;/p&gt;
&lt;p&gt;After explanation of terms, let us give some concrete examples to explain how this actually works: consider following three sentences:&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;I am who I become&lt;/li&gt;
&lt;li&gt;I become who I am&lt;/li&gt;
&lt;li&gt;Who am I?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Ignoring the punctuation and uppercase, we have the following corpus for these three sentences: [‘am’, ‘become’, ‘i’, ‘who’]&lt;br /&gt;
(note that the words are sorted by alphabetical order) Quite a large corpus! Then the bag of words representation for the sentences are the following:&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;[1, 1, 2, 1]&lt;/li&gt;
&lt;li&gt;[1, 1, 2, 1]&lt;/li&gt;
&lt;li&gt;[1, 0, 1, 1]&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As previously mentioned, the first and second sentences would result in the same bag of words representation even if the sentences are different. One thing to note is that since the corpus is unrealistically small, we did not stop any words but normally the contribution of auxiliarry verbs and subject pronouns is minimal, so it is common practice to remove them alltogether. The default keyword list generally includes these type of words independent from the domain for the documents.&lt;/p&gt;
&lt;p&gt;It is easy to see that all of the documents would have the length of the corpus where the word “distribution” of the sentences would differ if the sentences are different(ignoring word order). This is all good but as we have previously mentioned, this brings dimensionality problems and lose the vector representation’s efficiency and accuracy. This is due to the nature of bag of words representation, as all of the word frequency counts toward the vector, some of the not very informative words may overcome to the words that provides distinct character to the documents in a classification perspective. In order to prevent this, we may want to use a dimensionality reduction method. If the method preserves the relative distance of individual vectors in euclidean space, then we not only gain in terms of efficiency of the representation but also prevent curse of dimensionality and a better document representation! But taking a step back, how do measure the “distance” between two documents? Let’s revisit an information theory measure for comparison of two probability distribution, namely K-L Divergence.&lt;/p&gt;
&lt;h3 id=&quot;kullback-leibler-divergence&quot;&gt;Kullback-Leibler Divergence&lt;/h3&gt;
&lt;p&gt;K-L divergence is a measure of the difference of two probability distributions, which is a special case of Bregman Divergence. For formal definition, if we have &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;p&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; and &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mi&gt;q&lt;/mi&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;q&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; discrete probability distributions, then the k-l divergence of these two distributions is defined as such: &lt;span class=&quot;math display&quot;&gt;$$ D_{KL}(p|q) = \displaystyle\sum_i ln(\frac{p(i)}{q(i)}) \hspace{2 mm} p(i) $$&lt;/span&gt; Needless to say, this measure is not symmetric and is defined only &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;p&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; and &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mi&gt;q&lt;/mi&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;q&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; sum to 1 for all possible &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;i&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; values. Moreover, for a particular &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;i&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;, being &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;q&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;postfix&quot;&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;q(i)=0&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; implies &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;postfix&quot;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;p(i)&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; to be &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;0&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; as well, otherwise the whole term would be undefined. Adopting this measure into our bag of words representation to measure sentence difference brings us two problems. First, we only have the counts of the words that occur in sentence, not the distribution. Second, as sentences are only a small part of corpus, there will be lots of &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;0&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;’s in the vector representation(would be a sparse vector). In order to mitigate the first problem, we could divide the counts of words in the vector by the total sum of the word count. By doing so, we also make sure that we have two vectors whose values sum up to 1. But second one is the hard one, how do we fill the 0’s? Luckily, this problem also comes up with in different domains and we have a solution: &lt;em&gt;smoothing&lt;/em&gt;. There are a number of smoothing algorithms, but the one that I used is Laplace Smoothing(also called Additive Smoothing) which I will explain in the next section.&lt;/p&gt;
&lt;p&gt;As mentioned before, this measure is not symmetric, but note that it is not related to bag of words representation per se, so we will provide another remedy for that after introducing the smoothing.&lt;/p&gt;
&lt;h3 id=&quot;laplace-smoothing&quot;&gt;Laplace Smoothing&lt;/h3&gt;
&lt;p&gt;Behind of smoothing the distributions is to remove the &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;0&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;’s from the distribution by introducing small amount of factor so that they will not be &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;0&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; but also they will not have a large share in overall distribution. By doing so, we would mitigate the implausibility of &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;0&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;’s with very small cost. Formally Laplace Smoothing is applied to distribution &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;p&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; as such: &lt;span class=&quot;math display&quot;&gt;$$ \hat{p_i} = \frac{p_i + \alpha}{1 + \alpha N} \hspace{5 mm} (i=1, \ldots, N) $$&lt;/span&gt; where &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mi&gt;α&lt;/mi&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\alpha&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; is the smoothing parameter and &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;N&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; is the number of discrete terms in the distribution.&lt;br /&gt;
&amp;gt; Note that without &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mi&gt;α&lt;/mi&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\alpha&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;, &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mover&gt;&lt;msub&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;mo accent=&quot;true&quot;&gt;̂&lt;/mo&gt;&lt;/mover&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\hat{p_i}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; is &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;msub&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;p_i&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; as expected and &amp;gt; adding &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mi&gt;α&lt;/mi&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\alpha&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; for every parameter would not change the sum of the &amp;gt; distribution as in the denominator, we divide by &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mi&gt;α&lt;/mi&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;1 + \alpha N&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;.&lt;/p&gt;
&lt;p&gt;Very well, we removed our &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;0&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;’s and have “smooth” distributions. However, what kind of measure is this K-L divergence if it is not symmetric? Think about it one second, difference between sentence A and sentence B would be different than difference between sentence B and sentence A. How ridiculuous is that! Luckily, we have a solution based on K-L divergence; Jensen Shannon Divergence which will be explained in the next section:&lt;/p&gt;
&lt;h3 id=&quot;jensen-shannon-divergence&quot;&gt;Jensen-Shannon Divergence&lt;/h3&gt;
&lt;p&gt;J-S Divergence builds itself on top of K-L divergence promising it is symmetric; which is nice and quite popular measure of two probability distributions. Formally it is defined for &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;p&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; and &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mi&gt;q&lt;/mi&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;q&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; distributions as such: &lt;math display=&quot;block&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;D&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;J&lt;/mi&gt;&lt;mi&gt;S&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;|&lt;/mo&gt;&lt;mi&gt;q&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;postfix&quot;&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;D&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;J&lt;/mi&gt;&lt;mi&gt;S&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;q&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;|&lt;/mo&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;postfix&quot;&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mfrac&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/mfrac&gt;&lt;msub&gt;&lt;mi&gt;D&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;K&lt;/mi&gt;&lt;mi&gt;L&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;|&lt;/mo&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;postfix&quot;&gt;)&lt;/mo&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mfrac&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/mfrac&gt;&lt;msub&gt;&lt;mi&gt;D&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;K&lt;/mi&gt;&lt;mi&gt;L&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;q&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;|&lt;/mo&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;postfix&quot;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt; D_{JS}(p|q) = D_{JS}(q|p) = \frac{1}{2} D_{KL}(p|r) + \frac{1}{2} D_{KL}(q|r) &lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; where &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mfrac&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/mfrac&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mi&gt;q&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;postfix&quot;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;r = \frac{1}{2} (p+q)&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;.&lt;br /&gt;
Instead of going through getting K-L divergence of individual distribution, J-S does this using a mixture distribution of &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;r&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;. Quite smart, huh? By doing so, it ensures that it is symmetric and nice measure for probability distribution differences.&lt;/p&gt;
&lt;h3 id=&quot;j-s-matrix&quot;&gt;J-S Matrix&lt;/h3&gt;
&lt;p&gt;Say we have &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;N&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; documents and we constructed our J-S matrix using J-S Divergence for each pair of smoothed bag of words of documents. This would result in &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mi&gt;M&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;NxM&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; matrix where the &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mi&gt;M&lt;/mi&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;M&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; is the size of our corpus as every document is represented &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mi&gt;M&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;1xM&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; vectors. This matrix representation would not solve our curse of dimensionality problem. So, let us introduce a dimensionality reduction method(among many others); Multidimensional Scaling.&lt;/p&gt;
&lt;h3 id=&quot;multidimensional-scaling-mds&quot;&gt;Multidimensional Scaling (MDS)&lt;/h3&gt;
&lt;p&gt;Over-simplified idea behind MDS is that if we could find an embedding which has a significantly lower dimension for high dimension space and preserve the distance between observation pairs, we do not lose much in relative sense since we are keeping the distance between the pairs. Further, we both reduce dimensionality quite a lot and preserve the relative distance to each other. This is somehow different than traditional dimensionality reduction methods where they they generally scale individual observations or all of the observations altogether. MDS seeks to fit a lower embedding for observation pairs. Since the J-S divergence deals with document pairs, J-S Divergence matrix could be considered as a dissimilarity matrix for the documents in that sense. Therefore, it is a perfect fit for MDS as MDS also tries to reduce the dimensionality of J-S measure between two documents. We want to find 2-dimension lower embedding in order to visualize the documents in a scatter plot but 1-dimension works as well as any number of dimension could be used for MDS. Formally, loss function of MDS is defined as following: &lt;math display=&quot;block&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;L&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;msub&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mi&gt;…&lt;/mi&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;(&lt;/mo&gt;&lt;munder&gt;&lt;mo&gt;∑&lt;/mo&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;≠&lt;/mo&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mi&gt;…&lt;/mi&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;/mrow&gt;&lt;/munder&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;(&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;D&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;∥&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;/msub&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;postfix&quot;&gt;∥&lt;/mo&gt;&lt;msup&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;postfix&quot;&gt;)&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msup&gt;&lt;msup&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;postfix&quot;&gt;)&lt;/mo&gt;&lt;mfrac&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/mfrac&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt; Loss_{x_1, \ldots, x_n} = (\displaystyle\sum_{i\neq j=1, \ldots, N} (D_{i,j} - \lVert x_i - x_j \rVert)^2)^{\frac{1}{2}}  &lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; where &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mi&gt;D&lt;/mi&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;D&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; is the dissimilarity matrix &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;Nxk&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; where &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;N&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; is the number of observations and &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;k&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; is the dimension of the original space. We are not going to show how the minimization works, but for a lower embedding(say 2), the minimization function could be optimized through gradient descent.&lt;/p&gt;
&lt;h3 id=&quot;result&quot;&gt;Result&lt;/h3&gt;
&lt;p&gt;After we apply MDS to our J-S divergence matrix, we get &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;x&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;-&lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;y&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; pair of coordinates of each document and it looks like the following(for a selected documents):&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2014/3/16/documents_mds.png&quot; title=&quot;Document Visualization on J-S Divergence Matrix and MultiDimensional Scaling&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Document Visualization on J-S Divergence Matrix and MultiDimensional Scaling&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Data is from Yelp’s reviews of restaurantts and first three sentences are negative and mention about how disappointing their experience was with restaurant. The rest of them are generally positive and even if their experience may include some negativity, their overall experience is quite positive.&lt;br /&gt;
As you could see from the scatter plot, the grouping of these two different class are somehow separate even though the documents are quite short and overall corpus is only 8 sentences.&lt;/p&gt;
&lt;h3 id=&quot;possible-improvement&quot;&gt;Possible Improvement&lt;/h3&gt;
&lt;p&gt;We talked about stop words but curating stop words is manual and laborious work. Further, it generally evolves to be domain specific as you incorporate more and more stop words. Instead of using stopwords, one may choose feature selection methods to choose the words from either classification accuracy or some information theory measure from the training dataset. This not only eliminates the stop words curation step alltogether but also increase the efficiency and compactness of the bag of words representation. As a result of this, when some dimensionality reduction method is applied to the vectors, they would position themselves better.&lt;/p&gt;
&lt;h3 id=&quot;what-is-next&quot;&gt;What is next?&lt;/h3&gt;
&lt;p&gt;An interactive app that allows user to type text and then visualize every sentence in a scatter plot. I have a working version of this, but it needs some polishing.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</content>
  </entry>
  <entry xml:base="https://bugra.github.io/">
    <title type="text">8th NYAS Machine Learning Symposium 2014</title>
    <id>https://bugra.github.io/posts/2014/3/28/nyas-machine-learning-symposium-spring-2014</id>
    <updated>2014-03-28T00:00:00Z</updated>
    <published>2014-03-28T00:00:00Z</published>
    <link href="https://bugra.github.io/posts/2014/3/28/nyas-machine-learning-symposium-spring-2014" />
    <author>
      <name>Bugra Akyildiz</name>
    </author>
    <content type="html">&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;
  &lt;title&gt;-&lt;/title&gt;
  &lt;style&gt;
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
  &lt;/style&gt;
  &lt;!--[if lt IE 9]&gt;
    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;
  &lt;![endif]--&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;I attended to &lt;a href=&quot;http://www.nyas.org/Events/Detail.aspx?cid=2cc3521e-408a-460e-b159-e774734bcbea&quot;&gt;NYAS 8th Machine Learning Symposium&lt;/a&gt; and here are the notes that I took from the event. It may contain errors and mistakes. If you find any, please let me know.&lt;br /&gt;
On personal view, it was worse than the previous machine learning symposium(7th) in both posters and also talks. Last year, the posters and talks were much more interesting to me. That being said, I could not visit all of the posters so take my word with a grain of salt.&lt;br /&gt;
The &lt;a href=&quot;http://www.nyas.org/asset.axd?id=defb6b86-f7ad-4a8d-af2a-3a5ef979c143&amp;amp;t=635314462602300000&quot;&gt;abstracts in pdf&lt;/a&gt; in here.&lt;/p&gt;
&lt;h3 id=&quot;machine-learning-for-powers-of-good&quot;&gt;Machine Learning for Powers of Good&lt;/h3&gt;
&lt;p&gt;by &lt;a href=&quot;http://www.rayidghani.com/&quot;&gt;Rayid Ghani&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Probability of optimization of limited resources for a campaign.&lt;/li&gt;
&lt;li&gt;Another important thing: to influence the behavior of the voter and how to make them engage with the campaign.&lt;/li&gt;
&lt;li&gt;Because prediction itself is not good enough.&lt;/li&gt;
&lt;li&gt;Resource allocation based on who are likely to be influenced. Who are likely to change their mind? Definitely not Texas.&lt;/li&gt;
&lt;li&gt;Not voting to Romney and not going to vote, too much work. Do not try to event attempt to do anything.&lt;/li&gt;
&lt;li&gt;Focus on the ones either who are indecisive but likely to vote or indecisive about voting but weakly support Obama.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://dssg.io/&quot;&gt;Data Science for Social Good&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;following-spotlight-talks&quot;&gt;Following Spotlight Talks&lt;/h3&gt;
&lt;h3 id=&quot;graph-based-posterior-regularization-for-semi-supervised-structured-prediction&quot;&gt;Graph-Based Posterior Regularization for Semi-Supervised Structured Prediction:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Posterior labels for part of speech tags. Graph-based approach, using Laplacian of Graph&lt;/li&gt;
&lt;li&gt;Structured Prediction =&amp;gt; CRF =&amp;gt; local scope, features&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Graph-propagation and CRF estimation =&amp;gt; Joint objective, then to optimize and look at the KL divergence as well for both world parameters.&lt;/p&gt;
&lt;p&gt;Relevant work is &lt;a href=&quot;http://jmlr.org/papers/volume11/ganchev10a/ganchev10a.pdf&quot;&gt;Posterior Regularization(PR) Linear Ganchev&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;EM like algorithm =&amp;gt; to converge to the local optimum&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;She showed that it performs better than both CRF and Graph based approaches in her poster, but she did not compare speed of this approach with CRF or Graph based approaches. It is likely the method is slower than CRF but, I am not very familiar Graph based approaches and joint objective could be quite hard to optimize. So, the speed is could be much worse more than 2 times than CRF.&lt;/p&gt;
&lt;h3 id=&quot;learning-from-label-proportionsllp&quot;&gt;Learning from Label Proportions(LLP):&lt;/h3&gt;
&lt;p&gt;It attacks Binary learning problem with an extension of bag approach where bags represent the ratio of the labels that are known but individual labels are unknown. They try to solve the problem in a large margin framework trying to model the instances belonging to a particular label and try to increase margin with the other label(smv-like). - Extension of supervised learning objective with Bag Proportion Loss with model parameters with a proportion loss.&lt;/p&gt;
&lt;h3 id=&quot;generalization-error-of-llp&quot;&gt;Generalization Error of LLP&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Sample complexity of learning is proportional to bag proportion&lt;/li&gt;
&lt;li&gt;Instance label prediction error =&amp;gt; again depends on the prediction error&lt;/li&gt;
&lt;li&gt;Not only the supervised learning objective but also the bag proportions for the labeling matters.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;generative-image-models-for-visual-phenotype-modeling&quot;&gt;Generative Image Models For Visual Phenotype Modeling&lt;/h3&gt;
&lt;p&gt;They have genome types of fish and they have features of the fish. In order to learn which genome type has effect on which fish trait, they propose an admixture model which tries to correlate the traits and genome.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Admixture model to correlate the shape variance between geneology of the fishes.&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;Annotated genome from the shape variance of the fish.&lt;/li&gt;
&lt;li&gt;Genome annotates the features of the shape variance of the fish.&lt;/li&gt;
&lt;li&gt;Unsupervised learning of the features and joint generative model from fish variance and genome change. =&amp;gt; Seems quite novel.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;large-scale-learning---scaling-graph-based-semi-supervised-learning&quot;&gt;Large Scale Learning - Scaling Graph-based semi supervised-learning&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Replace label vectors =&amp;gt; count-min-sketch? is a data structure(randomized) stores the counts of items.&lt;/li&gt;
&lt;li&gt;MAD exact vs Mad-Sketch =&amp;gt; comparison&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/parthatalukdar/junto&quot;&gt;Junto Toolkit @ Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;structured-classification-criteria-for-deep-learning-for-speech-recognition-second-keynote&quot;&gt;Structured Classification Criteria for Deep Learning for Speech Recognition (Second Keynote)&lt;/h3&gt;
&lt;p&gt;Before this talk, I knew that IBM is strong in deep learning(if I recall correctly, they had a poster last year for speech recognition) but I did not know that they published also strong papers for speech recognition last year. Google and Facebook get a lot of coverage for deep learning and that maybe rightly so, but IBM is also a strong player in the area.&lt;/p&gt;
&lt;h3 id=&quot;talk-structure&quot;&gt;Talk Structure&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Acoustic Modeling for speech recoognition:&lt;/li&gt;
&lt;li&gt;Structured loss function: we do not care about the loss function per se but how audible it is in the speech. Therefore, the loss function should be structured around audibility of the speech.&lt;/li&gt;
&lt;li&gt;Optimization&lt;/li&gt;
&lt;li&gt;Speeding for training&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;bayesian-modeling-for-speech-recognition&quot;&gt;Bayesian Modeling for Speech Recognition&lt;/h3&gt;
&lt;p&gt;Sequence of phones are nice because if have a word to classify and you did not have that sample in the training set, you could “guess” the word from the sequence of phones.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Context affects the acoustic realization of a phone in the speech.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;context-dependent-modeling&quot;&gt;Context-dependent modeling&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Condition on adjacent phones, infer the xcontext.&lt;/li&gt;
&lt;li&gt;Parameter sharing needed to mitigate data sparsity sahring must generalize to unseen contexts.&lt;/li&gt;
&lt;li&gt;Decision tree to get the AA-b, nasal, retroflex, fricative?, too much hand-engineered features.&lt;/li&gt;
&lt;li&gt;Basic speech sounds =&amp;gt; 1000 to 64K&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;structured-loss-functions&quot;&gt;Structured Loss Functions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Cross-entropy, for training criterion.&lt;/li&gt;
&lt;li&gt;A neural network with training error with the cross-entropy.&lt;/li&gt;
&lt;li&gt;We do not care about individual phones error but word error.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Cross_entropy&quot;&gt;Cross-Entropy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://mi.eng.cam.ac.uk/~wjb31/ppubs/hlt04_mbr_smt.pdf&quot;&gt;Bayes-Risk Losses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Hamming distance is a &lt;strong&gt;forgiving&lt;/strong&gt; distance measure for error between HMM sequences.&lt;/li&gt;
&lt;li&gt;To represent reference space, lattices generated via constrained recognition.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;stochastic-gradient-optimization&quot;&gt;Stochastic Gradient Optimization&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Training GMM with is the fundamental idea.&lt;a href=&quot;http://ieeexplore.ieee.org/xpl/login.jsp?tp=&amp;amp;arnumber=4960445&amp;amp;url=http%3A%2F%2Fieeexplore.ieee.org%2Fxpls%2Fabs_all.jsp%3Farnumber%3D4960445&quot;&gt;Stochastic Gradient Optimization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Second Order optimization =&amp;gt; well researched&lt;/li&gt;
&lt;li&gt;Linear conjugate gradient minimizes a quadratic, which can be described by only matrix-vector products. Only linear time and memory are necessary.&lt;/li&gt;
&lt;li&gt;CG is not necessary, truncated Newton is good enough.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.researchgate.net/publication/228619939_The_IBM_Attila_speech_recognition_toolkit&quot;&gt;Hessian Free Optimization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://research.microsoft.com/pubs/209355/NOW-Book-Revised-Feb2014-online.pdf&quot;&gt;It has reference in this book,too.&lt;/a&gt; =&amp;gt; most probably, this may explain better.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;speeding-training&quot;&gt;Speeding Training&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://wiki.inf.ed.ac.uk/twiki/pub/CSTR/ListenSemester1201314/Sainath2013_lrdnn.pdf&quot;&gt;Low-rank factorization of output weights&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Word error rate generally drops as we increase the number of output targets =&amp;gt; factorization to reduce dimension?&lt;/li&gt;
&lt;li&gt;It gets faster.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;preconditioning-in-sampling&quot;&gt;Preconditioning in Sampling&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://arxiv.org/pdf/1309.1508v3.pdf&quot;&gt;Accelerating Hessian Free Optimization Implicit Preconditioning and Sampling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Geometric optimization reference is also in the above link.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;take-home-mesages&quot;&gt;Take-Home Mesages&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A Structured loss function instead of cross-entropy&lt;/li&gt;
&lt;li&gt;Stochastic gradient on a GPU is faster but distributed Hessian free optimization produces better models.&lt;/li&gt;
&lt;li&gt;Low rank factorization of the output weights&lt;/li&gt;
&lt;li&gt;Preconditioning and sampling&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;http://machinelearning.wustl.edu/mlpapers/paper_files/icml2010_Martens10.pdf&quot;&gt;Hessian-Free Optimization&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;learning-guarantees-of-the-optimization&quot;&gt;Learning Guarantees of the Optimization&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Convex surrogate did not work&lt;/li&gt;
&lt;li&gt;You could learn an interesting loss function.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.google.com/presentation/d/1fZjE2aNMEoXprlvju_CrJETPylKrWZ5GzBYCj-GFSQc/edit#slide=id.g40599a40022e2fc114&quot;&gt;Related Slides&lt;/a&gt;, I could not catch the presenter in the poster.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;large-scale-machine-learningaccelerated&quot;&gt;Large Scale Machine Learning(Accelerated)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Machine learning as an optimization problem.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://yaroslavvb.blogspot.com/2014/03/stochastic-gradient-methods-2014.html&quot;&gt;Stochastic Gradient Methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://mrtz.org/blog/the-zen-of-gradient-descent/&quot;&gt;Gradient Descent Method Blog Post&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;fast-scalable-comment-moderation-on-nyt&quot;&gt;Fast Scalable Comment Moderation on NYT&lt;/h2&gt;
&lt;h3 id=&quot;active-learning-at-the-new-york-times&quot;&gt;Active Learning at the New York Times&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Comment is split into two: metadata and n-grams.&lt;/li&gt;
&lt;li&gt;Hash the n-grams, score of the comment for human editor if it will be shown to her. Human moderators will work on whatever the algorithm scores on high.&lt;/li&gt;
&lt;li&gt;20% =&amp;gt; workload reduction according to the plan&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;key-observations&quot;&gt;Key Observations&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Stochastic Gradient Descent in the origin&lt;/li&gt;
&lt;li&gt;Batch Gradient Descent in one direction (between semi-stochatic approaches)&lt;/li&gt;
&lt;li&gt;Stochastic Newton Method in the other direction (between second-order methods)&lt;/li&gt;
&lt;li&gt;Other fields in Newton method&lt;/li&gt;
&lt;li&gt;Coordinate descent is towards simpler methods&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Optimal rate is achieved also for testing cos as long as each data point is seen only once.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;to-learn-more-about-stochastic-gradient-descent&quot;&gt;To learn More about Stochastic Gradient Descent&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.eecs.berkeley.edu/~brecht/cs294docs/week1/09.Nemirovski.pdf&quot;&gt;Nice paper for stochastic gradient methods&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Stochastic Quasi-Newton Method performs quite well.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sorry about other spotlight talks, I am sure they were as interesting as the ones above but I was only able to take notes and follow this much.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</content>
  </entry>
  <entry xml:base="https://bugra.github.io/">
    <title type="text">Data Products Made Easy</title>
    <id>https://bugra.github.io/posts/2014/3/21/data-products-made-easy</id>
    <updated>2014-03-21T00:00:00Z</updated>
    <published>2014-03-21T00:00:00Z</published>
    <link href="https://bugra.github.io/posts/2014/3/21/data-products-made-easy" />
    <author>
      <name>Bugra Akyildiz</name>
    </author>
    <content type="html">&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;
  &lt;title&gt;-&lt;/title&gt;
  &lt;style&gt;
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
  &lt;/style&gt;
  &lt;!--[if lt IE 9]&gt;
    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;
  &lt;![endif]--&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;I read &lt;a href=&quot;http://www.oreilly.com/data/free/data-jujitsu.csp&quot;&gt;Data Jujitsu&lt;/a&gt; recently and enjoyed it a lot. DJ Patil presents a nice set of hard learned things that he experienced in (mainly) Linkedin. I like this type of &lt;strong&gt;real&lt;/strong&gt; experiences rather than a set of rules that advocates a too ideal world and behave according to that world.&lt;/p&gt;
&lt;p&gt;A recurring theme of one the short book is that divide and attack the problems you have. The “Jujitsu” term comes from Japanese martial art and suggests doing small attacks and trying to use the opponent’s strength towards her because the opponent (problem) is much stronger than you. This naming actually reflects quite well what the short book is about. Developing solutions to hard problems with limited human power and time. What I found surprising a little bit is that, how consumer-oriented he is throughout the book. He looks at the problem solving approximately in the following: if problems are not what customers want(enhancement in the product) or what customers are unhappy about(bugs), then there must be some other incentive(increase in engagement, better sales and so on) must exist so that that problem would become &lt;strong&gt;worthy&lt;/strong&gt; to solve. So, solving a problem for the sake of solving is not beneficial, neither for the customer nor for the business.&lt;/p&gt;
&lt;h3 id=&quot;critical-question&quot;&gt;Critical Question&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Does anyone want or need your product?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This question is so critical that I cannot stress how important it is. Generally, the startups or businesses in general do not fail because they could not solve a problem technically but either they cannot create enough incentive for people to buy the product or simply it is irrelevant to the market. If you cannot answer this question with confidence, however hard problem that you solved will not matter. Eventually, if the product will be used, then someone needs or wants your product.&lt;/p&gt;
&lt;h3 id=&quot;minimum-viable-product&quot;&gt;Minimum Viable Product&lt;/h3&gt;
&lt;p&gt;If you answered the question above, then you are eligible to build your minimum viable product. This does not have to be your fully functional product but it should be a simple product that needs to prove that there is a need and it should be &lt;strong&gt;good enough&lt;/strong&gt; so that you could determine if you want to improve it or not. When you want to improve, ask these two questions:&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;“Does the customer care? Is there a market fit? If there isn’t, there is no sense in building an application.”&lt;/li&gt;
&lt;li&gt;“How long do we have to learn the answer to Question A?”&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When you prototype and measure the engagement of a user in the step 1, you have a better sense of what you should build. Further, this also ensures that you have a validity check that you are not building something nobody wants it.&lt;/p&gt;
&lt;h3 id=&quot;definition&quot;&gt;Definition&lt;/h3&gt;
&lt;p&gt;Go back for a second, what is a “data product” to begin with? He gives a concrete definitiion for this question:&lt;br /&gt;
“Data product is a product that facilitates an end goal through the use of data.”&lt;/p&gt;
&lt;h3 id=&quot;design-of-product&quot;&gt;Design of Product&lt;/h3&gt;
&lt;p&gt;Considering how much development, funding have been given towards big data technologies or data analysis tools in general, data products would have been easy, right? Not really.&lt;/p&gt;
&lt;p&gt;Data is messy especially if you are getting data from a variety of sources which do not have common interfaces. Data is messy if you are collecting from input text fields that customers fill in. How do you make sure that the data is in the right form? With product design. You would provide feedback as Google search does ahead of the user, you would prompt “did you mean …” to help the user, you will arrange your dropdown menu based on the input from the customer. This not only provides much better experience for the user but also you get a much better, structured data(think about dropdowns, support type-ahead for a second) in your back-end. Patil presents this fact as: “I’ve found that trying to solve a problem on the back-end is 100-1000 times more expensive than on the front end”.&lt;/p&gt;
&lt;h3 id=&quot;use-humans-when-you-have-to-use-technical-solutions-when-you-could&quot;&gt;Use humans when you have to, use technical solutions when you could&lt;/h3&gt;
&lt;p&gt;Generally, engineering seeks for technical solutions which are scalable. This ensures that the solution will be profitable for high number of users. However, when you try to be relevant in the market or try to see if there is a market, you need to use humans. There is a similar problem &lt;a href=&quot;http://en.wikipedia.org/wiki/Cold_start&quot;&gt;cold start&lt;/a&gt; which corresponds a significant problem in the recommender system. Think about a user who just signed your ecommerce startup, you want to recommmend things to him but you do not have any history. Not only that, but you just launched your product so you do not have any prior knowledge what people (in general) like. If you had beta users or mechanical turks before you launched your product, you are in luck. If the product is consumer-facing, you should at least some data about your users from to have a head start. Technical solutions are and will be more efficient, cheaper and scale better in the long run, but if you cannot afford the time and effort to build a technical solution to the problem, then do not hesitate humans.&lt;/p&gt;
&lt;h3 id=&quot;always-be-opportunistic&quot;&gt;Always be opportunistic&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;If you are able to do data analysis to make the product better, increase the sales, just do it!&lt;/li&gt;
&lt;li&gt;If you cannot do some operation because you do not have resources or technical expertise, try do divide the operation and try to offer simple version of it instead of providing nothing!&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;give-the-data-back&quot;&gt;Give the data back!&lt;/h3&gt;
&lt;p&gt;If your product is data-centric, you must be creating some value around it and you should already providing the data to the customer in some way. You should give it more! To both increase engagement and revenue, give the data in an undertandable, clean and maybe even interactive way. Let users play with the data. If your data is timely and actioanable(think twitter for a sec), then it becomes addictive. Instead of hoarding, share it. Only through sharing and giving back, you could create more value around it.&lt;/p&gt;
&lt;h3 id=&quot;but-do-not-give-it-too-much&quot;&gt;But do not give it too much!&lt;/h3&gt;
&lt;p&gt;What Patil calls “Data Vomit” is that if you give too much data without considering if it makes sense or valuable to the customer, there is a good chance to overwhelm the user. So, confusion and frustration replaces the engagement from the day one. There is a sweet spot where more data generates more engagement and after that sweet spot, more data will cause less interaction and engagement.&lt;/p&gt;
&lt;h3 id=&quot;consider-non-ideal-cases&quot;&gt;Consider non-ideal cases&lt;/h3&gt;
&lt;p&gt;If you are building a product, think about the extreme and edge cases as well. Showing spanish pages to a tourist visiting Mexica just because she is in Mexica may not make sense and especially if she repeatedly changes the browser language from spanish to english!&lt;/p&gt;
&lt;h3 id=&quot;precision-and-recall&quot;&gt;Precision and Recall&lt;/h3&gt;
&lt;p&gt;If you are building a retrieval system, first learn these concepts. Then, find out what you want to compromise as these two generally work against to each other. For a search engine, precision might be the single most important metric whereas if you claim to be one of the most comprehensive news source, you need to also increase your recall to be consistent with your claim. Rule of thumb is that if the data is exposed, first try to have a high precision because first page may be the only page that your customer sees. If the precision is not good, it may well be the last page.&lt;/p&gt;
&lt;h3 id=&quot;social-system-for-the-win&quot;&gt;Social system for the win&lt;/h3&gt;
&lt;p&gt;If your recommender system is terrible giving recommendations and customers are unhappy about it, use collaborative filtering first and blame the preferences of other users if customer is still not happy about the recommendation. It is something that customer blames the product for terrible recommendations, and it is completely different thing that people are buying two incoherent things, so I am recommended that product.&lt;/p&gt;
&lt;h3 id=&quot;get-more-data&quot;&gt;Get more data&lt;/h3&gt;
&lt;p&gt;Even if your domain is not advertising, knowing more about your users always pay off. As you know more about her, you could recommend better, you could personalize better, you could sell better, you could serve better. Asking data if it is done correctly, it could be another way to engage the customer as well. After you get the data, only goal would be better product. Do not abuse it!&lt;/p&gt;
&lt;h3 id=&quot;user-is-the-most-important&quot;&gt;User is the most important&lt;/h3&gt;
&lt;p&gt;Features fail, products fail, nearly everyting in the universe at some point fails. Get used to it, but try to preserve as much as user experience you can in the process. Data products generally empower the user in some way and there is a high chance that the experience will not be constant through her time. Try not to decrease it too much. If the ads that you show may be offensive, give an option to user so that when she visits the website, she could just remove those type of ads(similar to Facebook). If the people you recommend are not very relevant, provide a way to user so that he could give negative feedback to people whom she does not know so that she will not see them again(similar to Linkedin). This not only gives control and value to user, in the process you could learn user preferences and build a better product.&lt;/p&gt;
&lt;h3 id=&quot;three-fundamental-questions-that-you-should-ask-to-yourself&quot;&gt;Three Fundamental Questions that you should ask to yourself&lt;/h3&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;What do you want the user to take away from this product?&lt;/li&gt;
&lt;li&gt;What action do you want the user to take because of the product?&lt;/li&gt;
&lt;li&gt;How should the user feel during and after using your product?&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;If the core of your product gets it right the core and fundamentals from the day one, you have a lot of time to improve it. Use Jujitsu!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/body&gt;
&lt;/html&gt;
</content>
  </entry>
  <entry xml:base="https://bugra.github.io/">
    <title type="text">Pig Not So Foreign Language Paper Notes</title>
    <id>https://bugra.github.io/posts/2014/2/9/pig-not-so-foreign-language-paper-notes</id>
    <updated>2014-02-09T00:00:00Z</updated>
    <published>2014-02-09T00:00:00Z</published>
    <link href="https://bugra.github.io/posts/2014/2/9/pig-not-so-foreign-language-paper-notes" />
    <author>
      <name>Bugra Akyildiz</name>
    </author>
    <content type="html">&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;
  &lt;title&gt;-&lt;/title&gt;
  &lt;style&gt;
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
  &lt;/style&gt;
  &lt;!--[if lt IE 9]&gt;
    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;
  &lt;![endif]--&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;These are notes that I took from the &lt;a href=&quot;http://infolab.stanford.edu/~usriv/papers/pig-latin.pdf&quot;&gt;paper&lt;/a&gt;, where the authors explain the design principles and some theoretical aspects of Pig the programming language. I gave a basic overview in &lt;a href=&quot;/work/notes/2014-02-08/pig-advantages-and-disadvantages/&quot;&gt;Pig Advantages and Disadvantages&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;before-pig&quot;&gt;Before Pig&lt;/h3&gt;
&lt;p&gt;Before Pig and Hadoop, there was mighty Map-Reduce paradigm for parallellization and data processin. The overview of data processing before Pig as follows:&lt;/p&gt;
&lt;h3 id=&quot;map-reduce-advantages&quot;&gt;Map-Reduce Advantages&lt;/h3&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;Scale
&lt;ul&gt;
&lt;li&gt;Scalable due to simpler design&lt;/li&gt;
&lt;li&gt;Only parallelizable operations&lt;/li&gt;
&lt;li&gt;No transactions&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Runs on cheap commodity(cost) hardware&lt;/li&gt;
&lt;li&gt;Procedural control - a processing “pipe”&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;disadvantages&quot;&gt;Disadvantages&lt;/h3&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;Extremely rigid data flow(Map-Reduce)&lt;/li&gt;
&lt;li&gt;Common operations must be coded by hand(Join, filter, projection, aggregation)&lt;/li&gt;
&lt;li&gt;Semantics are hidden inside map-reduce functions
&lt;ul&gt;
&lt;li&gt;Difficult to maintain, extend and optimize&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;Need a high-level, general data-flow language.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Automatic query optimization is hard.&lt;/li&gt;
&lt;li&gt;Pig Latin does not preclude optimization.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Big demand for parallel data processing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Emerging tools that do not look like SQL DBMS.&lt;/li&gt;
&lt;li&gt;Programmers like &lt;strong&gt;dataflow pipes&lt;/strong&gt; over static files.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;building-a-high-level-dataflow-system-on-top-of-mapreduce&quot;&gt;Building a High-Level Dataflow System on Top of MapReduce&lt;/h3&gt;
&lt;h3 id=&quot;what-is-pig&quot;&gt;What is Pig&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Procedural dataflow language (Pig Latin) for Map-Reduce&lt;/li&gt;
&lt;li&gt;Provides standard relational transforms(group, join, filter, sort)&lt;/li&gt;
&lt;li&gt;Schemas are optional, if used, can be part of data or specified at run time.&lt;/li&gt;
&lt;li&gt;User defined functions are first class of citizens of the language.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;join-implementations&quot;&gt;Join implementations&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Default is symmetric, hash join&lt;/li&gt;
&lt;li&gt;Fragment-replicate for joining large and small inputs.&lt;/li&gt;
&lt;li&gt;Merge join for joining inputs sorted on join key.&lt;/li&gt;
&lt;li&gt;Skew join for handling inputs with significant skew in the join key.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;hbase&quot;&gt;Hbase&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Solves appending problem in HDFS
&lt;ul&gt;
&lt;li&gt;Low-latency query API&lt;/li&gt;
&lt;li&gt;rich, BigTable-style data model based on column families&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;advantages-of-pig&quot;&gt;Advantages of Pig&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;High Level language&lt;/li&gt;
&lt;li&gt;Transformations on set of records&lt;/li&gt;
&lt;li&gt;Process data one step at a time&lt;/li&gt;
&lt;li&gt;UDF’s are first class citizens.&lt;/li&gt;
&lt;li&gt;Easier than SQL.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;needs&quot;&gt;Needs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Innovation at internet companies critically depends on being able to analyze terabytes of data collected every day.&lt;/li&gt;
&lt;li&gt;SQL could be unnatural, and hard to follow as it declarative.&lt;/li&gt;
&lt;li&gt;Map-Reduce paradigm is too low-level and rigid, and leads to a great deal of custom user code that is hard to maintain, and reuse.&lt;/li&gt;
&lt;li&gt;Engineers who develop search engine ranking algoriths spend much of their time analyzing search logs looking for exploitable trends.&lt;/li&gt;
&lt;li&gt;Map-Reduce: its one input and two-stage data flow is extremely rigid.&lt;/li&gt;
&lt;li&gt;Pig-Latin program is a sequence of steps, much of liek in a programming language, each of which carries out a single data transformation.&lt;/li&gt;
&lt;li&gt;The use of such high-level primitives renders low-level manipulations (as required in map-reduce) unnecessary.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;First, &lt;strong&gt;Pig Latin&lt;/strong&gt; is the programming language and &lt;strong&gt;Pig&lt;/strong&gt; is the data processing environment on top of Hadoop.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;pig-latin-as-a-dataflow-language&quot;&gt;Pig Latin as a DataFlow Language&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;User specifies a sequence of steps where each step specifies only a single, high-level data transformation.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;nested-data-model&quot;&gt;Nested Data Model&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Programmers often think in terms of nested data structures.&lt;/li&gt;
&lt;li&gt;Databases on the other hand, allows only flat tables, i.e. only atomic fields as columns.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;why-nested-model-is-better&quot;&gt;Why nested model is better?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A nested data model is closer to how programmers think, and consequently much more natural to them than normalization.&lt;/li&gt;
&lt;li&gt;Data is often stored on disk in an inherently nested fashion.&lt;/li&gt;
&lt;li&gt;A nested data model also allows us to fulfill our goal of having an algebraic language where each step carries out only a single data transformation.&lt;/li&gt;
&lt;li&gt;A nested data model allows programmers to easily write a rich set of user-defined functions.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;udfs&quot;&gt;UDFs&lt;/h3&gt;
&lt;p&gt;All aspects of processing in Pig Latin can be customized through User Defined Functions.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</content>
  </entry>
  <entry xml:base="https://bugra.github.io/">
    <title type="text">Cultural Data Project Part 1</title>
    <id>https://bugra.github.io/posts/2014/2/1/cdp-part-1</id>
    <updated>2014-02-01T00:00:00Z</updated>
    <published>2014-02-01T00:00:00Z</published>
    <link href="https://bugra.github.io/posts/2014/2/1/cdp-part-1" />
    <author>
      <name>Bugra Akyildiz</name>
    </author>
    <content type="html">&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;
  &lt;title&gt;-&lt;/title&gt;
  &lt;style&gt;
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
  &lt;/style&gt;
  &lt;!--[if lt IE 9]&gt;
    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;
  &lt;![endif]--&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;
&lt;p&gt;Data is from &lt;a href=&quot;http://www.culturaldata.org/&quot;&gt;Cultural Data Project&lt;/a&gt;. In order to get a better understanding, I seggregated the data by organization type. There are total 48 different organization types. Data follows &lt;a href=&quot;http://www.culturaldata.org/wp-content/themes/cdp/pdf/CDP-BlankProfile.pdf&quot;&gt;data profile&lt;/a&gt; structure and I grouped organizations into 6 different subsections; employment statistics, their activities, pricing, website activity, attendance and finally number of contributors. Before looking at the distribution of the above metrics, let’s look at when organizations are founded. The first cultural organization dates go back to 1636 according to data and youngest one seems to be 2012.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2014/2/1/year_founded.png&quot; title=&quot;Foundation Year of Organizations&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Foundation Year of Organizations&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Mean year is approximately 1975 and median year is 1984. The width of the plot shows the number of organizations that are founded in a year shown in the y axis. Most of the organizations are founded between 1950 and 2000 where around 2000, it reaches its peak. This could also be observed from the difference in median and mean year.&lt;/p&gt;
&lt;p&gt;Unless, it is stated otherwise, every subsection will give the mean, median and sum statistics of the variables. The reason why three graphs are provided is because some of the organizations are quite large in terms of revenue, human resources and other metrics. As you will see later, these companies’ metrics dominate other companies; sum and mean of those sections mostly reflect their statistics ignoring other organizations. Median provides a nice solution for this type of statistics as it is a metric which is quite robust to &lt;strong&gt;outliers&lt;/strong&gt;. Mean and sum statistics are provided as they are also very useful to summarize the data when there are not outliers or small number of outliers.&lt;/p&gt;
&lt;p&gt;Organization types are sorted by alphabetical order so the &lt;em&gt;None of the Above&lt;/em&gt; should change &lt;em&gt;None of anything else&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&quot;employment&quot;&gt;Employment&lt;/h3&gt;
&lt;h4 id=&quot;mean&quot;&gt;Mean&lt;/h4&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2014/2/1/employmen_groupby_institution_type_mean.png&quot; title=&quot;Employment Mean grouped by Institution&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Employment Mean grouped by Institution&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id=&quot;median&quot;&gt;Median&lt;/h4&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2014/2/1/employmen_groupby_institution_type_median.png&quot; title=&quot;Employment Median grouped by Institution&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Employment Median grouped by Institution&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id=&quot;sum&quot;&gt;Sum&lt;/h4&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2014/2/1/employmen_groupby_institution_type_sum.png&quot; title=&quot;Employment Sum grouped by Institution&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Employment Sum grouped by Institution&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;activity&quot;&gt;Activity&lt;/h3&gt;
&lt;h4 id=&quot;mean-1&quot;&gt;Mean&lt;/h4&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2014/2/1/activity_groupby_institution_type_mean.png&quot; title=&quot;Activity Types Mean grouped by Institution&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Activity Types Mean grouped by Institution&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id=&quot;median-1&quot;&gt;Median&lt;/h4&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2014/2/1/activity_groupby_institution_type_median.png&quot; title=&quot;Activity Types Median grouped by Institution&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Activity Types Median grouped by Institution&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id=&quot;sum-1&quot;&gt;Sum&lt;/h4&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2014/2/1/activity_groupby_institution_type_sum.png&quot; title=&quot;Activity Types Sum grouped by Institution&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Activity Types Sum grouped by Institution&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;pricing&quot;&gt;Pricing&lt;/h3&gt;
&lt;h4 id=&quot;mean-2&quot;&gt;Mean&lt;/h4&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2014/2/1/activity_groupby_institution_type_sum.png&quot; title=&quot;Pricing Mean grouped by Institution&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Pricing Mean grouped by Institution&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id=&quot;median-2&quot;&gt;Median&lt;/h4&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2014/2/1/pricing_groupby_institution_type_median.png&quot; title=&quot;Pricing Median grouped by Institution&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Pricing Median grouped by Institution&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id=&quot;sum-2&quot;&gt;Sum&lt;/h4&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2014/2/1/pricing_groupby_institution_type_sum.png&quot; title=&quot;Pricing Sum grouped by Institution&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Pricing Sum grouped by Institution&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;web-activity&quot;&gt;Web Activity&lt;/h3&gt;
&lt;h4 id=&quot;mean-3&quot;&gt;Mean&lt;/h4&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2014/2/1/web_activity_groupby_institution_type_mean.png&quot; title=&quot;Website Activity Mean grouped by Institution&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Website Activity Mean grouped by Institution&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id=&quot;median-3&quot;&gt;Median&lt;/h4&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2014/2/1/web_activity_groupby_institution_type_median.png&quot; title=&quot;Website Activity Median grouped by Institution&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Website Activity Median grouped by Institution&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id=&quot;sum-3&quot;&gt;Sum&lt;/h4&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2014/2/1/web_activity_groupby_institution_type_sum.png&quot; title=&quot;Website Activity Sum grouped by Institution&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Website Activity Sum grouped by Institution&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;web-income&quot;&gt;Web Income&lt;/h3&gt;
&lt;h4 id=&quot;mean-4&quot;&gt;Mean&lt;/h4&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2014/2/1/web_income_groupby_institution_type_mean.png&quot; title=&quot;Website Income mean grouped by Institution&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Website Income mean grouped by Institution&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id=&quot;median-4&quot;&gt;Median&lt;/h4&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2014/2/1/web_income_groupby_institution_type_median.png&quot; title=&quot;Website Income Median grouped by Institution&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Website Income Median grouped by Institution&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id=&quot;sum-4&quot;&gt;Sum&lt;/h4&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2014/2/1/web_income_groupby_institution_type_sum.png&quot; title=&quot;Website Income Sum grouped by Institution&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Website Income Sum grouped by Institution&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;attendance&quot;&gt;Attendance&lt;/h3&gt;
&lt;h4 id=&quot;mean-5&quot;&gt;Mean&lt;/h4&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2014/2/1/attendance_groupby_institution_type_mean.png&quot; title=&quot;Attendance Mean grouped by Institution&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Attendance Mean grouped by Institution&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id=&quot;median-5&quot;&gt;Median&lt;/h4&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2014/2/1/attendance_groupby_institution_type_median.png&quot; title=&quot;Attendance Median grouped by Institution&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Attendance Median grouped by Institution&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id=&quot;sum-5&quot;&gt;Sum&lt;/h4&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2014/2/1/attendance_groupby_institution_type_sum.png&quot; title=&quot;Attendance Sum grouped by Institution&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Attendance Sum grouped by Institution&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;number-of-contributors&quot;&gt;Number of Contributors&lt;/h3&gt;
&lt;h4 id=&quot;mean-6&quot;&gt;Mean&lt;/h4&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2014/2/1/contributor_groupby_institution_type_mean.png&quot; title=&quot;Contributor Mean grouped by Institution&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Contributor Mean grouped by Institution&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id=&quot;median-6&quot;&gt;Median&lt;/h4&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2014/2/1/contributor_groupby_institution_type_median.png&quot; title=&quot;Contributor Median grouped by Institution&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Contributor Median grouped by Institution&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id=&quot;sum-6&quot;&gt;Sum&lt;/h4&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2014/2/1/contributor_groupby_institution_type_sum.png&quot; title=&quot;Contributor Sum grouped by Institution&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Contributor Sum grouped by Institution&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/body&gt;
&lt;/html&gt;
</content>
  </entry>
  <entry xml:base="https://bugra.github.io/">
    <title type="text">Pig Advantages and Disadvantages</title>
    <id>https://bugra.github.io/posts/2014/2/8/pig-advantages-disadvantages</id>
    <updated>2014-02-08T00:00:00Z</updated>
    <published>2014-02-08T00:00:00Z</published>
    <link href="https://bugra.github.io/posts/2014/2/8/pig-advantages-disadvantages" />
    <author>
      <name>Bugra Akyildiz</name>
    </author>
    <content type="html">&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;
  &lt;title&gt;-&lt;/title&gt;
  &lt;style&gt;
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
  &lt;/style&gt;
  &lt;!--[if lt IE 9]&gt;
    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;
  &lt;![endif]--&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;
&lt;p&gt;Apache Pig is a dataflow language that is built on top of Hadoop to make it easier to process, clean and analyze “big data” without having to write vanilla map-reduce jobs in Hadoop.&lt;br /&gt;
It has also a lot of relational database features. Good old &lt;code&gt;join&lt;/code&gt;s, &lt;code&gt;distinct&lt;/code&gt;, &lt;code&gt;union&lt;/code&gt; and many more commands are already in the language. So what exactly Pig solves different than relational database is its applicability to “big data” where it can crunch large files with ease and it does not need a structured data. Contrarily, Pig could be used for ETL(Extraction Transformation Load) tasks naturally as it can handle unstructured data. It is one of the reasons why it exists to tell the truth.&lt;br /&gt;
But let’s ask the fundamental question: &lt;strong&gt;Why does data analysis matter&lt;/strong&gt; ?&lt;/p&gt;
&lt;h3 id=&quot;data-analysis-matters&quot;&gt;Data Analysis Matters&lt;/h3&gt;
&lt;p&gt;Data analysis matters because as &lt;a href=&quot;http://infolab.stanford.edu/~usriv/papers/pig-latin.pdf&quot;&gt;original paper&lt;/a&gt; very good puts it:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Data analysis is “inner loop” of product innovation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Companies which have data and “big data” want to automate some of their processes, they want to make better products for their users, want to create new products and platforms. If you do not happen to be Steve Jobs or someone who has natural insights of what users and consumers want from the product or see new features, then you are dependent on data. Feedback of users, their usage, log files of the website and metrics are all things that make you run faster. They are not what you run with(it is the product itself) but how you run faster. (So much for the analogy)&lt;/p&gt;
&lt;p&gt;Pig paper also introduces the basic motivation for Pig why it is useful and how does it fit into the analytics and data processing in Hadoop. Moreover, as you read the paper you realize that the processing pipeline is actually Directed Acyclic Graph and paper goes a little more in depth in theoretical aspects of Pig(the programming language).&lt;/p&gt;
&lt;p&gt;So, what does Pig bring to the table and what it is missing?&lt;/p&gt;
&lt;h3 id=&quot;advantages&quot;&gt;Advantages&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Decrease in development time. This is the biggest advantage especially considering vanilla map-reduce jobs’ complexity, time-spent and maintenance of the programs.&lt;/li&gt;
&lt;li&gt;Learning curve is not steep, anyone who does not know how to write vanilla map-reduce or SQL for that matter could pick up and can write map-reduce jobs; not easy to master, though.&lt;/li&gt;
&lt;li&gt;Procedural, not declarative unlike SQL, so easier to follow the commands and provides better expressiveness in the transformation of data every step. Comparing to vanilla map-reduce, it is much more like an english language. It is concise and unlike Java but more like Python.&lt;/li&gt;
&lt;li&gt;I really liked the idea of dataflow where everything is about data even though we sacrifice control structures like for loop or if structures. This enforces the developer to think about the data but nothing else. In Python or Java, you create the control structures(for loop and ifs) and get the data transformation as a side effect. In here, data and because of data, data transformation is a first class citizen. Without data, you cannot create for loops, you need to always transform and manipulate data. But if you are not transforming data, what are you doing in the very first place?&lt;/li&gt;
&lt;li&gt;Since it is procedural, you could control of the execution of every step. If you want to write your own UDF(User Defined Function) and inject in one specific part in the pipeline, it is straightforward.&lt;/li&gt;
&lt;li&gt;Speaking of UDFs, you could write your UDFs in Python thanks to Jython. How awesome is that!&lt;/li&gt;
&lt;li&gt;Lazy evaluation: unless you do not produce an output file or does not output any message, it does not get evaluated. This has an advantage in the logical plan, it could optimize the program beginning to end and optimizer could produce an efficient plan to execute.&lt;/li&gt;
&lt;li&gt;Enjoys everything that Hadoop offers, parallelization, fault-tolerancy with many relational database features.&lt;/li&gt;
&lt;li&gt;It is quite effective for unstructured and messy large datasets. Actually, Pig is one of the best tool to make the large unstructured data to structured.&lt;/li&gt;
&lt;li&gt;You have UDFs which you want to parallellize and utilize for large amounts of data, then you are in luck. Use Pig as a base pipeline where it does the hard work and you just apply your UDF in the step that you want.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;disadvantages&quot;&gt;Disadvantages&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Especially the errors that Pig produces due to UDFS(Python) are not helpful at all. When something goes wrong, it just gives exec error in udf even if problem is related to syntax or type error, let alone a logical one. This is a big one. At least, as a user, I should get different error messages when I have a syntax error, type error or a runtime error.&lt;/li&gt;
&lt;li&gt;Not mature. Even if it has been around for quite some time, it is still in the development. (only recently they introduced a native datetime structure which is quite fundamental for a language like Pig especially considering how an important component of datetime for time-series data.&lt;/li&gt;
&lt;li&gt;Support: Stackoverflow and Google generally does not lead good solutions for the problems.&lt;/li&gt;
&lt;li&gt;Data Schema is not enforced explicitly but implicitly. I think this is big one, too. The debugging of pig scripts in my experience is %90 of time schema and since it does not enforce an explicit schema, sometimes one data structure goes bytearray, which is a “raw” data type and unless you coerce the fields even the strings, they turn bytearray without notice. This may propagate for other steps of the data processing.&lt;/li&gt;
&lt;li&gt;Minor one: There is not a good ide or plugin for Vim which provides more functionality than syntax completion to write the pig scripts.&lt;/li&gt;
&lt;li&gt;The commands are not executed unless either you dump or store an intermediate or final result. This increases the iteration between debug and resolving the issue.&lt;/li&gt;
&lt;li&gt;Hive and Pig are not the same thing and the things that Pig does quite well Hive may not and vice versa. However, someone who knows SQL could write Hive queries(most of SQL queries do already work in Hive) where she cannot do that in Pig. She needs to learn Pig syntax.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;some-pointers&quot;&gt;Some Pointers&lt;/h3&gt;
&lt;p&gt;If you want to do apply some statistics to your dataset(who does not nowadays in order to get good analytics), then you should check out &lt;a href=&quot;http://datafu.incubator.apache.org/&quot;&gt;DataFu&lt;/a&gt;. Originally DataFu began in Linkedin but now it is incubator Apache project, has a lot of good tools for statistics and utility UDFs in general. Last month, Netflix released an interesting project named &lt;a href=&quot;http://techblog.netflix.com/2014/01/introducing-pigpen-map-reduce-for.html&quot;&gt;PigPen&lt;/a&gt; which aims to bring Clojure awesomeness to write Pig jobs. It is an open source project, do not forget to check out the &lt;a href=&quot;https://github.com/Netflix/PigPen&quot;&gt;source code&lt;/a&gt;. I have not had chance to use it but functional programming paradigm fits quite naturally to &lt;strong&gt;pipeline&lt;/strong&gt; processes, so I expect it to be quite successful.(apart from Clojure’s own awesomeness)&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</content>
  </entry>
  <entry xml:base="https://bugra.github.io/">
    <title type="text">Cultural Data Project Part 2</title>
    <id>https://bugra.github.io/posts/2014/2/4/cdp-part-2</id>
    <updated>2014-02-04T00:00:00Z</updated>
    <published>2014-02-04T00:00:00Z</published>
    <link href="https://bugra.github.io/posts/2014/2/4/cdp-part-2" />
    <author>
      <name>Bugra Akyildiz</name>
    </author>
    <content type="html">&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;
  &lt;title&gt;-&lt;/title&gt;
  &lt;style&gt;
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
  &lt;/style&gt;
  &lt;!--[if lt IE 9]&gt;
    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;
  &lt;![endif]--&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;/work/notes/2014-02-01/cultural-data-project-part-1/&quot;&gt;First Part&lt;/a&gt; shows some basic statistics on &lt;a href=&quot;http://www.culturaldata.org/&quot;&gt;Cultural Data Project&lt;/a&gt;. In order to get a better insight how do these companies make their money and different ways to monetize their services, I looked at the correlation of their revenue with other metrics. This could be quite important if the companies knew which type of marketing channels matter more for generating revenue, they could both allocate their efforts and also spendings more efficiently to increase their revenue and hopefully their profits.&lt;/p&gt;
&lt;h3 id=&quot;advertising-vs.-revenue&quot;&gt;Advertising vs. Revenue&lt;/h3&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2014/2/4/total_advertising_total_revenue_correlation.png&quot; title=&quot;Advertising vs. Revenue&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Advertising vs. Revenue&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;As you could see from the above graph, there is a correlation between advertising and revenue. However, there are a lot of data points that have zero for advertising. This could be due to organizations do not spend &lt;strong&gt;any&lt;/strong&gt; money for advertisement or incomple data. The latter seems more reasonable especially when we consider the values close to zero are not present in the dataset. This shows a strong correlation if we exclude the incomple data points. Let’s look at the correlation more closely, like doing a linear regression.&lt;/p&gt;
&lt;h3 id=&quot;linear-regression-on-advertising-vs.-revenue&quot;&gt;Linear Regression on Advertising vs. Revenue&lt;/h3&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2014/2/4/total_advertising_total_revenue_correlation.png&quot; title=&quot;Linear Regression for Advertising and Total Revenue&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Linear Regression for Advertising and Total Revenue&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Now, that is much better. We could see the correlation much better now where the correlation coefficient is Pearson correlation coefficient. But data have more than total revenue; earned revenue and contributed revenue. Earned revenue suggests an income of selling good and services of the organization where the contributed revenue is how much an organization collects money from contributors. Let’s see first earned revenue:&lt;/p&gt;
&lt;h3 id=&quot;linear-regression-on-advertising-vs.-earned-revenue&quot;&gt;Linear Regression on Advertising vs. Earned Revenue&lt;/h3&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2014/2/4/total_advertising_total_earned_revenue_correlation.png&quot; title=&quot;Linear Regression on advertising and earned revenue&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Linear Regression on advertising and earned revenue&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;linear-regression-on-advertising-vs.-contributed-revenue&quot;&gt;Linear Regression on Advertising vs. Contributed Revenue&lt;/h3&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2014/2/4/total_advertising_total_contributed_revenue_correlation.png&quot; title=&quot;Web Income mean grouped by Institution&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Web Income mean grouped by Institution&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;To my surprise, the correlation between advertising and contributed revenue is actually higher than earned revenue. Does this imply advertising attracts more contributor? Maybe, but not necessarily. This is most probably due to most of the organizations are highly dependent on the contributions as their earned revenues are quite modest which could be seen from the graphs above.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</content>
  </entry>
  <entry xml:base="https://bugra.github.io/">
    <title type="text">PyData Silicon Valley 2014</title>
    <id>https://bugra.github.io/posts/2014/5/12/pydata-silicon-valley-2014</id>
    <updated>2014-05-12T00:00:00Z</updated>
    <published>2014-05-12T00:00:00Z</published>
    <link href="https://bugra.github.io/posts/2014/5/12/pydata-silicon-valley-2014" />
    <author>
      <name>Bugra Akyildiz</name>
    </author>
    <content type="html">&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;
  &lt;title&gt;-&lt;/title&gt;
  &lt;style&gt;
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
  &lt;/style&gt;
  &lt;!--[if lt IE 9]&gt;
    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;
  &lt;![endif]--&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;figure&gt;
&lt;img src=&quot;http://i.imgur.com/tInmSM1.png&quot; title=&quot;PyData&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Pydata&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;After every Python-related event, I keep telling myself that other language people have &lt;strong&gt;no idea&lt;/strong&gt; what they are missing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Yes, we have GIL(Global Interpreter Lock), yes unicode is painful especially if you are doing a lot text-related stuff, yes Python is slow, yes static typing may prevent most of the bugs I (people) have, yet Python community is increasing day by day. And last week, PyData SV 2014 was no exception.&lt;/p&gt;
&lt;p&gt;I attended all three days(tutorials + conferences), maybe not surprisingly most talks were about tooling and data infrastructure except tutorials. Even if web development in Python will decrease over time(we have no reason to believe so), Python seems to be a big player in data in future. Even in “Big Data”, people who want to write Python could get away with writing Python thanks to a bunch of ports for Python. This is also a huge gain for data processing in Python in general.&lt;/p&gt;
&lt;p&gt;In Sunday talks, most of the talks especially before noon is about how to speed up the Python. Most people do not want to write Javascript but they needed it in the browser, so they came up with a bunch of languages that compiles to Javascript; Typescript, Coffeescript, Dart, Clojurescript … For Python, most people want to write Python, and they came up with a bunch of interesting things to speed up Python; static compilers, JIT, numba, parakeet and so on. However, I think it is time to confess also one of the disadvantage of Python that it is slow. Otherwise, people &lt;strong&gt;should not&lt;/strong&gt; come up these solutions to overcome its limitation. Similarly, if Javascript were a nice language, people should not invent all those languages in order not to write Javascript to write Javascript.(this sentence makes sense when you read twice) Before provacating a language war which definitely Python will win, let’s look at the tutorials and conferences notes that I took.&lt;/p&gt;
&lt;h2 id=&quot;friday-tutorials&quot;&gt;Friday (Tutorials)&lt;/h2&gt;
&lt;h3 id=&quot;ipython-2.0&quot;&gt;IPython 2.0&lt;/h3&gt;
&lt;p&gt;Presenters: &lt;strong&gt;Brian Granger&lt;/strong&gt; and &lt;strong&gt;Jonathan Frederic&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;They introduced IPython and IPython notebook with a beginner level and then showed what changed 2.0 and whatnot. I was using IPython 1.0 prior to this event and now I am using IPython 2.0 which brings the modal structure to the table. If you are a Vim guy like me, that is just perfect. &lt;code&gt;Edit&lt;/code&gt; and &lt;code&gt;normal&lt;/code&gt; mode is very similar to Vim. Directories are also easy to change in the ipython notebook. If the modal environment is the first thing that they changed in IPython 2.0, the second thing is the interactivity. &lt;code&gt;@interactive&lt;/code&gt; and &lt;code&gt;@interact&lt;/code&gt; decorators provide an interactive environment on top of Ipython notebook.&lt;/p&gt;
&lt;p&gt;Some of the things I did not like: adding cell on top of some cell is only done shortcut(&lt;code&gt;a&lt;/code&gt; where you are not in edit mode), you cannot do with UI. This is not a disadvantage per se for people who are already using notebook, but for beginners with this modal structure, I would expect some people have quite difficult time to figure out &lt;em&gt;hows&lt;/em&gt;. Considering Python 2 to 3, I wonder Python sacrifices easy entry in order to empower current users.(Some people end up learning Ruby because of this incompatibility problem).&lt;br /&gt;
On my point of view, if I did not attend this tutorial, my switch to Ipython notebook may get delayed even further. Now, quite happily using the most of the shortcuts, notebook feels quite like Vim. (if only the shortcuts were the same!, we should have &lt;code&gt;:w&lt;/code&gt; or at least &lt;code&gt;/&lt;/code&gt; seriously)&lt;/p&gt;
&lt;h3 id=&quot;ipython-notebook&quot;&gt;Ipython Notebook&lt;/h3&gt;
&lt;p&gt;If data science has anything to with other than software engineering, it is IPython notebook. Software engineers live on raw code whereas data scientists, social scientists and experimental people need richer representations to understand their experiments, conclusions and what data tell in general. Software engineers can get away with code and comments whereas other people need paragraphs, images, audios, videos and graphs for their experiments. They need to also communicate their findings to other people(not necessarily technical people). This gap is filled with Ipython notebook quite successfully. It is so successful that most of the presenters(either in tutorial or talks) opened an ipython notebook or references an ipython notebook in their talks in the conference. If an ecosystem needs a great environment to live, data people in Python have such environment thanks to IPython and notebook.&lt;/p&gt;
&lt;h3 id=&quot;gradient-boosted-regression-trees-in-scikit-learn&quot;&gt;Gradient Boosted Regression Trees in scikit-learn&lt;/h3&gt;
&lt;p&gt;Presenter: &lt;strong&gt;Peter Prettenhofer&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Peter showed how awesome gradient boosted regression trees are. Apart from their base function(piecewise functions) which I did not like one bit, they have quite nice properties such as robust to noise, handle categorical and scale different features with ease. His &lt;a href=&quot;http://nbviewer.ipython.org/github/pprett/pydata-gbrt-tutorial/blob/master/gbrt-tutorial.ipynb&quot;&gt;IPython notebook&lt;/a&gt; covers not just regression trees but also low bias-high variance, high bias-low variance (deviance plot in the notebook) and parameter search to optimize the parameters. They are all in Scikit-learn. I took(read stole) one of his ideas around when a robust nonparametric tries to learn a function over the observations, one does not need to worry about the outliers and noise. This idea could be exploited in outlier detection as well. Instead of looking the problem as outlier detection, we could designa robust regression model and exclude the ones(outliers) that model gives low probability. I used Gaussian processes in this &lt;a href=&quot;http://bugra.github.io/work/notes/2014-05-11/robust-regression-and-outlier-detection-via-gaussian-processes/&quot;&gt;post&lt;/a&gt; to do so. He put up all of the tutorial material(slides+notebook) in &lt;a href=&quot;https://github.com/pprett/pydata-gbrt-tutorial&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;designing-and-deploying-online-experiments-with-planout&quot;&gt;Designing and Deploying Online Experiments with PlanOut&lt;/h3&gt;
&lt;p&gt;Presenter: &lt;strong&gt;Eytan Bakshy&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Recently, Facebook opensourced their online experiment framework &lt;a href=&quot;http://facebook.github.io/planout/&quot;&gt;&lt;em&gt;Planout&lt;/em&gt;&lt;/a&gt;. If you read the &lt;a href=&quot;http://hci.stanford.edu/publications/2014/planout/planout-www2014.pdf&quot;&gt;paper&lt;/a&gt; behind of the framework, this is a response of many of the shortcomings of the online experiments.&lt;/p&gt;
&lt;p&gt;Separation of the experiment from production code is the biggest advantage and also firing up different experiments in different timeline for different “segments” seems quite nice. With Python syntax and what it provides out of the box, it seemed quite easy to use. But need to experiment a little bit to see its advantages. Some of the features(GUI) are missing in the open-source release where paper shows also some implementation detail around that.&lt;/p&gt;
&lt;p&gt;He put up all of the ipython notebooks in &lt;a href=&quot;https://github.com/facebook/planout/tree/master/contrib/pydata14_tutorial&quot;&gt;here&lt;/a&gt;, if you get the source code of the Planout, you would have this material as well.&lt;/p&gt;
&lt;h3 id=&quot;know-thy-neighbor-an-introduction-to-scikit-learn-and-k-nn&quot;&gt;Know Thy Neighbor: An Introduction to Scikit-learn and K-NN&lt;/h3&gt;
&lt;p&gt;Presenter: &lt;strong&gt;Portia Burton&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;She gave an overview of what machine learning is and introduced Scikit-Learn. She also gave an overview of K Nearest Neighbor method and showed a demonstration on the Iris flower data set.&lt;/p&gt;
&lt;p&gt;She put up all of the material(slides+notebooks) &lt;a href=&quot;https://github.com/pkafei/Know_Thy_Neighbor&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;k-means-clustering-with-scikit-learn&quot;&gt;K-means Clustering with Scikit-Learn&lt;/h3&gt;
&lt;p&gt;Presenter: &lt;strong&gt;Sarah Guido&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;She put a strong emphasis on parameter selection on K-Means as parameter selection for unsupervised learning algorithms are ill-defined. She introduced &lt;a href=&quot;http://scikit-learn.org/stable/modules/clustering.html#silhouette-coefficient&quot;&gt;Silhouette Score&lt;/a&gt; which I did not know before. The score is somehow related to both intra-variance and inter-variance cluster. She put up &lt;a href=&quot;https://github.com/sarguido/k-means-clustering&quot;&gt;IPython notebook&lt;/a&gt; and &lt;a href=&quot;http://www.slideshare.net/SarahGuido/kmeans-clustering-with-scikitlearn&quot;&gt;slides&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;These are the ones that I attended.&lt;/p&gt;
&lt;h3 id=&quot;ggplot&quot;&gt;ggplot&lt;/h3&gt;
&lt;p&gt;I really also wanted to attend ggplot for Python but I attended Planout instead. However, yhat did an awesome job to put all of the notebooks in the &lt;a href=&quot;http://blog.yhathq.com/posts/facebook-ggplot-tutorial.html&quot;&gt;web&lt;/a&gt; and also to &lt;a href=&quot;https://github.com/glamp/ggplot-tutorial/&quot;&gt;github&lt;/a&gt;. Notebooks are quite amazing. They are not just for &lt;strong&gt;ggplot&lt;/strong&gt; per se but for general workflow for data analysis with an emphasis on explaratory data analysis. They are also putting really nice ipython notebooks on their blog, I highly recommend following their blog if that type of data analysis seems interesting to you.&lt;/p&gt;
&lt;p&gt;Now, the talks. First, on saturday talks, I was more sane and motivated. That motivation somehow decreased on Sunday. So Sunday talks, it is not you, it is me. Let’s get started.&lt;/p&gt;
&lt;h2 id=&quot;saturday-talks&quot;&gt;Saturday Talks&lt;/h2&gt;
&lt;h3 id=&quot;why-python-is-awesome-for-any-scale-data&quot;&gt;Why Python is awesome for any scale data?&lt;/h3&gt;
&lt;p&gt;Presenter: &lt;strong&gt;Burc Alpat&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This talk was about how and why Python should be used in the data processing environments and how Facebook adopts the Python as one of their main language. He also gave various pointers to other talks. Mainly focusing on the strengths of Python and whenever it feels it is not the best option, use something else and try to connect with Python.&lt;/p&gt;
&lt;h3 id=&quot;why-python-for-machine-learning&quot;&gt;Why Python for Machine Learning?&lt;/h3&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;You want to get results quickly&lt;/li&gt;
&lt;li&gt;You will need lots of functionality&lt;/li&gt;
&lt;li&gt;C++&lt;/li&gt;
&lt;li&gt;DSL&lt;/li&gt;
&lt;li&gt;You cannot do it all by yourself.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;some-pointers&quot;&gt;Some pointers&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://vimeo.com/63269736&quot;&gt;Scaling Machine Learning in Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/ogrisel/scaling-machine-learning-in-python&quot;&gt;Scaling Machine Learning in Pyton Slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/facebook/sparts&quot;&gt;Python Sparts by Facebook using Thrift&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://prestodb.io/&quot;&gt;PrestoDB by Facebook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dropbox/PyHive&quot;&gt;PyHive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rocksdb.org/&quot;&gt;RocksDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://code.google.com/p/leveldb/&quot;&gt;Leveldb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/facebook/tornado&quot;&gt;Tornado from Facebook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that Dataswarm is not open source.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;cc-and-language-interoperability&quot;&gt;C/C++ and language interoperability&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.boost.org/doc/libs/1_55_0/libs/python/doc/&quot;&gt;Boost.Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://oicweave.org/&quot;&gt;Weave&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.swig.org/&quot;&gt;Swig&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;build-tools&quot;&gt;Build Tools&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://facebook.github.io/buck/&quot;&gt;Buck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.facebook.com/notes/facebook-engineering/buck-how-we-build-android-apps-at-facebook/10151454619998920&quot;&gt;Buck in Android&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;jdependency-managements&quot;&gt;jDependency Managements&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://pantsbuild.github.io/howto_develop.html&quot;&gt;Pants from Twitter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are mostly dependency management systems where if you do not want to deal with dependency hell, you may want to use some sort of dependency management system.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://pantsbuild.github.io/index.html&quot;&gt;Pants&lt;/a&gt; seems quite useful. If you are doing interoperation with C/C++, get a build system instead of depending on the &lt;code&gt;venv&lt;/code&gt; and &lt;code&gt;pip&lt;/code&gt; which seems not working quite well with other languages.&lt;/p&gt;
&lt;h3 id=&quot;dsl&quot;&gt;DSL&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;DSL’s can be useful for speaking different languages.&lt;/li&gt;
&lt;li&gt;Dataswarm is a dependency graph description language.&lt;/li&gt;
&lt;li&gt;Python is good for DSL’s as well.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;a-full-stack-approach-to-data-visualization-terabytes-and-beyond-at-facebook&quot;&gt;A Full Stack Approach to Data Visualization: Terabytes (and Beyond) at Facebook&lt;/h3&gt;
&lt;p&gt;Presenter: &lt;strong&gt;Jason Sundram&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This talk is a purely tooling talk where Jason introduced different visualization libraries and told how Facebook is using visualization for data. Their setup is quite interesting, they are using Tornado for framework and a bunch of different js libraries based on D3 that reveals multi aspects of data they have.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fresh Data&lt;/li&gt;
&lt;li&gt;More pixels&lt;/li&gt;
&lt;li&gt;Make the data smaller&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;crossfilter&quot;&gt;CrossFilter&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://square.github.io/crossfilter/&quot;&gt;CrossFilter&lt;/a&gt; in browsing D3 based visualization library.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.rusty.io/2012/09/17/crossfilter-tutorial/&quot;&gt;CrossFilter Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bl.ocks.org/milroc/raw/6316349/#0&quot;&gt;CrossFilter Slides Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;in-memory-database&quot;&gt;In memory database&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://db.disi.unitn.eu/pages/VLDBProgram/pdf/industry/p767-wiener.pdf&quot;&gt;Scuba Paper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;some-other-pointers&quot;&gt;Some other Pointers&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Tornado + gzip + csv&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://square.github.io/cubism/&quot;&gt;Cubism.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bost.ocks.org/mike/cubism/intro/#0&quot;&gt;Cubism.js Slides by Mike Bostock&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Different touchpoints require asynchronous api calls. Tornado provides asynchronicity out of the box, very convenient.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://nickqizhu.github.io/dc.js/&quot;&gt;DC.js&lt;/a&gt; is a multidimensional javascript library.&lt;/li&gt;
&lt;li&gt;These tools are mostly for multidimensional aspects of the data. Not necessarily a specific part of it, but rather for different aspects of it.&lt;/li&gt;
&lt;li&gt;For GeoVisualization: &lt;a href=&quot;http://leafletjs.com/&quot;&gt;Leaflet.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://zeromq.org/&quot;&gt;ZeroMQ&lt;/a&gt; for queing.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Thrift usage is all of the talks in Facebook, should be very important for internal api talks between different services. Its polyglot nature should provide a very nice common structure where different languages talk to between each other.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;
&lt;p&gt;To make a successful “big data” visualization:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Big =&amp;gt; small&lt;/li&gt;
&lt;li&gt;Real-time&lt;/li&gt;
&lt;li&gt;More Pixels&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;dark-data-a-data-scientists-exploration-of-the-unknown&quot;&gt;Dark Data: A Data Scientist’s Exploration of the Unknown&lt;/h3&gt;
&lt;p&gt;Presenter: &lt;strong&gt;Rob Witoff&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This was one of those talks how we use Pyhon. Ipython notebook unsurprisingly all over the talk. They built a private notebook viewer where people could share their notebooks across NASA, sounds super useful.(Do first that SQL query, then process in such a way, then run the algorithm in the x directory, sounds familiar? Notebook solves that problem)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Even NASA depends on AWS for their data infrastructure. Maybe, this is not &lt;em&gt;that&lt;/em&gt; surprising.&lt;/li&gt;
&lt;li&gt;Also the sharing data and visualizing data to understand is another aspect of his presentation.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;visualization-tools-and-pointers&quot;&gt;Visualization Tools and Pointers&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/wrobstory/vincent&quot;&gt;Vincent&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://nbviewer.ipython.org/github/wrobstory/vincent/blob/master/examples/Vincent_Examples.ipynb&quot;&gt;Vincent Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;They also use Rickshaw for some of other visualizations.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;summary-1&quot;&gt;Summary&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Liberate your dark data&lt;/li&gt;
&lt;li&gt;Enable your engineers&lt;/li&gt;
&lt;li&gt;Grow data scientists&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;If we cannot learn all of our data, we cannot imagine what we know beyond of our imagination.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;datapad-python-powered-business-intelligence&quot;&gt;DataPad: Python-powered Business Intelligence&lt;/h3&gt;
&lt;p&gt;Presenter: &lt;strong&gt;Wes McKinney&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;He mainly talked about their product Datapad, browser based analytics tool. He also talked about some of the shortcomings of current data analysis tools.&lt;/p&gt;
&lt;h3 id=&quot;how-to-speed-things-up&quot;&gt;How to speed things up?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Badger analytics engine. (it is not open source, though).&lt;/li&gt;
&lt;li&gt;Purpose-built in-memory analytical query processor&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;what-they-are-using&quot;&gt;What they are using?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Query routing&lt;/li&gt;
&lt;li&gt;Load balancing&lt;/li&gt;
&lt;li&gt;comms: gevent + websockets&lt;/li&gt;
&lt;li&gt;comressed tabular data store&lt;/li&gt;
&lt;li&gt;external data source connectors&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;sentiment-classification-using-scikit-learn&quot;&gt;Sentiment Classification Using scikit-learn&lt;/h3&gt;
&lt;p&gt;Presenter: &lt;strong&gt;Ryan Rosario&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In this talk Ryan gave an overview what sentiment classification means, gave pointers to the state of art which is unsurprisingly a recurrent neural network architecture (so-called “deep learning”). He did not go into this detail, in Facebook, they used Naive Bayes using the implementation of Scikit-learn. Their approach is gather a lot of labeled data, using bag of words as features and chi-squared feature selection to choose best features and Naive Bayes for classifier, they improved their sentiment classification on what they had previously. He also talked a little bit about their data infrastructure Dataswarm.&lt;/p&gt;
&lt;h3 id=&quot;sentiment&quot;&gt;Sentiment&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Some information around emotional state of the user.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;lexicon-based-approaches&quot;&gt;Lexicon Based Approaches&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Wordnet&lt;/li&gt;
&lt;li&gt;Lexinet&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;machine-learning-based-approaches&quot;&gt;Machine Learning Based Approaches&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;SVM and Naive Bayes are most frequenly used classifiers.&lt;/li&gt;
&lt;li&gt;Lexical features such as quantifiers and negtion&lt;/li&gt;
&lt;li&gt;Positive to negative words converted to a statistical measure.&lt;/li&gt;
&lt;li&gt;Sarcasm and humor cannot be captured from the beginning&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;deep-learning-state-of-the-art&quot;&gt;Deep Learning (State of the Art)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Stanford Stentiment Treebank&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.socher.org/index.php/DeepLearningTutorial/DeepLearningTutorial&quot;&gt;Deep Learning Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://nlp.stanford.edu/~socherr/EMNLP2013_RNTN.pdf&quot;&gt;Original Paper for Sentiment Analysis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Recursive Neural Tensor Network (RNTN). =&amp;gt; Recursive Neural Network&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;sentiwordnet-adaptation&quot;&gt;Sentiwordnet Adaptation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://sentiwordnet.isti.cnr.it/&quot;&gt;Opinion mining&lt;/a&gt; =&amp;gt; looks at the sentences in the form of positivity, negativity and objectivity
&lt;ul&gt;
&lt;li&gt;Lexical analyiss is very slow, Part of Speech Taggin is slow&lt;/li&gt;
&lt;li&gt;Not very accurate either&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;feature-selection&quot;&gt;Feature Selection&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Chi-Squared Feature selection, for version 1, they used 1000s and then extended to millions.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Roc Curve to visualize the true-positive and false-positive system&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;python-ecosystem&quot;&gt;Python Ecosystem&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Dataswarm, Presto and Hive&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;system-architecture&quot;&gt;System Architecture&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Dataswarm provides the training/test set divide&lt;/li&gt;
&lt;li&gt;Feature selection, training, model, testing, then store the data MySQL or dashboard. Pretty straightforward workflow.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;summary-2&quot;&gt;Summary&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;With a ton of self-labeled data and basic algorithm overperforms lexical parsing.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;using-python-to-find-a-bayesian-network-describing-your-data&quot;&gt;Using Python to Find a Bayesian Network Describing Your Data&lt;/h3&gt;
&lt;p&gt;Presenter: &lt;strong&gt;Bartek Wilczynski&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;He introduced &lt;a href=&quot;https://pypi.python.org/pypi/BNfinder/2.0.4&quot;&gt;Bayesian Network Module in Python&lt;/a&gt; and mainly talked about Bayesian networks. The module seems quite easy to use from the command line as well, but for most of the libraries, need to experiment.&lt;/p&gt;
&lt;h3 id=&quot;what-is-a-bayesian-network&quot;&gt;What is a Bayesian Network?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;DAG =&amp;gt; Directed Acyclic Graph, without cycles&lt;/li&gt;
&lt;li&gt;Nodes for representing random variables&lt;/li&gt;
&lt;li&gt;Edges for representing dependencies&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;how-can-we-find-the-best-bayesian-network&quot;&gt;How can we find the Best Bayesian Network?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Bayesian statistics (BDe)&lt;/li&gt;
&lt;li&gt;Information theoretic (MDL)&lt;/li&gt;
&lt;li&gt;Hypothesis testing&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;dynamic-bayesian-network&quot;&gt;Dynamic Bayesian Network&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Describe also temporal dependencies&lt;/li&gt;
&lt;li&gt;Causal links only go forward in time&lt;/li&gt;
&lt;li&gt;The breaks the problem of cycles as we now have two versions “before” and “after” variables&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bioputer.mimuw.edu.pl/software/bnf/methods.php&quot;&gt;Methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bioputer.mimuw.edu.pl/software/bnf/&quot;&gt;Homepage for the Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://cytoscape.github.io/cytoscape.js/index.html&quot;&gt;Visualization Library for Graph Theory and Analysis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;up-and-down-the-python-data-and-web-visualization&quot;&gt;Up and Down the Python Data and Web visualization&lt;/h3&gt;
&lt;p&gt;Presenter: &lt;strong&gt;Rob Story&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The most interesting IPython notebook is in this conference, hands down. He introduced a comprehensive comparison of visualization libraries in Python. See his notebook in below. Especially, mpld3 seems quite interesting. However, no matter how Pythonistas try to make it work, if visualization depends on browser or more importantly interactivity, Javascript is nearly only solution. So, in the presentation, I was thinking maybe we should not try so hard to make Python to be Javascript and made peace with Javascript.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://wrobstory.github.io/&quot;&gt;His Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/wrobstory/pydatasv2014&quot;&gt;Presentation Material&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://nbviewer.ipython.org/gist/wrobstory/1eb8cb704a52d18b9ee8/Up%20and%20Down%20PyData%202014.ipynb&quot;&gt;Notebook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;seaborn&quot;&gt;Seaborn&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Jointplot is very good if you want to visualize two variable distribution.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;interactivity&quot;&gt;Interactivity&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;If you want to create an interactive visualization, use &lt;code&gt;@interactive&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Especially, switching to prior distributions in the MCMC models, this is gem.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;other-pointer&quot;&gt;Other Pointer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Leaflet is for all of the geospatial visualization, Jason told the same library as well. Should be the &lt;em&gt;lingua franca&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;data-analysis-with-scidb-py&quot;&gt;Data Analysis with SciDB-Py&lt;/h3&gt;
&lt;p&gt;Presenter: &lt;strong&gt;Chris Beaumont&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;He talked about SciDB which is built-in support for matrix operations in database. SciDB seems interesting. Think about numpy arrays but in harddisk and you could manipulate however you like. Since you can do linear algebra operations, it seems to be a perfect fit for big data as its memory usage is small. It does not have to load the whole matrix into the memory.&lt;/p&gt;
&lt;h3 id=&quot;some-notes&quot;&gt;Some notes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;There is no Mac OSX support, yet.&lt;/li&gt;
&lt;li&gt;You could write numpy expressions to the database except its syntax is a little different&lt;/li&gt;
&lt;li&gt;Able to display the data directly from db is quite nice.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://github.com/Paradigm4&quot;&gt;Github Repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Paradigm4/SciDB-py&quot;&gt;SciDB-Py&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;sunday-talks&quot;&gt;Sunday Talks&lt;/h2&gt;
&lt;h3 id=&quot;speed-without-drag&quot;&gt;Speed without drag&lt;/h3&gt;
&lt;p&gt;Presenter: &lt;strong&gt;Saul Diez-Guerra&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;He introduced a number of libraries(static compilers, JIT, LLVMs) to speed up the Python. We need to first of course write good code and then try to compensate the inherent slowness of Python with those libraries.&lt;/p&gt;
&lt;h3 id=&quot;pointer&quot;&gt;Pointer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/diezguerra/pydata-sv-speed-talk&quot;&gt;Slides&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;pythran-static-compiler-for-high-performance&quot;&gt;Pythran: Static Compiler for High Performance&lt;/h3&gt;
&lt;p&gt;Presenter: &lt;strong&gt;Mehdi Amini&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This presentation was also about how to speed up the Python. He introduced his library and gave promising benchmarks and showed some under the hood stuff to explain how they speed up Python. Since the coverage is quite large(except introspection and couple of small number of modules), they could improve the execution speed.&lt;/p&gt;
&lt;h3 id=&quot;data-science-at-berkeley&quot;&gt;Data Science at Berkeley&lt;/h3&gt;
&lt;p&gt;Presenter: &lt;strong&gt;Joshua Bloom&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Core principles&lt;/li&gt;
&lt;li&gt;Academic pursuit or a skillset to be trained? =&amp;gt; nice questions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nice headers (Not necessarily orthogonal to each other but rather different aspects of tackling a problem):&lt;/p&gt;
&lt;h3 id=&quot;different-approaches&quot;&gt;Different Approaches&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Data Driven or Theory Driven&lt;/li&gt;
&lt;li&gt;Bayesian vs Frequentist&lt;/li&gt;
&lt;li&gt;Parametric vs Nonparametric&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;They used &lt;code&gt;scipy.sparse&lt;/code&gt; package to speed the some of their computation up. They also used &lt;code&gt;PyMC&lt;/code&gt; for their research.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;pointers&quot;&gt;Pointers&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.pythonbootcamp.info/schedule&quot;&gt;Python Bootcamp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://mb3152.github.io/Graph-Growth/&quot;&gt;Bayesian Network For Graphs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://arxiv.org/abs/1008.4686&quot;&gt;Data Analysis Recipes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://arxiv.org/pdf/1008.4686v1.pdf&quot;&gt;Data Analysis Recipes Paper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/davidwhogg/DataAnalysisRecipes&quot;&gt;Data Analysis Recipes Book&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Especiall Data Analysis Recipes paper is great, written in a sarcastic way and harshly criticizes the current/traditional methods in a Bayesian point of view. Need to definitely take a look at the book as well!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;real-time-streams-and-logs-with-storm-and-kafka&quot;&gt;Real-time streams and logs with Storm and Kafka&lt;/h3&gt;
&lt;p&gt;Presenter: &lt;strong&gt;Andrew Montalenti&lt;/strong&gt; and &lt;strong&gt;Keith Bourgoin&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;They talked about how they are parsing logs with Python and introduced a library they wrote (Streamparse) in house. They also explained how they architectured their system with Storm and Kafka.&lt;/p&gt;
&lt;h4 id=&quot;pointers-1&quot;&gt;Pointers&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.parsely.com/slides/logs/notes/&quot;&gt;Logs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.parsely.com/slides/logs/#9&quot;&gt;Slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.parsely.com/code/&quot;&gt;Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.celeryproject.org/&quot;&gt;Distributed Task Queue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://storm.incubator.apache.org/&quot;&gt;Distributed Realtime Computation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://kafka.apache.org/&quot;&gt;Distributed Messaging System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/amontalenti/streams&quot;&gt;Demo Repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Parsely/streamparse&quot;&gt;StreamParse&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;how-to-build-a-sql-based-data-warehouse-for-a-trillion-rows-in-python&quot;&gt;How to build a SQL-based data warehouse for a trillion rows in Python&lt;/h3&gt;
&lt;p&gt;Presenter: &lt;strong&gt;Ville Tuulos&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;He talked about how they built a data warehouse for big data in Python. He also gave some pointers what they are using some of the visualization libraries. Some portion of the talk was about compression and efficiency of the compression using different methods.&lt;/p&gt;
&lt;h3 id=&quot;pointers-2&quot;&gt;Pointers&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://tuulos.github.io/pydata-2014/#/&quot;&gt;Slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Low-latency, in-memory, fully-sql-compliant data warehouse&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/AdRoll/backbone.d3&quot;&gt;Backbone.d3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;They used information theoretic approach to compress the signal.&lt;/li&gt;
&lt;li&gt;Efficient encoding brings the compression. Also, the data is somehow sparse.&lt;/li&gt;
&lt;li&gt;It looks very much like numpy operation(very interesting how it overlaps with SciDB)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://archives.damiendebin.net/zzip/&quot;&gt;Efficient compression library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Run-length encoding&lt;/li&gt;
&lt;li&gt;Probabilistic Data Structures&lt;/li&gt;
&lt;li&gt;Huffman Encoding&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;It seems very interesting to me that the methods that are used for video and image compression could be applicable. Not necessarily multimedia.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;outlier-detection-in-time-series-signals&quot;&gt;Outlier Detection in Time Series Signals&lt;/h3&gt;
&lt;p&gt;I gave this presentation and talked about outlier detection using Median Filtering, Fast Fourier Transform (read Discrete Fourier Transform) and Markov Chain Monte Carlo.&lt;/p&gt;
&lt;h3 id=&quot;pointers-3&quot;&gt;Pointers&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://bit.ly/bugra-pydata-sv-2014&quot;&gt;Presentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/bugra/pydata-sv-2014&quot;&gt;Source of Presentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bit.ly/outlier-fft&quot;&gt;FFT and Median Filtering Blog Post&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bit.ly/outlier-mcmc&quot;&gt;MCMC Blog Post&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;dataswarm&quot;&gt;Dataswarm&lt;/h3&gt;
&lt;p&gt;Presenter: &lt;strong&gt;Mike Starr&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;He talked about Dataswarm framework and how they are using it. Mainly focusing on data infrastructure and communication between services.&lt;/p&gt;
&lt;h3 id=&quot;pipeline&quot;&gt;Pipeline&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Actions&lt;/li&gt;
&lt;li&gt;Event Logging&lt;/li&gt;
&lt;li&gt;Data Pipelines&lt;/li&gt;
&lt;li&gt;Reports / Apps&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;dataswarm-1&quot;&gt;Dataswarm&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Dependency graph description language(similar to &lt;a href=&quot;https://github.com/spotify/luigi&quot;&gt;Luigi&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Dependency between tasks is much concise than Luigi. Luigi is quite verbose comparing to this tpe of dependency description.&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;
</content>
  </entry>
  <entry xml:base="https://bugra.github.io/">
    <title type="text">Mining a VC</title>
    <id>https://bugra.github.io/posts/2015/1/17/mining-a-vc</id>
    <updated>2015-01-17T00:00:00Z</updated>
    <published>2015-01-17T00:00:00Z</published>
    <link href="https://bugra.github.io/posts/2015/1/17/mining-a-vc" />
    <author>
      <name>Bugra Akyildiz</name>
    </author>
    <content type="html">&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;
  &lt;title&gt;-&lt;/title&gt;
  &lt;style&gt;
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
  &lt;/style&gt;
  &lt;!--[if lt IE 9]&gt;
    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;
  &lt;![endif]--&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;Fred Wilson is one of the most popular VCs(rightly so) who is based in NY and he has a really great &lt;a href=&quot;http://avc.com/&quot;&gt;blog&lt;/a&gt;, where he talks about pretty much anything with a focus on startups, venture capital and technology. No surprise here.&lt;/p&gt;
&lt;p&gt;His &lt;a href=&quot;http://avc.com/2003/09/my_first_post/&quot;&gt;first post&lt;/a&gt; dates back to 23rd September 2003. He has been blogging for more than 11 years.&lt;/p&gt;
&lt;h3 id=&quot;how-come&quot;&gt;How come?&lt;/h3&gt;
&lt;p&gt;I have started at &lt;a href=&quot;http://www.axial.net/&quot;&gt;Axial&lt;/a&gt; recently and doing topic modeling to improve our search and recommendations as well as to build some other features that are driven by documents and text.&lt;/p&gt;
&lt;h3 id=&quot;what-gives&quot;&gt;What gives?&lt;/h3&gt;
&lt;p&gt;To see some of the topics over time as his posts are somehow topical and could shed some light on hot industries as he also uses his blog as a reach tool for entrepreneurs. This of course follows their investments as well, if he is writing on a particular industry(bitcoin, mesh networks), chances are either they invested in some technology(bitcoin) or looking for companies(mesh networks) that they wanted to invest.&lt;/p&gt;
&lt;h3 id=&quot;what-does-a-vc-write-anyway&quot;&gt;What does a VC write anyway?&lt;/h3&gt;
&lt;p&gt;Mostly Venture Capital presumably, but also introduces his portfolio companies, tries to raise awareness of new and cool technologies(bitcoin) and talks about his professional and personal life. That being said, there is no quantitative measure which topics he focuses on and how much. By measuring the topic frequency and variation over time, you could get a sense of which topics are actually trending as well. Scroll for that a bit.&lt;/p&gt;
&lt;h3 id=&quot;what-did-you-use&quot;&gt;What did you use?&lt;/h3&gt;
&lt;p&gt;All of his blog posts from start(09, 2003) to 31st December 2014(including). He writes a post per day and occasionally he may repeat the some of his posts (e.g. when he is on vacation), but other than posts should be unique and mostly they are medium-long length articles which is great for topic modeling. Earlier posts have the same date and I filter out the posts so that every date would have only a single post as I do not want to give biases of dates that have more than 1 post. I also filtered out the documents that have no words in it(some of the posts have only images apparently, #tumblrstyle).&lt;/p&gt;
&lt;h3 id=&quot;ok-got-it.-topics-but-what-are-they&quot;&gt;Ok, got it. Topics, but what are they?&lt;/h3&gt;
&lt;p&gt;You could think of topics as specific word groups that are high likely to occur together. The algorithm(LDA) makes plausible and practical assumptions in text, and topics end up being logically plausible word groups that you could get the what the gist of those documents, it may seem like a keyword extraction tool, but not really.&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;Burn Rate: business cash year market bn money revenue financial flow company rate revenue markets stock income balance mm costs interest capital time years pay price post numbers asset&lt;/li&gt;
&lt;li&gt;Venture Capital: venture capital business companies investment money vc investors fund entrepreneur years company market invest firm portfolio investing good early firms funds year entrepreneur deals time partners investor&lt;/li&gt;
&lt;li&gt;Company - Team: company team product companies job people business work startup jobs portfolio building build management person hire culture engineering great make ceo talent customer organization startups employees founder process founders&lt;/li&gt;
&lt;li&gt;News: news times media read post jason york hes jeff internet story wall ny street tom world john piece interesting content good steve great jarvis david techmeme&lt;/li&gt;
&lt;li&gt;Search - Internet: google search yahoo data traffic internet number comscore web mm users audience top services page month microsoft service day googles visits results market blog past share chart year&lt;/li&gt;
&lt;li&gt;Family: gotham gal great kids day family originally uploaded josh back night today park morning photo nyc friends home fredwilson street place ride city jessica west fun year yesterday side&lt;/li&gt;
&lt;li&gt;Social Media: twitter facebook social people service howard friends foursquare tumblr media users lindzon myspace services mr web apps zynga app follow networking top profile network build game tweet&lt;/li&gt;
&lt;li&gt;Internet Regulation: internet patent government industry health rules innovation patents bill companies public care act policy net law issue fcc spectrum healthcare system technology broadband congress access cable startup issues reform&lt;/li&gt;
&lt;li&gt;Music: music radio itunes listen rhapsody ipod lastfm listening audio mp play sonos service digital internet services player song streaming system buy download podcast apple machine file free playlist home&lt;/li&gt;
&lt;li&gt;Ads - Business Models: ad advertising business online model free content media paid revenue service pay etsy money network sell market internet buy customers marketing run cost make networks company adsense tacoda&lt;/li&gt;
&lt;li&gt;Multimedia: video tv radio youtube game boxee watch content hd digital videos show play watching games shows big watched internet channel satellite today player netflix cable media jets night broadcast&lt;/li&gt;
&lt;li&gt;Email: email spam mail emails gmail inbox return send aol reply messaging service path problem reputation list spyware messages message address called delete bad sender account aim priority credit filter&lt;/li&gt;
&lt;li&gt;Politics: bush country obama hes president vote political kerry war iraq debate election world party america politics policy win today democrats plan government state american system clark republican campaign house&lt;/li&gt;
&lt;li&gt;Technology: web services open data internet world companies technology software market business build model network company built big system users platform service networks large important source information interesting post building&lt;/li&gt;
&lt;li&gt;Valuation: company stock price equity deal options financing mm sale investors employees employee option valuation transaction companies term debt common sell buyer public pay bridge founders round business preferred series&lt;/li&gt;
&lt;li&gt;Culture: book read reading books story seth art technology steven tom writing revolution published film society science life written early culture chapter words world write chris digital kindle inspired age&lt;/li&gt;
&lt;li&gt;Company - Management: board company ceo meeting business management meetings boards matt make entrepreneurs companies process vc ceos team work people important advice entrepreneur face members person good time plan investors&lt;/li&gt;
&lt;li&gt;NYC - Community: nyc school event students education year class community talk project tech program donors choose women public pm schools startup high kickstarter meetup projects week heres entrepreneurs code learning group&lt;/li&gt;
&lt;li&gt;Live Music - Event: record song great music songs love show called band week records rock favorite live listen top year night list heard podcast mp album bob put listening guitar played version&lt;/li&gt;
&lt;li&gt;Traveling: nyc europe trip valley city san silicon flight world wine paris country london travel york francisco place startup china area day ny boston visit wifi plane power back countries&lt;/li&gt;
&lt;li&gt;Comments: post blog comment posts avc disqus community read union square yesterday ventures day posted blogging week discussion tumblr link web talk great morning past today heres brad blogs&lt;/li&gt;
&lt;li&gt;Mobile Apps: mobile phone app android google iphone blackberry apple device web phones devices browser home ipad screen wifi windows data desktop experience voice ios laptop feature love nexus os&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you quickly glance the words following the topics, you could immediately get a sense of &lt;em&gt;the topic&lt;/em&gt;. The labels that precedes the words are the topic labels and I came up with. Some of the topics, they may not represent the topics very accurately but my hope is that they abstracted most of the content so that instead of writing 20-30 words all over the place, I could refer them via topic labels.&lt;/p&gt;
&lt;h3 id=&quot;so-in-total-22-topics&quot;&gt;So, in total 22 Topics?&lt;/h3&gt;
&lt;p&gt;I originally put wanted to have 24 topics based on visual inspection on different number of topics, 24 seemed to produce nice coherent topics. However, I need to further process the topics because of the reason explained below. Long story short, I removed two topics based on they are not high quality. If you want more details, read the following section, if you do not, skip it.&lt;/p&gt;
&lt;h3 id=&quot;what-is-the-catchtell-me-as-if-i-am-5&quot;&gt;What is the catch(tell me as if I am 5)?&lt;/h3&gt;
&lt;p&gt;If there are two problems(not automated sense, otherwise not problems really) in topic models; one of them is naming topics automatically and the other one is to determine the topic numbers to begin with. There are various measures to evaluate topic: coherence, corpus distance to evaluate the topic “quality”. I only took the topics that have high coherence and low corpus distances topics as valid topics. One could introduce extensive stop words to improve topics in general, but I choose to prune the invalid topics after I run. The following topic is the only one that gets pruned and you will understand why it is low coherence and have very small distance to corpus: time people good back make years thing work post things great day made long year past hard week big put find times world idea blog ago point end part&lt;/p&gt;
&lt;p&gt;and another topic similar to the above one get filtered out due to its has low coherence and similar to corpus.&lt;/p&gt;
&lt;h3 id=&quot;which-topic-is-most-dominant&quot;&gt;Which topic is most dominant?&lt;/h3&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2015/1/17/topic-frequency.png&quot; title=&quot;Topic Frequency Percentage&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Topic Frequency Percentage&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Comments topic has also elements of community and his venture firm(USV) as well. So, it is not very surprising. As he invests in tech companies and most of the stuff about portfolio companies also fall in the technology(e.g. bitcoin), it is not surprising that the second common topic is technology.&lt;/p&gt;
&lt;h3 id=&quot;most-representative-words-but-what-about-posts&quot;&gt;Most Representative Words, but what about posts?&lt;/h3&gt;
&lt;p&gt;I could also get the most representative individual posts as every post is a mixture of various topics. However, this does not mean the following documents only have a single dominant topic. It may have two or more significant topics, but the one that is associated with is the most significant topic. Otherwise, &lt;code&gt;Burn Rate&lt;/code&gt; topic is somehow related to &lt;code&gt;Valuation&lt;/code&gt; topic as they have overlapping works and phrases. I could also get the documents that are focused individual posts that are all about one topic. Here are the most representative posts for each topic:&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;Burn Rate: &lt;a href=&quot;http://avc.com/2011/12/burn-rate/&quot;&gt;Burn Rate&lt;/a&gt; (I know, it is amazing)&lt;/li&gt;
&lt;li&gt;Venture Capital: &lt;a href=&quot;http://avc.com/2014/04/the-difference-between-large-funds-and-small-funds/&quot;&gt;The Difference Between Small Funds and Large Funds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Company Team: &lt;a href=&quot;http://avc.com/2011/10/vp-engineering-vs-cto/&quot;&gt;VP Engineering vs CTO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;News: &lt;a href=&quot;http://avc.com/2005/01/exploding_tv_co-3/&quot;&gt;Exploding TV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Search - Internet: &lt;a href=&quot;http://avc.com/2005/02/microsoft_searc/&quot;&gt;Microsoft Search Continued&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Family: &lt;a href=&quot;http://avc.com/2012/04/easter-sunday/&quot;&gt;Easter Sunday&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Social Media: &lt;a href=&quot;http://avc.com/2011/01/building-better-social-graphs/&quot;&gt;Building Better Social Graphs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Internet Regulation: &lt;a href=&quot;http://avc.com/2013/03/the-shield-act/&quot;&gt;The SHIELD Act&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Music: &lt;a href=&quot;http://avc.com/2004/05/transatlanticis/&quot;&gt;Transatlanticism&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Ads - Business Models: &lt;a href=&quot;http://avc.com/2012/11/feature-friday-etsy-gift-cards/&quot;&gt;Feature Friday: Etsy Gift Cards&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Multimedia: &lt;a href=&quot;http://avc.com/2005/05/exploding_radio-4/&quot;&gt;Exploding Radio (continued)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Email: &lt;a href=&quot;https://avc.com/2005/03/the_spam_crisis/&quot;&gt;The Spam Crisis is Over&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Politics: &lt;a href=&quot;http://avc.com/2003/11/jeff_jarvis_on_/&quot;&gt;Jeff Jarvis on Clark&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Technology: &lt;a href=&quot;http://avc.com/2004/01/data_integratio/&quot;&gt;Data Integration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Valuation: &lt;a href=&quot;http://avc.com/2008/11/restricted-stoc/&quot;&gt;Restricted Stock vs Options When We Are “Under Water”&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Culture: &lt;a href=&quot;http://avc.com/2005/05/vc_cliche_of_th-9/&quot;&gt;VC Cliche of the Week&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Company - Management: &lt;a href=&quot;http://avc.com/2010/04/the-executive-session/&quot;&gt;The Executive Session&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;NYC Community: &lt;a href=&quot;http://avc.com/2014/04/ship-st-josephs-a-summer-coding-program-in-nyc/&quot;&gt;SHIP @ St Joseph’s – A Summer Coding Program In NYC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Live Music: &lt;a href=&quot;http://avc.com/2003/09/joss_stone-2/&quot;&gt;Joss Stone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Traveling: &lt;a href=&quot;http://avc.com/2012/04/im-changing-languages/&quot;&gt;Je change de langue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Comments: &lt;a href=&quot;http://avc.com/2012/11/mba-mondays-next-topics/&quot;&gt;MBA Mondays: Next Topics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mobile Apps: &lt;a href=&quot;http://avc.com/2012/06/feature-friday-mobile-data-usage-tracking/&quot;&gt;Feature Friday: Mobile Data Usage Tracking&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;topic-changes-over-time&quot;&gt;Topic Changes over Time&lt;/h3&gt;
&lt;p&gt;I could look at the topic distribution of the documents over time in order to measure if topics are trending or not. However, the trend for the topics are far more interesting as I am not necessarily interested in the topic proportions on a daily basis but rather medium term. Luckily, there are a lot of different ways to do trend estimation. I will use &lt;a href=&quot;http://bit.ly/hp-filter&quot;&gt;Hodrick-Presscott Filter&lt;/a&gt; in order to get the medium range trend signal.&lt;/p&gt;
&lt;h3 id=&quot;winner-topics&quot;&gt;Winner Topics&lt;/h3&gt;
&lt;p&gt;Some of the topics are unsurprising winner like Internet Regulation and Mobile Apps but do you find any suprising/interesting topics?&lt;/p&gt;
&lt;h3 id=&quot;internet-regulation&quot;&gt;Internet Regulation&lt;/h3&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2015/1/17/internet-regulation-topic-trend.png&quot; title=&quot;Internet Regulation&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Internet Regulation&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Net neurality hit some nerves right there.&lt;/p&gt;
&lt;h3 id=&quot;mobile-apps&quot;&gt;Mobile Apps&lt;/h3&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2015/1/17/mobile-apps-topic-trend.png&quot; title=&quot;Mobile Apps&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Mobile Apps&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Mobile apps do not seem to even flatten in the near future.&lt;/p&gt;
&lt;h3 id=&quot;nyc---community&quot;&gt;NYC - Community&lt;/h3&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2015/1/17/nyc-community-topic-trend.png&quot; title=&quot;NYC Community&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;NYC Community&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Making money is good, but so is community.&lt;/p&gt;
&lt;h3 id=&quot;technology&quot;&gt;Technology&lt;/h3&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2015/1/17/technology-topic-trend.png&quot; title=&quot;Technology&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Technology&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Even though he says he does not invest in technology but networks or the things that technology enables, apparently he cannot seems to write anything but technology.&lt;/p&gt;
&lt;h3 id=&quot;comments&quot;&gt;Comments&lt;/h3&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2015/1/17/comments-topic-trend.png&quot; title=&quot;Comments&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Comments&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;This topic is one of the most surprising topic, yes USV invested in Disqus, they care a lot about community, audience but it feels to me it shouldn’t be this much, but apparently comments topic is big.&lt;/p&gt;
&lt;h3 id=&quot;loser-topics&quot;&gt;Loser Topics&lt;/h3&gt;
&lt;p&gt;News, Email and Live Music are the obvious losers. Politics is big one as well.&lt;/p&gt;
&lt;h3 id=&quot;email&quot;&gt;Email&lt;/h3&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2015/1/17/email-topic-trend.png&quot; title=&quot;Email&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Email&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;news&quot;&gt;News&lt;/h3&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2015/1/17/news-topic-trend.png&quot; title=&quot;News&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;News&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;live-music&quot;&gt;Live Music&lt;/h3&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2015/1/17/live-music-topic-trend.png&quot; title=&quot;Live Music&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Live Music&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;music&quot;&gt;Music&lt;/h3&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2015/1/17/music-topic-trend.png&quot; title=&quot;Music&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Music&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;politics&quot;&gt;Politics&lt;/h3&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2015/1/17/politics-topic-trend.png&quot; title=&quot;Politics&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Politics&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;hr /&gt;
&lt;p&gt;Not so winner, but not so loser either topics&lt;/p&gt;
&lt;h3 id=&quot;ads---business-models&quot;&gt;Ads - Business Models&lt;/h3&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2015/1/17/ads-business-models-topic-trend.png&quot; title=&quot;Ads Business Models&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Ads Business Models&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;burn-rate&quot;&gt;Burn Rate&lt;/h3&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2015/1/17/burn-rate-topic-trend.png&quot; title=&quot;Burn Rate&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Burn Rate&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;company-management&quot;&gt;Company Management&lt;/h3&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2015/1/17/company-management-topic-trend.png&quot; title=&quot;Company Management&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Company Management&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;company-team&quot;&gt;Company Team&lt;/h3&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2015/1/17/company-team-topic-trend.png&quot; title=&quot;Company Team&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Company Team&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;culture&quot;&gt;Culture&lt;/h3&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2015/1/17/culture-topic-trend.png&quot; title=&quot;Culture&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Culture&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;family&quot;&gt;Family&lt;/h3&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2015/1/17/family-topic-trend.png&quot; title=&quot;Family&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Family&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;multimedia&quot;&gt;Multimedia&lt;/h3&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2015/1/17/multimedia-topic-trend.png&quot; title=&quot;Multimedia&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Multimedia&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;search&quot;&gt;Search&lt;/h3&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2015/1/17/search-topic-trend.png&quot; title=&quot;Search&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Search&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;social-media&quot;&gt;Social Media&lt;/h3&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2015/1/17/social-media-topic-trend.png&quot; title=&quot;Social Media&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Social Media&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Note that USV invested in Tumblr at then end of 2008, they invested in Twitter, Foursquare in 2009.&lt;/p&gt;
&lt;h3 id=&quot;traveling&quot;&gt;Traveling&lt;/h3&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2015/1/17/traveling-topic-trend.png&quot; title=&quot;Traveling&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Traveling&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;valuation&quot;&gt;Valuation&lt;/h3&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2015/1/17/valuation-topic-trend.png&quot; title=&quot;Valuation&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Valuation&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;venture-capital&quot;&gt;Venture Capital&lt;/h3&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2015/1/17/venture-capital-topic-trend.png&quot; title=&quot;Venture Capital&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Venture Capital&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/body&gt;
&lt;/html&gt;
</content>
  </entry>
  <entry xml:base="https://bugra.github.io/">
    <title type="text">I wish I knew these things when I learned Python</title>
    <id>https://bugra.github.io/posts/2015/1/3/i-wish-i-knew-these-things-when-i-learned-python</id>
    <updated>2015-01-03T00:00:00Z</updated>
    <published>2015-01-03T00:00:00Z</published>
    <link href="https://bugra.github.io/posts/2015/1/3/i-wish-i-knew-these-things-when-i-learned-python" />
    <author>
      <name>Bugra Akyildiz</name>
    </author>
    <content type="html">&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;
  &lt;title&gt;-&lt;/title&gt;
  &lt;style&gt;
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
    pre &gt; code.sourceCode { white-space: pre; position: relative; }
    pre &gt; code.sourceCode &gt; span { display: inline-block; line-height: 1.25; }
    pre &gt; code.sourceCode &gt; span:empty { height: 1.2em; }
    code.sourceCode &gt; span { color: inherit; text-decoration: inherit; }
    div.sourceCode { margin: 1em 0; }
    pre.sourceCode { margin: 0; }
    @media screen {
    div.sourceCode { overflow: auto; }
    }
    @media print {
    pre &gt; code.sourceCode { white-space: pre-wrap; }
    pre &gt; code.sourceCode &gt; span { text-indent: -5em; padding-left: 5em; }
    }
    pre.numberSource code
      { counter-reset: source-line 0; }
    pre.numberSource code &gt; span
      { position: relative; left: -4em; counter-increment: source-line; }
    pre.numberSource code &gt; span &gt; a:first-child::before
      { content: counter(source-line);
        position: relative; left: -1em; text-align: right; vertical-align: baseline;
        border: none; display: inline-block;
        -webkit-touch-callout: none; -webkit-user-select: none;
        -khtml-user-select: none; -moz-user-select: none;
        -ms-user-select: none; user-select: none;
        padding: 0 4px; width: 4em;
        color: #aaaaaa;
      }
    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
    div.sourceCode
      {   }
    @media screen {
    pre &gt; code.sourceCode &gt; span &gt; a:first-child::before { text-decoration: underline; }
    }
    code span.al { color: #ff0000; font-weight: bold; } /* Alert */
    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
    code span.at { color: #7d9029; } /* Attribute */
    code span.bn { color: #40a070; } /* BaseN */
    code span.bu { } /* BuiltIn */
    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
    code span.ch { color: #4070a0; } /* Char */
    code span.cn { color: #880000; } /* Constant */
    code span.co { color: #60a0b0; font-style: italic; } /* Comment */
    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
    code span.do { color: #ba2121; font-style: italic; } /* Documentation */
    code span.dt { color: #902000; } /* DataType */
    code span.dv { color: #40a070; } /* DecVal */
    code span.er { color: #ff0000; font-weight: bold; } /* Error */
    code span.ex { } /* Extension */
    code span.fl { color: #40a070; } /* Float */
    code span.fu { color: #06287e; } /* Function */
    code span.im { } /* Import */
    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
    code span.kw { color: #007020; font-weight: bold; } /* Keyword */
    code span.op { color: #666666; } /* Operator */
    code span.ot { color: #007020; } /* Other */
    code span.pp { color: #bc7a00; } /* Preprocessor */
    code span.sc { color: #4070a0; } /* SpecialChar */
    code span.ss { color: #bb6688; } /* SpecialString */
    code span.st { color: #4070a0; } /* String */
    code span.va { color: #19177c; } /* Variable */
    code span.vs { color: #4070a0; } /* VerbatimString */
    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
  &lt;/style&gt;
  &lt;!--[if lt IE 9]&gt;
    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;
  &lt;![endif]--&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;I sometimes found myself asking myself how I cannot know simpler way of doing “this” thing in Python 3. When I seek solution, I of course find much more elegant, efficient and more bug-free code parts over time. In total(not just this post), the total sum of “those” things were far more than I expect/admit, but here is the first crop of features that was not obvious to me and learned later as I sought more efficient/simple/maintainable code.&lt;/p&gt;
&lt;h3 id=&quot;dictionary-stuff&quot;&gt;Dictionary Stuff&lt;/h3&gt;
&lt;h4 id=&quot;dictionary-keys-and-items&quot;&gt;Dictionary &lt;code&gt;keys()&lt;/code&gt; and &lt;code&gt;items()&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;You could do various interesting operations in keys and items of dictionaries. They are set-like.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;#cb1-1&quot;&gt;&lt;/a&gt;aa &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; {‘mike’: ‘male’, ‘kathy’: ‘female’, ‘steve’: ‘male’, ‘hillary’: ‘female’}&lt;/span&gt;
&lt;span id=&quot;cb1-2&quot;&gt;&lt;a href=&quot;#cb1-2&quot;&gt;&lt;/a&gt;bb &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; {‘mike’: ‘male’, ‘ben’: ‘male’, ‘hillary’: ‘female’}&lt;/span&gt;
&lt;span id=&quot;cb1-3&quot;&gt;&lt;a href=&quot;#cb1-3&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-4&quot;&gt;&lt;a href=&quot;#cb1-4&quot;&gt;&lt;/a&gt;aa.keys() &lt;span class=&quot;op&quot;&gt;&amp;amp;&lt;/span&gt; bb.keys() &lt;span class=&quot;co&quot;&gt;# {‘mike’, ‘hillary’} # these are set-like&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-5&quot;&gt;&lt;a href=&quot;#cb1-5&quot;&gt;&lt;/a&gt;aa.keys() &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; bb.keys() &lt;span class=&quot;co&quot;&gt;# {‘kathy’, ‘steve’}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-6&quot;&gt;&lt;a href=&quot;#cb1-6&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;# If you want to get the common key-value pairs in the two dictionaries&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-7&quot;&gt;&lt;a href=&quot;#cb1-7&quot;&gt;&lt;/a&gt;aa.items() &lt;span class=&quot;op&quot;&gt;&amp;amp;&lt;/span&gt; bb.items() &lt;span class=&quot;co&quot;&gt;# {(‘mike’, ‘male’), (‘hillary’, ‘female’)}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Pretty neat!&lt;/p&gt;
&lt;h3 id=&quot;checking-existence-of-a-key-in-dictionary&quot;&gt;Checking Existence of a key in dictionary&lt;/h3&gt;
&lt;p&gt;How many times you write the following code?&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;#cb2-1&quot;&gt;&lt;/a&gt;dictionary &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; {}&lt;/span&gt;
&lt;span id=&quot;cb2-2&quot;&gt;&lt;a href=&quot;#cb2-2&quot;&gt;&lt;/a&gt;&lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; k, v &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; ls:&lt;/span&gt;
&lt;span id=&quot;cb2-3&quot;&gt;&lt;a href=&quot;#cb2-3&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;not&lt;/span&gt; k &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; dictionary:&lt;/span&gt;
&lt;span id=&quot;cb2-4&quot;&gt;&lt;a href=&quot;#cb2-4&quot;&gt;&lt;/a&gt;        dictionary[k] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; []&lt;/span&gt;
&lt;span id=&quot;cb2-5&quot;&gt;&lt;a href=&quot;#cb2-5&quot;&gt;&lt;/a&gt;    dictionary[k].append(v)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is not so bad, but why do you need if statement every now and then?&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb3&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb3-1&quot;&gt;&lt;a href=&quot;#cb3-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; defaultdict&lt;/span&gt;
&lt;span id=&quot;cb3-2&quot;&gt;&lt;a href=&quot;#cb3-2&quot;&gt;&lt;/a&gt;dictionary &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; defaultdict(&lt;span class=&quot;bu&quot;&gt;list&lt;/span&gt;) &lt;span class=&quot;co&quot;&gt;# defaults to list&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-3&quot;&gt;&lt;a href=&quot;#cb3-3&quot;&gt;&lt;/a&gt;&lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; k, v &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; ls:&lt;/span&gt;
&lt;span id=&quot;cb3-4&quot;&gt;&lt;a href=&quot;#cb3-4&quot;&gt;&lt;/a&gt;    dictionary[k].append(v)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Much cleaner and there is not an if statement which unnecessarily obscures the code.&lt;/p&gt;
&lt;h3 id=&quot;update-a-dictionary-with-another-dictionary&quot;&gt;Update a dictionary with another dictionary&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb4&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb4-1&quot;&gt;&lt;a href=&quot;#cb4-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; itertools &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; chain&lt;/span&gt;
&lt;span id=&quot;cb4-2&quot;&gt;&lt;a href=&quot;#cb4-2&quot;&gt;&lt;/a&gt;a &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; {‘x’: &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, ‘y’:&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, ‘z’:&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;}&lt;/span&gt;
&lt;span id=&quot;cb4-3&quot;&gt;&lt;a href=&quot;#cb4-3&quot;&gt;&lt;/a&gt;b &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; {‘y’: &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;, ‘s’: &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;, ‘x’: &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, ‘z’: &lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;}&lt;/span&gt;
&lt;span id=&quot;cb4-4&quot;&gt;&lt;a href=&quot;#cb4-4&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-5&quot;&gt;&lt;a href=&quot;#cb4-5&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;# Update a with b &lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-6&quot;&gt;&lt;a href=&quot;#cb4-6&quot;&gt;&lt;/a&gt;c &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;dict&lt;/span&gt;(chain(a.items(), b.items()))&lt;/span&gt;
&lt;span id=&quot;cb4-7&quot;&gt;&lt;a href=&quot;#cb4-7&quot;&gt;&lt;/a&gt;c &lt;span class=&quot;co&quot;&gt;# {‘y’: 5, ‘s’: 10, ‘x’: 3, ‘z’: 6}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Well, this is good but not very concise and terse. Let’s see if we could do better:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb5&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb5-1&quot;&gt;&lt;a href=&quot;#cb5-1&quot;&gt;&lt;/a&gt;c &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; a.copy()&lt;/span&gt;
&lt;span id=&quot;cb5-2&quot;&gt;&lt;a href=&quot;#cb5-2&quot;&gt;&lt;/a&gt;c.update(b)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Much cleaner and readable!&lt;/p&gt;
&lt;h3 id=&quot;getting-the-maximum-from-a-dictionary&quot;&gt;Getting the maximum! from a dictionary&lt;/h3&gt;
&lt;p&gt;If you want to get the maximum value in a dictionary, it is straightforward:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb6&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb6-1&quot;&gt;&lt;a href=&quot;#cb6-1&quot;&gt;&lt;/a&gt;aa &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; {k: &lt;span class=&quot;bu&quot;&gt;sum&lt;/span&gt;(&lt;span class=&quot;bu&quot;&gt;range&lt;/span&gt;(k)) &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; k &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;)}&lt;/span&gt;
&lt;span id=&quot;cb6-2&quot;&gt;&lt;a href=&quot;#cb6-2&quot;&gt;&lt;/a&gt;aa &lt;span class=&quot;co&quot;&gt;# {0: 0, 1: 0, 2: 1, 3: 3, 4: 6, 5: 10, 6: 15, 7: 21, 8: 28, 9: 36}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-3&quot;&gt;&lt;a href=&quot;#cb6-3&quot;&gt;&lt;/a&gt;&lt;span class=&quot;bu&quot;&gt;max&lt;/span&gt;(aa.values()) &lt;span class=&quot;co&quot;&gt;#36&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;which works, but what if you need the key, you need to do another lookup based on value. Instead, we could flatten the representation via &lt;code&gt;zip&lt;/code&gt; and then return the key-value pair as in the following:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb7&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb7-1&quot;&gt;&lt;a href=&quot;#cb7-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;bu&quot;&gt;max&lt;/span&gt;(&lt;span class=&quot;bu&quot;&gt;zip&lt;/span&gt;(aa.values(), aa.keys()))&lt;/span&gt;
&lt;span id=&quot;cb7-2&quot;&gt;&lt;a href=&quot;#cb7-2&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;# (36, 9) =&amp;gt; value, key pair&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Similarly, if you want to traverse the dictionary by maximum value to minimum value you could do the following:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb8&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb8-1&quot;&gt;&lt;a href=&quot;#cb8-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;bu&quot;&gt;sorted&lt;/span&gt;(&lt;span class=&quot;bu&quot;&gt;zip&lt;/span&gt;(aa.values(), aa.keys()), reverse&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb8-2&quot;&gt;&lt;a href=&quot;#cb8-2&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;# [(36, 9), (28, 8), (21, 7), (15, 6), (10, 5), (6, 4), (3, 3), (1, 2), (0, 1), (0, 0)]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;unpacking-arbitrary-number-of-items-in-a-list&quot;&gt;Unpacking Arbitrary Number of Items in a List&lt;/h3&gt;
&lt;p&gt;We could capture arbitrary number of items into a list using &lt;code&gt;*&lt;/code&gt; magic:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb9&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb9-1&quot;&gt;&lt;a href=&quot;#cb9-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; compute_average_salary(person_salary):&lt;/span&gt;
&lt;span id=&quot;cb9-2&quot;&gt;&lt;a href=&quot;#cb9-2&quot;&gt;&lt;/a&gt;    person, &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;salary &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; person_salary&lt;/span&gt;
&lt;span id=&quot;cb9-3&quot;&gt;&lt;a href=&quot;#cb9-3&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; person, (&lt;span class=&quot;bu&quot;&gt;sum&lt;/span&gt;(salary) &lt;span class=&quot;op&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;float&lt;/span&gt;(&lt;span class=&quot;bu&quot;&gt;len&lt;/span&gt;(salary)))&lt;/span&gt;
&lt;span id=&quot;cb9-4&quot;&gt;&lt;a href=&quot;#cb9-4&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb9-5&quot;&gt;&lt;a href=&quot;#cb9-5&quot;&gt;&lt;/a&gt;person, average_salary &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; compute_average_salary([“mike”, &lt;span class=&quot;dv&quot;&gt;40000&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;50000&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;60000&lt;/span&gt;])&lt;/span&gt;
&lt;span id=&quot;cb9-6&quot;&gt;&lt;a href=&quot;#cb9-6&quot;&gt;&lt;/a&gt;person &lt;span class=&quot;co&quot;&gt;# ‘mike’&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb9-7&quot;&gt;&lt;a href=&quot;#cb9-7&quot;&gt;&lt;/a&gt;average_salary &lt;span class=&quot;co&quot;&gt;# 50000.0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This was not very interesting, but what if I tell you you could do the following as well:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb10&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb10-1&quot;&gt;&lt;a href=&quot;#cb10-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; compute_average_salary(person_salary_age):&lt;/span&gt;
&lt;span id=&quot;cb10-2&quot;&gt;&lt;a href=&quot;#cb10-2&quot;&gt;&lt;/a&gt;    person, &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;salary, age &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; person_salary_age&lt;/span&gt;
&lt;span id=&quot;cb10-3&quot;&gt;&lt;a href=&quot;#cb10-3&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; person, (&lt;span class=&quot;bu&quot;&gt;sum&lt;/span&gt;(salary) &lt;span class=&quot;op&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;float&lt;/span&gt;(&lt;span class=&quot;bu&quot;&gt;len&lt;/span&gt;(salary))), age&lt;/span&gt;
&lt;span id=&quot;cb10-4&quot;&gt;&lt;a href=&quot;#cb10-4&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb10-5&quot;&gt;&lt;a href=&quot;#cb10-5&quot;&gt;&lt;/a&gt;person, average_salary, age &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; compute_average_salary([“mike”, &lt;span class=&quot;dv&quot;&gt;40000&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;50000&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;60000&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;42&lt;/span&gt;])&lt;/span&gt;
&lt;span id=&quot;cb10-6&quot;&gt;&lt;a href=&quot;#cb10-6&quot;&gt;&lt;/a&gt;age &lt;span class=&quot;co&quot;&gt;# 42&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is pretty neat.&lt;/p&gt;
&lt;p&gt;When you think about a dictionary that has a string key and a list as value, instead of traversing a dictionary and then process the values in a sequential manner, one can use a flat representation(list inside of a list) like this:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb11&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb11-1&quot;&gt;&lt;a href=&quot;#cb11-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;# Instead of doing this&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb11-2&quot;&gt;&lt;a href=&quot;#cb11-2&quot;&gt;&lt;/a&gt;&lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; k, v &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; dictionary.items():&lt;/span&gt;
&lt;span id=&quot;cb11-3&quot;&gt;&lt;a href=&quot;#cb11-3&quot;&gt;&lt;/a&gt;    process(v)&lt;/span&gt;
&lt;span id=&quot;cb11-4&quot;&gt;&lt;a href=&quot;#cb11-4&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb11-5&quot;&gt;&lt;a href=&quot;#cb11-5&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;# we are separating head and the rest, and process the values&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb11-6&quot;&gt;&lt;a href=&quot;#cb11-6&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;# as a list similar to the above. head becomes the key value&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb11-7&quot;&gt;&lt;a href=&quot;#cb11-7&quot;&gt;&lt;/a&gt;&lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; head, &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;rest &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; ls:&lt;/span&gt;
&lt;span id=&quot;cb11-8&quot;&gt;&lt;a href=&quot;#cb11-8&quot;&gt;&lt;/a&gt;    process(rest)&lt;/span&gt;
&lt;span id=&quot;cb11-9&quot;&gt;&lt;a href=&quot;#cb11-9&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb11-10&quot;&gt;&lt;a href=&quot;#cb11-10&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;# if not very clear, consider the following example&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb11-11&quot;&gt;&lt;a href=&quot;#cb11-11&quot;&gt;&lt;/a&gt;aa &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; {k: &lt;span class=&quot;bu&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;bu&quot;&gt;range&lt;/span&gt;(k)) &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; k &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;)} &lt;span class=&quot;co&quot;&gt;# range returns an iterator&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb11-12&quot;&gt;&lt;a href=&quot;#cb11-12&quot;&gt;&lt;/a&gt;aa &lt;span class=&quot;co&quot;&gt;# {0: [], 1: [0], 2: [0, 1], 3: [0, 1, 2], 4: [0, 1, 2, 3]}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb11-13&quot;&gt;&lt;a href=&quot;#cb11-13&quot;&gt;&lt;/a&gt;&lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; k, v &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; aa.items():&lt;/span&gt;
&lt;span id=&quot;cb11-14&quot;&gt;&lt;a href=&quot;#cb11-14&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;bu&quot;&gt;sum&lt;/span&gt;(v)&lt;/span&gt;
&lt;span id=&quot;cb11-15&quot;&gt;&lt;a href=&quot;#cb11-15&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb11-16&quot;&gt;&lt;a href=&quot;#cb11-16&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;#0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb11-17&quot;&gt;&lt;a href=&quot;#cb11-17&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;#0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb11-18&quot;&gt;&lt;a href=&quot;#cb11-18&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;#1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb11-19&quot;&gt;&lt;a href=&quot;#cb11-19&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;#3&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb11-20&quot;&gt;&lt;a href=&quot;#cb11-20&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;#6&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb11-21&quot;&gt;&lt;a href=&quot;#cb11-21&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb11-22&quot;&gt;&lt;a href=&quot;#cb11-22&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;# Instead&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb11-23&quot;&gt;&lt;a href=&quot;#cb11-23&quot;&gt;&lt;/a&gt;aa &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [[ii] &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;bu&quot;&gt;range&lt;/span&gt;(jj)) &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; ii, jj &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;enumerate&lt;/span&gt;(&lt;span class=&quot;bu&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;))]&lt;/span&gt;
&lt;span id=&quot;cb11-24&quot;&gt;&lt;a href=&quot;#cb11-24&quot;&gt;&lt;/a&gt;&lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; head, &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;rest &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; aa:&lt;/span&gt;
&lt;span id=&quot;cb11-25&quot;&gt;&lt;a href=&quot;#cb11-25&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;bu&quot;&gt;sum&lt;/span&gt;(rest))&lt;/span&gt;
&lt;span id=&quot;cb11-26&quot;&gt;&lt;a href=&quot;#cb11-26&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb11-27&quot;&gt;&lt;a href=&quot;#cb11-27&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;#0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb11-28&quot;&gt;&lt;a href=&quot;#cb11-28&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;#0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb11-29&quot;&gt;&lt;a href=&quot;#cb11-29&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;#1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb11-30&quot;&gt;&lt;a href=&quot;#cb11-30&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;#3&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb11-31&quot;&gt;&lt;a href=&quot;#cb11-31&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;#6&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You could &lt;em&gt;unpack&lt;/em&gt; the &lt;code&gt;list&lt;/code&gt; into &lt;code&gt;head, *rest, tail&lt;/code&gt; as well.&lt;/p&gt;
&lt;h3 id=&quot;collections-gotta-love-counter&quot;&gt;&lt;code&gt;collections&lt;/code&gt; Gotta love Counter&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;collections&lt;/code&gt; is one of my favorite standard library in Python. If you need any other data structures than the original default data structures in the Python, you should take a look at it.&lt;/p&gt;
&lt;p&gt;One of the essential part of my job on a daily basis is to count things. Mostly words but not necessarily always. One may be tempted to say, you could build a dictionary with words as keys and the number of occurrences as values, and I would agree with you if I did not know about it &lt;code&gt;Counter&lt;/code&gt; in the &lt;code&gt;collections&lt;/code&gt;(yes, the introduction blurb is because of Counter).&lt;/p&gt;
&lt;p&gt;Let’s say you read, Python programming language wikipedia page into a string and then convert into a list(by tokenizing, well sort of):&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb12&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb12-1&quot;&gt;&lt;a href=&quot;#cb12-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; re&lt;/span&gt;
&lt;span id=&quot;cb12-2&quot;&gt;&lt;a href=&quot;#cb12-2&quot;&gt;&lt;/a&gt;word_list &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;bu&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;lambda&lt;/span&gt; k: k.lower().strip(), re.split(r’[&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;,:(&lt;span class=&quot;op&quot;&gt;\&lt;/span&gt;.&lt;span class=&quot;op&quot;&gt;\&lt;/span&gt;s)]&lt;span class=&quot;op&quot;&gt;\&lt;/span&gt;s&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;’, python_string)))&lt;/span&gt;
&lt;span id=&quot;cb12-3&quot;&gt;&lt;a href=&quot;#cb12-3&quot;&gt;&lt;/a&gt;word_list[:&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;] &lt;span class=&quot;co&quot;&gt;# [‘python’, ‘is’, ‘a’, ‘widely’, ‘used’, ‘general-purpose’, ‘high-level’, ‘programming’, ‘language’, ‘[17][18][19]’]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So far, so good. But if I want to count the words in this list:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb13&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb13-1&quot;&gt;&lt;a href=&quot;#cb13-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; defaultdict &lt;span class=&quot;co&quot;&gt;# again, collections!&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb13-2&quot;&gt;&lt;a href=&quot;#cb13-2&quot;&gt;&lt;/a&gt;dictionary &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; defaultdict(&lt;span class=&quot;bu&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb13-3&quot;&gt;&lt;a href=&quot;#cb13-3&quot;&gt;&lt;/a&gt;&lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; word &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; word_list:&lt;/span&gt;
&lt;span id=&quot;cb13-4&quot;&gt;&lt;a href=&quot;#cb13-4&quot;&gt;&lt;/a&gt;    dictionary[word] &lt;span class=&quot;op&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is not so bad, but if you have &lt;code&gt;Counter&lt;/code&gt;, you would use your time in a more meaningful task.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb14&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb14-1&quot;&gt;&lt;a href=&quot;#cb14-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; Counter&lt;/span&gt;
&lt;span id=&quot;cb14-2&quot;&gt;&lt;a href=&quot;#cb14-2&quot;&gt;&lt;/a&gt;counter &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; Counter(word_list)&lt;/span&gt;
&lt;span id=&quot;cb14-3&quot;&gt;&lt;a href=&quot;#cb14-3&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;# Getting the most common 10 words&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb14-4&quot;&gt;&lt;a href=&quot;#cb14-4&quot;&gt;&lt;/a&gt;counter.most_common(&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb14-5&quot;&gt;&lt;a href=&quot;#cb14-5&quot;&gt;&lt;/a&gt;[(‘the’, &lt;span class=&quot;dv&quot;&gt;164&lt;/span&gt;), (‘and’, &lt;span class=&quot;dv&quot;&gt;161&lt;/span&gt;), (‘a’, &lt;span class=&quot;dv&quot;&gt;138&lt;/span&gt;), (‘python’, &lt;span class=&quot;dv&quot;&gt;138&lt;/span&gt;), &lt;/span&gt;
&lt;span id=&quot;cb14-6&quot;&gt;&lt;a href=&quot;#cb14-6&quot;&gt;&lt;/a&gt;(‘of’, &lt;span class=&quot;dv&quot;&gt;131&lt;/span&gt;), (‘is’, &lt;span class=&quot;dv&quot;&gt;102&lt;/span&gt;), (‘to’, &lt;span class=&quot;dv&quot;&gt;91&lt;/span&gt;), (‘in’, &lt;span class=&quot;dv&quot;&gt;88&lt;/span&gt;), (‘’, &lt;span class=&quot;dv&quot;&gt;56&lt;/span&gt;)]&lt;/span&gt;
&lt;span id=&quot;cb14-7&quot;&gt;&lt;a href=&quot;#cb14-7&quot;&gt;&lt;/a&gt;counter.keys()[:&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;] &lt;span class=&quot;co&quot;&gt;# just like a dictionary&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb14-8&quot;&gt;&lt;a href=&quot;#cb14-8&quot;&gt;&lt;/a&gt;[‘’, ‘limited’, ‘all’, ‘code’, ‘managed’, ‘multi&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;paradigm’, &lt;/span&gt;
&lt;span id=&quot;cb14-9&quot;&gt;&lt;a href=&quot;#cb14-9&quot;&gt;&lt;/a&gt;‘exponentiation’, ‘fromosing’, ‘dynamic’]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is pretty neat, but if we look at what available methods exist for counter:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb15&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb15-1&quot;&gt;&lt;a href=&quot;#cb15-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;bu&quot;&gt;dir&lt;/span&gt;(counter)&lt;/span&gt;
&lt;span id=&quot;cb15-2&quot;&gt;&lt;a href=&quot;#cb15-2&quot;&gt;&lt;/a&gt;[‘__add__’, ‘__and__’, ‘__class__’, ‘__cmp__’, ‘__contains__’, ‘__delattr__’, ‘__delitem__’, ‘__dict__’, &lt;/span&gt;
&lt;span id=&quot;cb15-3&quot;&gt;&lt;a href=&quot;#cb15-3&quot;&gt;&lt;/a&gt;‘__doc__’, ‘__eq__’, ‘__format__’, ‘__ge__’, ‘__getattribute__’, ‘__getitem__’, ‘__gt__’, ‘__hash__’, &lt;/span&gt;
&lt;span id=&quot;cb15-4&quot;&gt;&lt;a href=&quot;#cb15-4&quot;&gt;&lt;/a&gt;‘__init__’, ‘__iter__’, ‘__le__’, ‘__len__’, ‘__lt__’, ‘__missing__’, ‘__module__’, ‘__ne__’, ‘__new__’, &lt;/span&gt;
&lt;span id=&quot;cb15-5&quot;&gt;&lt;a href=&quot;#cb15-5&quot;&gt;&lt;/a&gt;‘__or__’, ‘__reduce__’, ‘__reduce_ex__’, ‘__repr__’, ‘__setattr__’, ‘__setitem__’, ‘__sizeof__’, &lt;/span&gt;
&lt;span id=&quot;cb15-6&quot;&gt;&lt;a href=&quot;#cb15-6&quot;&gt;&lt;/a&gt;‘__str__’, ‘__sub__’, ‘__subclasshook__’, ‘__weakref__’, ‘clear’, ‘copy’, ‘elements’, ‘fromkeys’, ‘get’, &lt;/span&gt;
&lt;span id=&quot;cb15-7&quot;&gt;&lt;a href=&quot;#cb15-7&quot;&gt;&lt;/a&gt;‘has_key’, ‘items’, ‘iteritems’, ‘iterkeys’, ‘itervalues’, ‘keys’, ‘most_common’, ‘pop’, ‘popitem’, ‘setdefault’, &lt;/span&gt;
&lt;span id=&quot;cb15-8&quot;&gt;&lt;a href=&quot;#cb15-8&quot;&gt;&lt;/a&gt;‘subtract’, ‘update’, ‘values’, ‘viewitems’, ‘viewkeys’, ‘viewvalues’]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Did you see &lt;code&gt;__add__&lt;/code&gt; and &lt;code&gt;__sub__&lt;/code&gt; methods? Yes, counters support &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;-&lt;/code&gt; operations! So, if you have a lot of text and want to count words, you do not need Hadoop, you could parallelize a bunch of counters(map) and then sum them together(reduce). You have your mapreduce built on top of counter. You could thank me later.&lt;/p&gt;
&lt;h3 id=&quot;flattening-nested-lists&quot;&gt;Flattening Nested Lists&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;collections&lt;/code&gt; has also &lt;code&gt;_chain&lt;/code&gt; function which could be used to flatten nested lists:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb16&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb16-1&quot;&gt;&lt;a href=&quot;#cb16-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; chain&lt;/span&gt;
&lt;span id=&quot;cb16-2&quot;&gt;&lt;a href=&quot;#cb16-2&quot;&gt;&lt;/a&gt;ls &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [[kk] &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;bu&quot;&gt;range&lt;/span&gt;(kk)) &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; kk &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;)]&lt;/span&gt;
&lt;span id=&quot;cb16-3&quot;&gt;&lt;a href=&quot;#cb16-3&quot;&gt;&lt;/a&gt;flattened_list &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;list&lt;/span&gt;(collections._chain(&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;ls))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;opening-two-files-simultaneously&quot;&gt;Opening two files simultaneously&lt;/h3&gt;
&lt;p&gt;If you are processing one file(e.g. line by line) and write the processed line into another file, you may be tempted to write the following:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb17&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb17-1&quot;&gt;&lt;a href=&quot;#cb17-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;cf&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;open&lt;/span&gt;(input_file_path) &lt;span class=&quot;im&quot;&gt;as&lt;/span&gt; inputfile:&lt;/span&gt;
&lt;span id=&quot;cb17-2&quot;&gt;&lt;a href=&quot;#cb17-2&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;cf&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;open&lt;/span&gt;(output_file_path, ‘w’) &lt;span class=&quot;im&quot;&gt;as&lt;/span&gt; outputfile:&lt;/span&gt;
&lt;span id=&quot;cb17-3&quot;&gt;&lt;a href=&quot;#cb17-3&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; line &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; inputfile:&lt;/span&gt;
&lt;span id=&quot;cb17-4&quot;&gt;&lt;a href=&quot;#cb17-4&quot;&gt;&lt;/a&gt;            outputfile.write(process(line))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Except, you can open multiple files in the same line as in the following:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb18&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb18-1&quot;&gt;&lt;a href=&quot;#cb18-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;cf&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;open&lt;/span&gt;(input_file_path) &lt;span class=&quot;im&quot;&gt;as&lt;/span&gt; inputfile, &lt;span class=&quot;bu&quot;&gt;open&lt;/span&gt;(output_file_path, ‘w’) &lt;span class=&quot;im&quot;&gt;as&lt;/span&gt; outputfile:&lt;/span&gt;
&lt;span id=&quot;cb18-2&quot;&gt;&lt;a href=&quot;#cb18-2&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; line &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; inputfile:&lt;/span&gt;
&lt;span id=&quot;cb18-3&quot;&gt;&lt;a href=&quot;#cb18-3&quot;&gt;&lt;/a&gt;        outputfile.write(process(line))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is much more neat.&lt;/p&gt;
&lt;h3 id=&quot;finding-monday-from-a-date&quot;&gt;Finding Monday from a Date&lt;/h3&gt;
&lt;p&gt;If you have a date and want to normalize(say to previous or next Monday), you could do the following:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb19&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb19-1&quot;&gt;&lt;a href=&quot;#cb19-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; datetime&lt;/span&gt;
&lt;span id=&quot;cb19-2&quot;&gt;&lt;a href=&quot;#cb19-2&quot;&gt;&lt;/a&gt;previous_monday &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; some_date &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; datetime.timedelta(days&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;some_date.weekday())&lt;/span&gt;
&lt;span id=&quot;cb19-3&quot;&gt;&lt;a href=&quot;#cb19-3&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;# Similarly, you could map to next monday as well&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb19-4&quot;&gt;&lt;a href=&quot;#cb19-4&quot;&gt;&lt;/a&gt;next_monday &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; some_date &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; date_time.timedelta(days&lt;span class=&quot;op&quot;&gt;=-&lt;/span&gt;some_date.weekday(), weeks&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And, that is about it.&lt;/p&gt;
&lt;h3 id=&quot;handling-html&quot;&gt;Handling HTML&lt;/h3&gt;
&lt;p&gt;If you scrape websites either for fun or profit, chances are that you face html tags time to time. In order to strip various html tags, you could do use &lt;code&gt;html.parser&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb20&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb20-1&quot;&gt;&lt;a href=&quot;#cb20-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; html.parser &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; HTMLParser&lt;/span&gt;
&lt;span id=&quot;cb20-2&quot;&gt;&lt;a href=&quot;#cb20-2&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-3&quot;&gt;&lt;a href=&quot;#cb20-3&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; HTMLStrip(HTMLParser):&lt;/span&gt;
&lt;span id=&quot;cb20-4&quot;&gt;&lt;a href=&quot;#cb20-4&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-5&quot;&gt;&lt;a href=&quot;#cb20-5&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-6&quot;&gt;&lt;a href=&quot;#cb20-6&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;):&lt;/span&gt;
&lt;span id=&quot;cb20-7&quot;&gt;&lt;a href=&quot;#cb20-7&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.reset()&lt;/span&gt;
&lt;span id=&quot;cb20-8&quot;&gt;&lt;a href=&quot;#cb20-8&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.ls &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; []&lt;/span&gt;
&lt;span id=&quot;cb20-9&quot;&gt;&lt;a href=&quot;#cb20-9&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-10&quot;&gt;&lt;a href=&quot;#cb20-10&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; handle_data(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;, d):&lt;/span&gt;
&lt;span id=&quot;cb20-11&quot;&gt;&lt;a href=&quot;#cb20-11&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.ls.append(d)&lt;/span&gt;
&lt;span id=&quot;cb20-12&quot;&gt;&lt;a href=&quot;#cb20-12&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-13&quot;&gt;&lt;a href=&quot;#cb20-13&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; get_data(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;):&lt;/span&gt;
&lt;span id=&quot;cb20-14&quot;&gt;&lt;a href=&quot;#cb20-14&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; ‘’.join(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.ls)&lt;/span&gt;
&lt;span id=&quot;cb20-15&quot;&gt;&lt;a href=&quot;#cb20-15&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-16&quot;&gt;&lt;a href=&quot;#cb20-16&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;at&quot;&gt;@staticmethod&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-17&quot;&gt;&lt;a href=&quot;#cb20-17&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; strip(snippet):&lt;/span&gt;
&lt;span id=&quot;cb20-18&quot;&gt;&lt;a href=&quot;#cb20-18&quot;&gt;&lt;/a&gt;        html_strip &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; HTMLStrip()&lt;/span&gt;
&lt;span id=&quot;cb20-19&quot;&gt;&lt;a href=&quot;#cb20-19&quot;&gt;&lt;/a&gt;        html_strip.feed(snippet)&lt;/span&gt;
&lt;span id=&quot;cb20-20&quot;&gt;&lt;a href=&quot;#cb20-20&quot;&gt;&lt;/a&gt;        clean_text &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; html_strip.get_data()&lt;/span&gt;
&lt;span id=&quot;cb20-21&quot;&gt;&lt;a href=&quot;#cb20-21&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; clean_text&lt;/span&gt;
&lt;span id=&quot;cb20-22&quot;&gt;&lt;a href=&quot;#cb20-22&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-23&quot;&gt;&lt;a href=&quot;#cb20-23&quot;&gt;&lt;/a&gt;snippet &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; HTMLStrip.strip(html_snippet)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you only want to escape &lt;code&gt;html&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb21&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb21-1&quot;&gt;&lt;a href=&quot;#cb21-1&quot;&gt;&lt;/a&gt;escaped_snippet &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; html.escape(html_snippet)&lt;/span&gt;
&lt;span id=&quot;cb21-2&quot;&gt;&lt;a href=&quot;#cb21-2&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb21-3&quot;&gt;&lt;a href=&quot;#cb21-3&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;# Back to html snippets(this is new in Python 3.4)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb21-4&quot;&gt;&lt;a href=&quot;#cb21-4&quot;&gt;&lt;/a&gt;html_snippet &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; html.unescape(escaped_snippet)&lt;/span&gt;
&lt;span id=&quot;cb21-5&quot;&gt;&lt;a href=&quot;#cb21-5&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;# and so forth ...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</content>
  </entry>
  <entry xml:base="https://bugra.github.io/">
    <title type="text">Blog in Review 2014</title>
    <id>https://bugra.github.io/posts/2015/1/25/blog-in-review-2014</id>
    <updated>2015-01-25T00:00:00Z</updated>
    <published>2015-01-25T00:00:00Z</published>
    <link href="https://bugra.github.io/posts/2015/1/25/blog-in-review-2014" />
    <author>
      <name>Bugra Akyildiz</name>
    </author>
    <content type="html">&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;
  &lt;title&gt;-&lt;/title&gt;
  &lt;style&gt;
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
  &lt;/style&gt;
  &lt;!--[if lt IE 9]&gt;
    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;
  &lt;![endif]--&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;This blog(I guess no matter how much I do not like this term, this website is a blog) has been around more than 3 years by now. Last year, I made a conscious decision that I should write more regularly and removing some of the posts that are all about rants and ideas about everything and keep the ones that are mostly about data. I’d like to think about this blog as data-driven medium where the blog posts should be medium to long lengths. I will also write about programming as well, but mostly it is about data and analysis.&lt;/p&gt;
&lt;p&gt;If you ask me which wh- question do you like most(you do not ask such questions, but for the sake of argument), I’d immediately answer &lt;strong&gt;why&lt;/strong&gt;. Not only it gives reasons which I think is the fundamental block for many things presence, but also it gives very purpose of the things and people. After you could answer &lt;strong&gt;why&lt;/strong&gt;, everything else(what, how, which) is secondary. Icing on the cake, if you get this wh-question right, you would not have existential problems.&lt;/p&gt;
&lt;h3 id=&quot;why&quot;&gt;Why?&lt;/h3&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;I want to improve my writing skill. I am not a native speaker, sometimes find myself struggling to communicate what I have been thinking. There are many ways to improve one’s communication and writing is essential part of the most important communication channel that ever existed: email. Seriously, it is important.&lt;/li&gt;
&lt;li&gt;I want to improve my data analysis/programming skills. Data analysis is not what I do day to day in my job and more often than not, it is a starting point for most of my projects in order to understand what type of data we have and what type of questions that it could answer. If you cannot visualize/explore your data, you would have a poor head start and that may restrict the scope of the project. It is one thing you cannot do what is possible, and another completely different thing you do not know what is possible. The latter is the worst.&lt;/li&gt;
&lt;li&gt;To learn better about the topic and start a conversation. I wrote a blog post &lt;a href=&quot;http://bugra.github.io/work/notes/2014-08-23/on-machine-learning/&quot;&gt;On Machine Learning&lt;/a&gt; which is about practical problems that I faced in applying machine learning to different kinds of problems. Some people reached out to me over Twitter and some via email and I get to learn many other problems of others that I had no idea of existence. Most of the topics that I write about, I would say I had some prior work but definitely not expert level. This would allow other people yell at me over the matters that they know better than me.(which is always a good thing, you get to write one thing and learn many. Internets is not a place where you could maintain a meaningful conversation anyways)&lt;/li&gt;
&lt;li&gt;To document what I have been learning. I started to grow an interest in Bayesian models last year and learned quite well Monte-Carlo methods and how they can be applied to interesting practical problems. Right now, I am not using MCMC that much since my focus is now mostly information retrievals and search. But it is always nice to relearn the topic from your writing. Not only it makes it very easy to grasp, but also other things that I learned at that time comes back because of association.&lt;/li&gt;
&lt;li&gt;Publish interesting IPython notebooks. I spent quite a lot of time IPython notebooks either for fun or profit. Blog becomes a place where I put IPython notebooks that are worth publishing.(Thanks for Pelican and IPython notebook plugin for enabling me to publish those notebooks)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;how-come&quot;&gt;How come?&lt;/h3&gt;
&lt;p&gt;It has been around 1 year since I started this blog and I really wanted to see some patterns around the audience and what blog posts are more important to drive traffic, which channels and more about my audience. Also, to see if I need to optimize for mobile even further(right now, it is accessible through mobile and good, but it is not great) I also like to think this blog’s data is a return to its audience and it reached a point that it generates its very own data.&lt;/p&gt;
&lt;h3 id=&quot;what-did-you-use&quot;&gt;What did you use?&lt;/h3&gt;
&lt;p&gt;Google Analytics data. It is not great but it is somehow complete and allows you to access somehow nice csv’s to use. It also allows having different time intervals if you want more granular or less granular data&lt;/p&gt;
&lt;h3 id=&quot;organic-search-results&quot;&gt;Organic Search Results&lt;/h3&gt;
&lt;p&gt;If there is one thing that I like most about the blog, that is that for some of the google searches, the blog appears in top 10 and sometimes top(try googling ‘alternating least squares’) which is pretty amazing on its own, but also allows me to establish my authority on a certain topic. Second, if you think most of the mediums that drive traffic(hacker news, twitter and facebook), they are mostly seasonal and ephemeral. They create huge spikes in your traffic but that traffic does not persist over time. Search results do persist, as long as people are clicking on my links when they tpye a query and stay for a long time, which means they are happy, search engine keeps showing that link in order to make sure that the engagement is increasing.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2015/1/25/organic_search_sessions_over_months.png&quot; title=&quot;Organic Search Sessions&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Organic Search Sessions&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;I started to write regularly at the end of the January, so this graph is pretty amazing to me, growth is in the right direction. The absolute number of sessions is low albeit.&lt;/p&gt;
&lt;h3 id=&quot;type-of-devices&quot;&gt;Type of Devices&lt;/h3&gt;
&lt;p&gt;I knew that most of the devices are actually desktop computer, but I did not know that it is less than 20%. Tablet’s percentage is not good either.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2015/1/25/sessions_by_device_category.png&quot; title=&quot;Type of Devices&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Type of Devices&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Desktop is still dominates in the audience.&lt;/p&gt;
&lt;h3 id=&quot;session-numbers-of-blog-pages&quot;&gt;Session Numbers of Blog Pages&lt;/h3&gt;
&lt;p&gt;It follows Zipf’s law as not all posts are created equal. In 2015, I want to change this unequal distribution into a more uniform one. Equality for posts!&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2015/1/25/session_number_of_blog_landing_pages.png&quot; title=&quot;Session Numbers&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Session Numbers&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;session-duration-of-blog-pages&quot;&gt;Session Duration of Blog Pages&lt;/h3&gt;
&lt;p&gt;Some of them are clearly outliers as one cannot &lt;strong&gt;simply&lt;/strong&gt; spend 40 minutes but I blame Google Analytics for those types of mistakes. Here is another Zipf’s Law Graph:&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2015/1/25/session_duration_of_blog_landing_pages.png&quot; title=&quot;Session Duration&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Session Duration&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;average-session-duration-by-referrals&quot;&gt;Average Session Duration by Referrals&lt;/h3&gt;
&lt;p&gt;Apparently, Linkedin users read more than other referrals or they refer posts that are longer than others. I’d like to think the latter as one of the somehow longer post is shared in Linkedin quite heavily.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2015/1/25/average_session_duration_of_network_referrals.png&quot; title=&quot;Session Duration of Network Referrals&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Session Duration of Network Referrals&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Hacker news reader seems to just skimm the post rather than taking time to read it. If you think my two posts that become in the first page of HN are quite long.&lt;/p&gt;
&lt;h3 id=&quot;average-session-over-months&quot;&gt;Average Session over Months&lt;/h3&gt;
&lt;p&gt;Average session duration should show where post gets a lot of love, in this case it is still &lt;a href=&quot;http://bugra.github.io/work/notes/2014-08-23/on-machine-learning/&quot;&gt;On Machine Learning&lt;/a&gt; As most of my metrics is spiked around on September, it is mostly due to that post which get a lot love from HN, Linkedin and Twitter.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2015/1/25/average_sesssion_per_month.png&quot; title=&quot;Average Session over Months&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Average Session over Months&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;blog-users-flow&quot;&gt;Blog Users Flow&lt;/h3&gt;
&lt;p&gt;I am happy with most of the data that Google Analytics provide and this section is not one of them. They would just allow a weird screenshot of the users flow in the website and does not give any raw data.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2015/1/25/blog-users-flow.png&quot; title=&quot;Blog Users Flow&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Blog Users Flow&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;There are a lot of drop offs when they hit the website and I guess I need to provide better tools to expose other content in the website. It seems Disqus does not do a good job in terms of recommending the relevant content in the bottom of every blog posts. Also, there is no available option to go from one post to another, you could only go back to home page and then go to the another post.&lt;/p&gt;
&lt;h3 id=&quot;session-numbers-by-channel&quot;&gt;Session Numbers by Channel&lt;/h3&gt;
&lt;p&gt;If I want to look at the channels in terms of the traffic they bring, there is not a lot of surprise, except the confusion that Google Analytics causes. I have no idea what “Other” or “Direct” means in the below graph, but I am putting to stress on how important the social media for my blog is.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2015/1/25/channel_by_session.png&quot; title=&quot;Session Numbers by Channel&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Session Numbers by Channel&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;session-numbers-over-month&quot;&gt;Session Numbers over Month&lt;/h3&gt;
&lt;p&gt;If I want to see how much HN drives traffic to my website, I just need to visualize the number of sessions over month; and the peaks are when my blog post makes it to front page.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2015/1/25/n_session_per_month.png&quot; title=&quot;Session Numbers over Months&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Session Numbers over Months&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;number-of-unique-users-over-month&quot;&gt;Number of Unique Users over Month&lt;/h3&gt;
&lt;p&gt;Unsurprisingly, number of unique users also follow session numbers over the month.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2015/1/25/n_session_per_month.png&quot; title=&quot;Number of Unique Users over Months&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Number of Unique Users over Months&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;number-of-session-by-network-referrals&quot;&gt;Number of Session by Network Referrals&lt;/h3&gt;
&lt;p&gt;If I actually want to learn which social network actually drives most of the traffic, it is definitely Hacker News(HN). If you do not know know about HN, it is a community curated links and provides a nice way to discuss the content of the links, very similar to Reddit in many aspects, but its audience is mostly technology savy people. They do not disclose the number of visitors or other audience metrics, but when your website becomes the first page for 3-4 hours, it guarantees 10K users in a very small period of time. As I mentioned earlier, two of my posts made it to front page and that was more than enough to make HN the first among many other social networks.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2015/1/25/number_of_sessions_of_network_referrals.png&quot; title=&quot;Number of Session by Network Referrals&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Number of Session by Network Referrals&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;pageviews&quot;&gt;Pageviews&lt;/h3&gt;
&lt;p&gt;What about the pageviews grouped by different aspects of the audience.&lt;/p&gt;
&lt;h3 id=&quot;pageviews-of-network-referrals&quot;&gt;Pageviews of Network Referrals&lt;/h3&gt;
&lt;p&gt;Pageviews of network referrals closely follows the number of session with couple of small twists, Twitter users are apparently more exploring more on the website and HN users only consume what they come for.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2015/1/25/page_views_of_network_referrals.png&quot; title=&quot;Pageviews by Network Referrals&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Pageviews by Network Referrals&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;pageviewssession-of-network-referrals&quot;&gt;Pageviews/Session of Network Referrals&lt;/h3&gt;
&lt;p&gt;Which social network user does most of the page views per session?&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2015/1/25/page_views_of_network_referrals.png&quot; title=&quot;Pageviews by Network Referrals&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Pageviews by Network Referrals&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Apparently, one Linkedin user comes, she sees another page as well.&lt;/p&gt;
&lt;h3 id=&quot;percentage-of-new-sessionstotal-sessions&quot;&gt;Percentage of New Sessions/total Sessions&lt;/h3&gt;
&lt;p&gt;Percentage of new sessions follow total number of sessions loosely. When new peak appears, then the new sessions peaks as well.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2015/1/25/percentage_new_sessions_vs_sessions.png&quot; title=&quot;Percentage of New Sessions/Total Sessions&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Percentage of New Sessions/Total Sessions&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;percentage-of-sessions-by-browser&quot;&gt;Percentage of Sessions By Browser&lt;/h3&gt;
&lt;p&gt;Chrome is the most dominant and Firefox is the second, no surprise here. However, I was not expecting Safari and its position in the list. IE does not have much weight, which I am glad, as I do not have an environment to test IE.(which is pretty great excuse)&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2015/1/25/percentage_of_sessions_by_browser.png&quot; title=&quot;Percentage of Sessions by Browser&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Percentage of Sessions by Browser&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;percentage-of-sessions-by-device-brand&quot;&gt;Percentage of Sessions by Device Brand&lt;/h3&gt;
&lt;p&gt;Apple products get the top 2 and there are couple of Goole Nexuses and Samsungs in the top 20, and then the remaining ones are your long tail(mostly Samsungs and other Android OEMs)&lt;/p&gt;
&lt;h3 id=&quot;first-20&quot;&gt;First 20&lt;/h3&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2015/1/25/percentage_of_sessions_by_device_brand_first_20.png&quot; title=&quot;First 20 Mobile Brands&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;First 20 Mobile Brands&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;remaining-80&quot;&gt;Remaining 80&lt;/h3&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2015/1/25/percentage_of_sessions_by_device_brand_from_20_to_100.png&quot; title=&quot;Remaining 80 Mobile Brands&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Remaining 80 Mobile Brands&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Samsung seems to be quite dominant from a very small sample size. However, sum of Apple products is more than sum of Android phones and other phones(there are few Microsoft phones)&lt;/p&gt;
&lt;h3 id=&quot;distribution-of-users-by-country&quot;&gt;Distribution of Users by Country&lt;/h3&gt;
&lt;p&gt;English speaking countries have the head start in this one, and they do not disappoint. Even though UK and Canada is small countries by population comparing to Germany and France, they are leading in terms of users. I’d expect more users from China and India.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2015/1/25/percentage_of_sessions_by_location.png&quot; title=&quot;Users by Country&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Users by Country&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;distribution-of-operating-systems-of-users&quot;&gt;Distribution of Operating Systems of Users&lt;/h3&gt;
&lt;p&gt;Windows is the leading OS, which surprised me as the IE gets very small share from browser share. Apparently, Google succeeded to convince Windows users Chrome is better than their favorite browser.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2015/1/25/percentage_of_sessions_by_location.png&quot; title=&quot;Users by Country&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Users by Country&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/body&gt;
&lt;/html&gt;
</content>
  </entry>
  <entry xml:base="https://bugra.github.io/">
    <title type="text">Machine Learning for Programming</title>
    <id>https://bugra.github.io/posts/2015/4/26/machine-learning-for-programming</id>
    <updated>2015-04-26T00:00:00Z</updated>
    <published>2015-04-26T00:00:00Z</published>
    <link href="https://bugra.github.io/posts/2015/4/26/machine-learning-for-programming" />
    <author>
      <name>Bugra Akyildiz</name>
    </author>
    <content type="html">&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;
  &lt;title&gt;-&lt;/title&gt;
  &lt;style&gt;
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
  &lt;/style&gt;
  &lt;!--[if lt IE 9]&gt;
    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;
  &lt;![endif]--&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;&lt;a href=&quot;http://norvig.com/&quot;&gt;Peter Norvig&lt;/a&gt; presented a great overview how programming could use more machine learning. He presented quite nice overview of what has been done in research and what could be possible. Generally, the presentation followed a question-answer style where he first presented the question and then try to give answer by providing additional context. I liked this format a lot. It is both easy to follow and also easy to build the solution step by step.&lt;/p&gt;
&lt;h3 id=&quot;what-is-programming&quot;&gt;What is programming?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Given a specification of a function f&lt;/li&gt;
&lt;li&gt;Implement f that meets the specification&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;what-is-machine-learning&quot;&gt;What is Machine Learning?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Given some example (x, y) pairs&lt;/li&gt;
&lt;li&gt;Induce f such that y=f(x) for given pairs, and generalizes well for unseen x.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;questions-answers&quot;&gt;Questions &amp;amp; Answers&lt;/h3&gt;
&lt;p&gt;Q: Can we learn functions from examples?&lt;br /&gt;
A: Yes, for many kinds of functions.&lt;/p&gt;
&lt;p&gt;Q: Can we learn parts of programs from examples?&lt;br /&gt;
A: Yes, machine learning is the ultimate agile programming.&lt;/p&gt;
&lt;h3 id=&quot;program-induction&quot;&gt;Program Induction&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;1980s: Logical Functional Languages&lt;/li&gt;
&lt;li&gt;2000s: Probabilistic search rather than logical&lt;/li&gt;
&lt;li&gt;2010s: Deep, LSTM: intermediate representations&lt;/li&gt;
&lt;li&gt;TOOWTDI languages&lt;/li&gt;
&lt;li&gt;Only one of “a+1” or “1+a” is allowed&lt;/li&gt;
&lt;li&gt;Stranger type systems&lt;/li&gt;
&lt;li&gt;Total functional programming: only allow recursion that probably terminates&lt;/li&gt;
&lt;li&gt;DSLs, such as regular expressions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Q: Can we learn entire programs from examples?&lt;br /&gt;
A: Yes, for short programs; no, for complex programs&lt;/p&gt;
&lt;h3 id=&quot;mini-lesson-in-ml&quot;&gt;Mini Lesson in ML&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Regression&lt;/li&gt;
&lt;li&gt;Gradient Descent&lt;/li&gt;
&lt;li&gt;Neural Networks&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;regression&quot;&gt;Regression&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Find a function, f, to minimize error on examples, and generalization (previously unseen) erro.&lt;/li&gt;
&lt;li&gt;&lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;f&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;msub&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;f&lt;/mi&gt;&lt;/msub&gt;&lt;mi&gt;L&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;f&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;postfix&quot;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;f =min_f Loss(f)&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/li&gt;
&lt;li&gt;&lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;L&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;f&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;postfix&quot;&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;E&lt;/mi&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mi&gt;L&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;f&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;postfix&quot;&gt;)&lt;/mo&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mi&gt;G&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;z&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;L&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;f&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;postfix&quot;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;Loss(f) = EmpiricalLoss(f) + GeneralizeLoss(f)&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/li&gt;
&lt;li&gt;&lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;E&lt;/mi&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;f&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;postfix&quot;&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;msub&gt;&lt;mo&gt;∑&lt;/mo&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;(&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mi&gt;f&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;(&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;postfix&quot;&gt;)&lt;/mo&gt;&lt;msup&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;postfix&quot;&gt;)&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;Empiricalloss(f) = \sum_i (y_i - f(x_i))^2&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/li&gt;
&lt;li&gt;Linear regression: calculate exact answers(Gauss)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;gradient-descent&quot;&gt;Gradient Descent&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;For linear functions =&amp;gt; minimization function is convex&lt;/li&gt;
&lt;li&gt;Non-linear functions =&amp;gt; surface is more complicated&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;neural-network&quot;&gt;Neural Network&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Has nothing to do with Neural&lt;/li&gt;
&lt;li&gt;Sums + Products + Squashing Function (complicated function to optimize)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Q: Can we learn complex non-traditional programs from examples?&lt;br /&gt;
A: Not yet, maybe someday.&lt;/p&gt;
&lt;p&gt;Q: Can we learn to optimize programs?&lt;br /&gt;
A: Yes, short parts.&lt;/p&gt;
&lt;p&gt;Q: Can we learn to efficiently execute declarative programs?&lt;br /&gt;
A: Maybe. So far, not done via learning. Need help with languages.&lt;/p&gt;
&lt;h3 id=&quot;declarative-languages-for-aiml-applications&quot;&gt;Declarative Languages for AI/ML Applications&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;DYNA(Jason Eisner)
&lt;ul&gt;
&lt;li&gt;Probabilistic Context Free Parser&lt;/li&gt;
&lt;li&gt;A single word is a phrase(given an appropriate grammar rule)&lt;/li&gt;
&lt;li&gt;phrase(X, I, J) += rewrite(X, W) * word(W, I, J)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Probabilistic(Relational Languages: any variables can be input or output)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Q: Can we learn an interpreter?&lt;br /&gt;
A: Partly, that is not the point.&lt;/p&gt;
&lt;p&gt;Q: Can we learn a user’s language?&lt;br /&gt;
A: Interesting idea, but so far done by hand.&lt;/p&gt;
&lt;p&gt;Q: Can we learn tutoring feedback from examples?&lt;br /&gt;
A: Yes! Works better as a human/machine partnership.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</content>
  </entry>
  <entry xml:base="https://bugra.github.io/">
    <title type="text">Personalization Palooza Notes</title>
    <id>https://bugra.github.io/posts/2015/3/1/personalization-palooza-notes</id>
    <updated>2015-03-01T00:00:00Z</updated>
    <published>2015-03-01T00:00:00Z</published>
    <link href="https://bugra.github.io/posts/2015/3/1/personalization-palooza-notes" />
    <author>
      <name>Bugra Akyildiz</name>
    </author>
    <content type="html">&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;
  &lt;title&gt;-&lt;/title&gt;
  &lt;style&gt;
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
  &lt;/style&gt;
  &lt;!--[if lt IE 9]&gt;
    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;
  &lt;![endif]--&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;Last week, &lt;a href=&quot;http://www.axial.net/&quot;&gt;we&lt;/a&gt; attended &lt;a href=&quot;https://www.eventbrite.com/e/personalizationpalooza-tickets-15005357428&quot;&gt;Personalization Palooza&lt;/a&gt; last week. It was a lot of fun.&lt;/p&gt;
&lt;p&gt;If you are still giggling, just ignore the name of the event for a second. Just look at the speaker list. (I know name makes hard to take the event seriously, but it was serious.) Another bummer was that event was not personalized(you kind of expect some sort of personalization from a personalization mini-conference, no?). Doug and I attended to the “same” event.(some may argue our preferences are similar, though)&lt;/p&gt;
&lt;h2 id=&quot;first-session&quot;&gt;First Session&lt;/h2&gt;
&lt;h3 id=&quot;alexander-tuzhilin&quot;&gt;Alexander Tuzhilin&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://pages.stern.nyu.edu/~atuzhili/&quot;&gt;Alexander Tuzhilin&lt;/a&gt; mentioned not well known user aspects of the recommender systems. Most of the products put some sort of metric to measure the success of recommender comparing to the baseline, but this measure may not be correct all the time. What does it mean if your user spends more time on the website, but the time spent causes only frustration(but engagement is up!)? What does it mean for a person to give a three star to a movie? The movie itself, internet connection(in the case of Netflix), the environment, size of the monitor, lightning and noise all contribute to this experience but user gives a rating to the movie in Netflix a three star. Up to this point, we did not even get to the user bias when they evaluated the movie.&lt;/p&gt;
&lt;h4 id=&quot;data-collection&quot;&gt;Data collection&lt;/h4&gt;
&lt;p&gt;Data collection process plays an important role in any type of machine learning but especially if you are collecting feedback from the user, you should be double careful. Not only humans are quite biased, they are prone to all of kinds of outer effects when they are asked to evaluate a thing.&lt;/p&gt;
&lt;h3 id=&quot;alejandro-jaimes&quot;&gt;Alejandro Jaimes&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://www.alexjaimes.com/&quot;&gt;Alejandro Jaimes&lt;/a&gt; talked more about product aspect of the recommender systems.&lt;/p&gt;
&lt;h4 id=&quot;product&quot;&gt;Product&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/work/notes/2015/3/1/yahoo-product.jpg&quot; alt=&quot;Yahoo Product&quot; /&gt; They begin with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Design&lt;/li&gt;
&lt;li&gt;Hypotheses&lt;/li&gt;
&lt;li&gt;Data&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;around user. This is pretty good overview in the product development. You have your hypotheses or gut feelings and based on data from the user, you could refine your hypotheses and design. Those refinements of course bring changes in the data as well. By using this iterative process, ideally we want to converge to ideal state where there would be no change in iteration, a.k.a “perfect product”.&lt;/p&gt;
&lt;p&gt;He talked about how an horizontal design of a product may change how the user interacts with the website. Therefore, the data collection process and of course the recommendations may change due to that.&lt;/p&gt;
&lt;p&gt;This is an eye opening for me. I generally tend to look at the data and not the collection process. However, when users are presented two screens where one of them uses vertical scrolling and other one uses horizontal scrolling, the preferences could be different even if the screen has the same videos. Some of the users may click on different videos in different screens not because they prefer the movie per se, but it could be just more convenient for them to navigate in that particular way. This not only changes data collection process but also evaluation as well.&lt;/p&gt;
&lt;h3 id=&quot;context-and-time-news&quot;&gt;Context and Time =&amp;gt; News&lt;/h3&gt;
&lt;p&gt;Time is a fundamental part of news. If newspapers need to act on the news, they need to be fast, otherwise they will quickly become irrelevant. Therefore, when one user clicks on some news does not necessarily mean, they will be interested in that news in 2 months later. In that sense, the news itself is quite ephemeral. Therefore, the recommender system needs to take the time component into account. Furthermore, he also mentioned even time of the day may play a role which type of content user is interested in. Some people prefer reading news in mornings, but maybe not so much in evenings.&lt;/p&gt;
&lt;h3 id=&quot;tony-jebara&quot;&gt;Tony Jebara&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://www1.cs.columbia.edu/~jebara/&quot;&gt;Tony Jebara&lt;/a&gt; presented two different research areas he is pursuing. The first one is that in order to correspond to the privacy issues in the social networks, they are using a metric to remove some of the attributes for a particular user in order to achieve anoymity. He was presenting three different users “liberal”, “average” and “paranoid”. Paranoid tends to be the one that wants to keep his personal information to himself. Liberal does not really care what is private and what is not. Every single individual user has different opinions/concerns around his personal information, so they are proposing a metric where user could become anonymized based on that metric in different levels(personalized anonymity if you like) Second area is that they could learn a distance metric from the network based on what a group of users share. &lt;a href=&quot;http://papers.nips.cc/paper/4392-learning-a-distance-metric-from-a-network&quot;&gt;Paper&lt;/a&gt; and its &lt;a href=&quot;https://github.com/berty38/structure-preserving-metric-learning&quot;&gt;code&lt;/a&gt; is available.&lt;/p&gt;
&lt;p&gt;He also gave a good example in the panel when he was asked the following question: “What is most annoying thing in the internet in terms of recommender systems”? His example was mortgage ads. Just because he is buying a home and getting a mortgage does not necessarily mean he is still interested in other mortgages. He has already one. For goods and services like mortgage should be somehow treated differently than stuff you buy periodically like groceries.&lt;/p&gt;
&lt;h3 id=&quot;beitao-li&quot;&gt;Beitao Li&lt;/h3&gt;
&lt;p&gt;He talked about how they implemented A/B system as a plugin to whole system and how they could act immediately to the results that they are getting from A/B testing. It should be quite nice to be able to measure the effect of color change in some button in the website and act on it.&lt;/p&gt;
&lt;h3 id=&quot;second-session&quot;&gt;Second Session&lt;/h3&gt;
&lt;p&gt;This session was mostly about “content” which was not surprising as Sailthru built a business around personalization in marketing, Parsely provides analytics for publishers, Circa curates the most relevant news for you, Zergnet is kind of personalized Google News, GameChanger Media collects and published amateur sports and Agolo creates personalized summaries of news. All around content.&lt;/p&gt;
&lt;h3 id=&quot;some-notes&quot;&gt;Some Notes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Agolo uses tweets summarizing the articles. This is very nice approach. When people share some article, the quotes that they put in the tweets are generally either impressive sentences or summarizing sentence(like conclusion). This could be very hard to mine from the text but with crowdsourced approach, it could be quite doable.&lt;/li&gt;
&lt;li&gt;Generally, when people say recommender or personalization, they agreed on the analytics in the lowest level. This is in my experience is also quite true. In order to do something with data, you should at least be able to count, do analytics. On top of analytics, a recommender layer or a personalization layer could be built more efficiently; which is Parsely could actually provide as well.&lt;/li&gt;
&lt;li&gt;When GameChanger Media presented their numbers, my jaw dropped. It is amazing how many events that they collect and publishes. Go amateur sports!&lt;/li&gt;
&lt;li&gt;Personalization in marketing, like advertising depends on multiple data source integration. As they say: “Whole is greater than the sum of its parts”&lt;/li&gt;
&lt;li&gt;Content recommenders generally point to a specific problem: there are too many news/data sources but the time is limited. By curating the news or summarizing your news, startups in this session enable people to use their finite amount of time more efficiently on the seemingly infinite number of news/sources. Some solve this problem by filtering, some do by summarizing. We will see who will win.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;third-session&quot;&gt;Third Session&lt;/h3&gt;
&lt;p&gt;There was no presentation in this one and I did not really listen to the panel. In my defense, Joseph Urban Theater made a spectacular job in their architecture and interior design and we had to catch at a meeting at work. However, Chris Wiggins said a phrase that I took with me: “people, ideas and things”. I am planning to write a blog post on it. Also, Gary Kazantsev mentioned interesting nlp projects that they are doing at Bloomberg.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</content>
  </entry>
  <entry xml:base="https://bugra.github.io/">
    <title type="text">K-Means, Sparse Coding, Dictionary Learning and All That</title>
    <id>https://bugra.github.io/posts/2015/2/10/k-means-sparse-coding-dictionary-learning-and-all-that</id>
    <updated>2015-02-10T00:00:00Z</updated>
    <published>2015-02-10T00:00:00Z</published>
    <link href="https://bugra.github.io/posts/2015/2/10/k-means-sparse-coding-dictionary-learning-and-all-that" />
    <author>
      <name>Bugra Akyildiz</name>
    </author>
    <content type="html">&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;
  &lt;title&gt;-&lt;/title&gt;
  &lt;style&gt;
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
  &lt;/style&gt;
  &lt;!--[if lt IE 9]&gt;
    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;
  &lt;![endif]--&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h3 id=&quot;feature-learning&quot;&gt;Feature Learning&lt;/h3&gt;
&lt;p&gt;Feature learning especially from images is a fundamental step in a classification pipeline as the raw pixels create both huge feature vectors per image and are not necessarily good to represent the image in an efficient way for image classification problems.&lt;/p&gt;
&lt;h3 id=&quot;unsupervised-feature-learning&quot;&gt;Unsupervised Feature Learning&lt;/h3&gt;
&lt;p&gt;Computer vision community came up with engineered feature detectors first (SIFT, HoG and so on), then try to use unsupervised learning algorithm to find useful visual “word”s in the image so that they could be used for the classification. Nowadays, deep learning is used for feature extraction and also classification at some extent. However, one thing did not change; to be able to learn important and relevant features from the images in an automated way.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cs.stanford.edu/~acoates/&quot;&gt;Adam Coates&lt;/a&gt; in &lt;a href=&quot;http://cs.stanford.edu/people/ang/&quot;&gt;Andrew Ng&lt;/a&gt;’s group put a lot of work in this area. The premise is quite exciting, to be able to learn features similar to sparse coding or dictionary learning using one of the simplest and efficient algorithm(k-means, surprise!) which is easily scalable and parallelizable(a variant of k-means albeit).&lt;/p&gt;
&lt;h3 id=&quot;experiments&quot;&gt;Experiments&lt;/h3&gt;
&lt;p&gt;I used &lt;a href=&quot;http://www.cs.toronto.edu/~kriz/cifar.html&quot;&gt;CIFAR 100&lt;/a&gt; datasets to learn and display the filters. Sadly, I could not get better than what papers reported so I’ll skip on reporting the classification accuracies. Every section will have the filters that are learned in the CIFAR dataset so that you could also have chance to observe similarities and differences.&lt;/p&gt;
&lt;h3 id=&quot;k-means&quot;&gt;K-Means&lt;/h3&gt;
&lt;p&gt;K-Means could be one of the most commonly used unsupervised learning algorithm both it is easy to implement, efficient and also it is easy to reason about. Basic premise of the K-Means boils down to represent the observations in a much efficient representation where some observations are mapped to a cluster points.&lt;/p&gt;
&lt;h3 id=&quot;k-means-problem-formulation&quot;&gt;K-Means Problem Formulation&lt;/h3&gt;
&lt;p&gt;There are &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;n&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; observations given a dataset &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mi&gt;P&lt;/mi&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;P&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; where we represent the samples as follows:&lt;/p&gt;
&lt;p&gt;&lt;math display=&quot;block&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;P&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;msubsup&gt;&lt;msup&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mrow&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;postfix&quot;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;/msup&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/msubsup&gt;&lt;mo&gt;⊆&lt;/mo&gt;&lt;msup&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt; P = {x^{(i)}}_{i=1}^n \subseteq R^d   &lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; where we want to represent the samples in a number of clusters &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;mo&gt;∈&lt;/mo&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;k \in N&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;.(so the k-means name)&lt;/p&gt;
&lt;h3 id=&quot;k-means-objective-function&quot;&gt;K-Means Objective Function&lt;/h3&gt;
&lt;p&gt;We want to find &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;k&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; number of centroids $ {c^{1}, , c^{(k)}} R^d $, which are the local(global minimum is intractable) minimum of the following objective function: &lt;math display=&quot;block&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;B&lt;/mi&gt;&lt;mi&gt;P&lt;/mi&gt;&lt;/msub&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;postfix&quot;&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mfrac&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/mfrac&gt;&lt;munderover&gt;&lt;mo&gt;∑&lt;/mo&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/munderover&gt;&lt;munder&gt;&lt;mo&gt;min&lt;/mo&gt;&lt;mrow&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;mo&gt;∈&lt;/mo&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;/mrow&gt;&lt;/munder&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;∥&lt;/mo&gt;&lt;msup&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mrow&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;postfix&quot;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;/msup&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;msup&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mrow&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;postfix&quot;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;/msup&gt;&lt;msubsup&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;postfix&quot;&gt;∥&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msubsup&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt; B_P(c) = \frac{1}{n}\displaystyle\sum_{i=1}^n \min_{j \in k} \lVert x^{(i)} - c^{(j)} \rVert_2^2&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/p&gt;
&lt;p&gt;Most common algorithm is to use an EM(Expectation Maximization Algorithm); first change the centroids position(or randomly initialize) and then compute the distance of the observations to the centroids and then reassign the observations to the closest centroids. After a number of iterations, either centroids would not move at all, or their distance change would be minimal, so the convergence.&lt;/p&gt;
&lt;h3 id=&quot;k-means-triangle&quot;&gt;K-Means Triangle&lt;/h3&gt;
&lt;p&gt;There is a modified version of K-Means which is called K-Means Tri where every observation does not get the hard cluster assignments(1 or 0) but rather a score within each cluster. This creates a competition in the features inside of the cluster. This allows each feature to “compete” to get the highest score. This could be much more accurate for the clusters that are quite large where the all of the observations get same score. &lt;a href=&quot;http://ai.stanford.edu/~ang/papers/nipsdlufl10-AnalysisSingleLayerUnsupervisedFeatureLearning.pdf&quot;&gt;Empirically&lt;/a&gt;, it also produces sparse outputs as well.&lt;/p&gt;
&lt;h3 id=&quot;k-means-tri-objective-function&quot;&gt;K-Means Tri Objective Function&lt;/h3&gt;
&lt;p&gt;Objective function does not change but the scores of each observation changes. &lt;math display=&quot;block&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;f&lt;/mi&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;/msub&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;postfix&quot;&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mo&gt;max&lt;/mo&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;(&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mi&gt;μ&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;z&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;postfix&quot;&gt;)&lt;/mo&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;z&lt;/mi&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;/msub&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;postfix&quot;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt; f_k(x) = \max(0, \mu(z) - z_k)  &lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; where $z_k=x - c^{k} _2 $ and &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;μ&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;z&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;postfix&quot;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\mu(z)&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; is the mean of observations in &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mi&gt;z&lt;/mi&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;z&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;.&lt;/p&gt;
&lt;h3 id=&quot;k-means-results&quot;&gt;K-Means Results&lt;/h3&gt;
&lt;p&gt;I run the K-Means Tri with whitening and without whitening on the dataset. My observation, for the K-Means without whitening is the patches end up low-frequency and color dominant whereas the whitened patches are more like edge-like filters.&lt;/p&gt;
&lt;h3 id=&quot;patch-length-8&quot;&gt;Patch Length = 8&lt;/h3&gt;
&lt;p&gt;Whitened filters:&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2015/2/10/kmeans_filters_stride_8_100.png&quot; title=&quot;K-Means Filters - Unnormalized with Stride=8&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;K-Means Filters - Unnormalized with Stride=8&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Not-whitened filters:&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2015/2/10/kmeans_filters_stride_8_unnormalized_100.png&quot; title=&quot;K-Means Filters - Unnormalized with Stride=8&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;K-Means Filters - Unnormalized with Stride=8&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;patch-length-4&quot;&gt;Patch Length = 4&lt;/h3&gt;
&lt;p&gt;Whitened filters:&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2015/2/10/kmeans_filters_stride_4_100.png&quot; title=&quot;K-Means Filters with Stride=4&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;K-Means Filters with Stride=4&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Not-whitened filters:&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2015/2/10/kmeans_filters_stride_4_unnormalized_100.png&quot; title=&quot;K-Means Filters with Stride=4&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;K-Means Filters with Stride=4&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;Generally people use some whitening for various reasons; for K-Means, it makes easier to converge also filters-learned are more edge-like rather than pure colors or low-frequency parts in the image as you could see the result of the images given above.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;sparse-coding&quot;&gt;Sparse Coding&lt;/h3&gt;
&lt;p&gt;Sparse Coding like most of the decomposition/factorization methods try to represent a signal with different atoms, in the case of sparse coding, these atoms are sparse and the matrix that yields this atom is overcomplete. This sparsity and overcompleteness nature of the matrix enables a robust reconstruction of the signal from very few atoms as long as some conditions are met.&lt;/p&gt;
&lt;p&gt;Representation of image could be done by linear transform in the following way:&lt;/p&gt;
&lt;p&gt;&lt;math display=&quot;block&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;munderover&gt;&lt;mo&gt;∑&lt;/mo&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;/munderover&gt;&lt;msub&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;msub&gt;&lt;mi&gt;ϕ&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt; x = \displaystyle\sum_{i=1}^m a_i \phi_i  &lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; where $ m n$ so that we have an overcomplete representation of the original observation matrix.&lt;/p&gt;
&lt;p&gt;Sparse coding and most of the atom based methods try to get a variety of atoms either it is a precomputed matrix(FFT, PCA, etc) or a “dictionary” as in the dictionary learning which is trained from a train set. The premise remains same we want to get a superposition of atoms such that we would have the most exact and accurate information from the images and since we know which atoms we use, we have a good representation of image as well.&lt;/p&gt;
&lt;p&gt;Since it is an overcomplete basis and atoms are not linearly independent from each other, the input and output images relationship is not as linear as other transformations which have atoms that are linearly independent from each other.&lt;/p&gt;
&lt;h3 id=&quot;biological-reasoning&quot;&gt;Biological Reasoning&lt;/h3&gt;
&lt;p&gt;This may not work very well for other type of images or other types of signal, but empirically it gives good results and nice representation of natural images. There are also biological reasons why representing an image in a sparse way might be a good idea:&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;It increases capacity of memory(associative)&lt;/li&gt;
&lt;li&gt;It also makes it easy to form associations&lt;/li&gt;
&lt;li&gt;It minimizes the wiring length&lt;/li&gt;
&lt;li&gt;It increases the metabolic efficiency.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;However, this part is mostly concerned the early visual cortex and trying to mimic that part of the brain may not be very accurate for image representation.&lt;/p&gt;
&lt;h3 id=&quot;mathematical-reasoning&quot;&gt;Mathematical Reasoning&lt;/h3&gt;
&lt;p&gt;Natural images could be represented as a small number of primitives(mostly low-frequency) like edges, lines, etc. This is also the reasoning behind Gabor filters and early work in the signal processing community that built a lot of filtering work to represent images. &lt;a href=&quot;http://www.naturalimagestatistics.net/nis_preprintFeb2009.pdf&quot;&gt;Natural Image Statistics&lt;/a&gt; examines more closely in this type of behavior and states similar conclusion and a method(ICA) which learns Gabor-like filters.&lt;/p&gt;
&lt;h3 id=&quot;sparse-coding-objective-function&quot;&gt;Sparse Coding Objective Function&lt;/h3&gt;
&lt;p&gt;We would like to minimize the following objective function and it has a sparsity regularizer since we want the basis atoms to be sparse:&lt;/p&gt;
&lt;p&gt;&lt;math display=&quot;block&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;z&lt;/mi&gt;&lt;msub&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mrow&gt;&lt;msubsup&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;/msubsup&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;ϕ&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;munderover&gt;&lt;mo&gt;∑&lt;/mo&gt;&lt;mrow&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/munderover&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;∥&lt;/mo&gt;&lt;msup&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;/msup&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;munderover&gt;&lt;mo&gt;∑&lt;/mo&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;/munderover&gt;&lt;msubsup&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mrow&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;postfix&quot;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;/msubsup&gt;&lt;msub&gt;&lt;mi&gt;ϕ&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;msup&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;postfix&quot;&gt;∥&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msup&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mi&gt;λ&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;∥&lt;/mo&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;postfix&quot;&gt;∥&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt; minimize_{a_i^{j}, \phi_i} \displaystyle\sum_{j=1}^n \lVert x^{j} - \displaystyle\sum_{i=1}^m a_i^{(j)} \phi_i \rVert^2 + \lambda \lVert a \rVert &lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; subject to:&lt;/p&gt;
&lt;p&gt;&lt;math display=&quot;block&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;∥&lt;/mo&gt;&lt;msubsup&gt;&lt;mi&gt;ϕ&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msubsup&gt;&lt;msup&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;postfix&quot;&gt;∥&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msup&gt;&lt;mo&gt;≤&lt;/mo&gt;&lt;mi&gt;C&lt;/mi&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mo&gt;∀&lt;/mo&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mi&gt;…&lt;/mi&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt; \lVert \phi_i^2 \rVert^2 \leq C, \forall i=1, \ldots, n &lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/p&gt;
&lt;p&gt;Normally, &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;msub&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/msub&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;l_0&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; measures the direct sparsity that is imposed on the coefficients but it is non-differentiable and difficult to minimize the objective function if it had been used. &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;msub&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;l_1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; penalty provides a trade-off option where &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;msub&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/msub&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;l_0&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; is not good for optimization and &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;msub&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;l_2&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; is not a term that would contribute the sparsity of the signal.&lt;/p&gt;
&lt;h3 id=&quot;dictionary-learning&quot;&gt;Dictionary Learning&lt;/h3&gt;
&lt;p&gt;In the Dictionary Learning problem, we are given a data and asked to represent a number of basises, very similar to Principal Component Analysis(PCA) or Fast Fourier Transform(FFT) in nature. However, with a big distinction, basises(atoms) do not have to be orthogonal and also the dictionary matrix is larger than the total number of vectors that we want to represent. With a sparse penalization regularization term, one can build very efficient representations of natural signals (natural images) from these sparse atoms. Moreover, after building these dictionaries one could only pass the dictionary along with the representation of the vector to enable robust recovery similar to FFT.&lt;/p&gt;
&lt;p&gt;Dictionary learning is very similar to sparse coding in terms of it tries to represent the data, it tries to find good atoms from a “dictionary” where the dictionary atoms are learned from the training set. Especially, for classification tasks, as long as the user has a good dictionary, one could build very efficient vectors using atoms from the dictionary for a variety of tasks including denoising and classification.&lt;/p&gt;
&lt;h3 id=&quot;dictionary-objective-function&quot;&gt;Dictionary Objective Function&lt;/h3&gt;
&lt;p&gt;&lt;math display=&quot;block&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mi&gt;D&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;postfix&quot;&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;munder&gt;&lt;mo&gt;min&lt;/mo&gt;&lt;mrow&gt;&lt;mi&gt;α&lt;/mi&gt;&lt;mo&gt;∈&lt;/mo&gt;&lt;msup&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;/munder&gt;&lt;mfrac&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/mfrac&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;∥&lt;/mo&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mi&gt;D&lt;/mi&gt;&lt;mi&gt;α&lt;/mi&gt;&lt;msubsup&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;postfix&quot;&gt;∥&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msubsup&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mi&gt;λ&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;∥&lt;/mo&gt;&lt;mi&gt;α&lt;/mi&gt;&lt;msub&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;postfix&quot;&gt;∥&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt; t(x, D) = \min_{\alpha \in R^n} \frac{1}{2} \lVert x - D\alpha \rVert_2^2 + \lambda \lVert \alpha \rVert_1 &lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/p&gt;
&lt;p&gt;where as in the case of sparse coding, &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mi&gt;λ&lt;/mi&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\lambda&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; is our sparse constraint. This objective function is called &lt;em&gt;basis pursuit&lt;/em&gt; and also &lt;em&gt;Lasso&lt;/em&gt; as well.&lt;/p&gt;
&lt;h3 id=&quot;results&quot;&gt;Results&lt;/h3&gt;
&lt;p&gt;I am providing 256 patches from the dictionary. Some of them are quite similar to what K-Means filters are like. However, some of them only capture the corners in the images and there are a couple of filters that they differ only by translation. Some of the filters learn only colors similar to some of the filters in K-Means that are somehow similar to each other after selecting 20 of them by hand. Some of even if after whitening, which was somehow disappointing.&lt;/p&gt;
&lt;h3 id=&quot;whitened-filters&quot;&gt;Whitened Filters&lt;/h3&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2015/2/10/dictionary_learning_stride_8_256.png&quot; title=&quot;Whitened Filters&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Whitened Filters&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;unwhitened-filters&quot;&gt;Unwhitened Filters&lt;/h3&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2015/2/10/dictionary_learning_stride_8_256_unnormalized.png&quot; title=&quot;Unwhitened Filters&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Unwhitened Filters&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/body&gt;
&lt;/html&gt;
</content>
  </entry>
  <entry xml:base="https://bugra.github.io/">
    <title type="text">Topic Modeling for the Uninitiated</title>
    <id>https://bugra.github.io/posts/2015/2/21/topic-modeling-for-the-uninitiated</id>
    <updated>2015-02-21T00:00:00Z</updated>
    <published>2015-02-21T00:00:00Z</published>
    <link href="https://bugra.github.io/posts/2015/2/21/topic-modeling-for-the-uninitiated" />
    <author>
      <name>Bugra Akyildiz</name>
    </author>
    <content type="html">&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;
  &lt;title&gt;-&lt;/title&gt;
  &lt;style&gt;
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
  &lt;/style&gt;
  &lt;!--[if lt IE 9]&gt;
    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;
  &lt;![endif]--&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h3 id=&quot;motivation&quot;&gt;Motivation&lt;/h3&gt;
&lt;p&gt;As more and more data are stored digitally and people have better and improved tools for publishing, we are witnessing more and more text data has been collected and published in various mediums.(e-books, blogs, newspaper websites, magazines and mobile applications) So-called big data era not only enable people to collect more and more data through different forms but also provide a set of tools to analyze, infer various structures in the data and interpret that knowledge in various forms.&lt;/p&gt;
&lt;p&gt;Search became more and more important to find the needle in this haystack. Especially, if you need a very specific document, the only option you have is to depend on the search engine’s capabilities and hope for the best.&lt;/p&gt;
&lt;p&gt;Search is good, it brings the exact document that has the specific keyword and maybe the most relevant document based on your history. It may even go further and do a link analysis in a link network if it really want the bring best in the class. However, it comes to short when you want to read a collection of documents that are about “Iraq War” or it comes to short when you want to analyze the documents that are about “literature in Renaissance”. One of the reasons why they came short is because they build indices on top of documents not themes or topics. Iraq War or literature in Renaissance implicitly suggests a theme rather than keyword or phrase.&lt;/p&gt;
&lt;p&gt;In order to overcome this problem, topic models provide a nice way to explore a collection of documents that share a single common theme so-called “topic”.&lt;/p&gt;
&lt;h3 id=&quot;definition&quot;&gt;Definition&lt;/h3&gt;
&lt;p&gt;Probabilistic topic models aka Topic Models are probabilistic generative models which uncovers hidden thematic structures in large collection of documents.&lt;/p&gt;
&lt;p&gt;Its statistical nature does not need any information other than the text itself. It does not use metadata, labels or annotations to build up the topics from the text. One needs to define only the number of clusters(this is quite hard, albeit). There are various different inference algorithms that enables fast inference in the corpus and some of the them also work in an online fashion so that one does not have to load the data into the memory.&lt;/p&gt;
&lt;p&gt;As most of the unsupervised learning algorithms, since there is no definitive number of clusters, the topics in the corpus are quite hard to evaluate. One could define various metrics either inter-topic(distance between different topics) or intra-topic(topic coherence). However, it generally depends on manual inspection and humans to decide the exact number of clusters in the dataset. While increasing the number of topics in the dataset may provide more granular information in the dataset, it could divide a very coherent topic into two parts that may be very close to each other.&lt;/p&gt;
&lt;p&gt;Although Latent Dirichlet Allocation is one of the topic models, I somehow interchangeably used to mean topic model and vice versa.&lt;/p&gt;
&lt;h4 id=&quot;word-distribution&quot;&gt;Word Distribution&lt;/h4&gt;
&lt;p&gt;Since topic models treat corpus and documents as bag of words, occurrences rather than position of words play an important role. The probability distribution of a particular word not only changes the topic assignment of the topic assignment the document that it belongs to but also may change the word distribution in the topic as well.&lt;/p&gt;
&lt;p&gt;One thing to be noted before applying Topic Modeling is that you need to care a lot about word distribution in both corpus and also in the topics. Not only the words themselves affect the probability but also they will affect the co-occurrence probability. One word probability both plays a role in assignment of a topic for that particular word but also on other words that they are likely to occur.&lt;/p&gt;
&lt;p&gt;Due to that reason, one needs to remove very common words as they do not contribute the topic assignment and shadow the other words probabilities in the topics which results in incoherent topics. Similarly, if the word occurrences is very small in the corpus, those probabilities have very small probabilities and would likely to have small effect on the word distribution and word co-occurrences. They may not affect the topics as much as very common words, yet they may increase the convergence time in the Gibbs sampling. Due to that reason, one should also remove the very infrequent words in the corpus as well.&lt;/p&gt;
&lt;h4 id=&quot;learning-topics&quot;&gt;Learning Topics&lt;/h4&gt;
&lt;p&gt;Using Gibbs Sampling, one could learn the topics in the following way:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We first assign a random topic to each word in the document&lt;/li&gt;
&lt;li&gt;For each word in the document
&lt;ul&gt;
&lt;li&gt;Compute the topic likelihood given document (1)&lt;/li&gt;
&lt;li&gt;Compute the word likelihood given a topic (2)&lt;/li&gt;
&lt;li&gt;Reassign the topic to the word which is a multiplicative of (1) and (2)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Topic distribution is drawn from a Dirichlet Distribution so the Dirichlet in Latent Dirichlet Allocation. The hidden structure among words in topics is latent so the Latent in LDA.&lt;/p&gt;
&lt;h4 id=&quot;experimentation&quot;&gt;Experimentation&lt;/h4&gt;
&lt;p&gt;I generally run the topic models for a number of different clusters and determine the optimal number based on manual inspection. Although it is not easily quantified information, since the topics is plausible to a human being, it is easy to interpret. Especially, if you are doing exploratory analysis. This is also a good way to get a feeling in the dataset&lt;/p&gt;
&lt;h4 id=&quot;assumptions&quot;&gt;Assumptions&lt;/h4&gt;
&lt;h5 id=&quot;first-one&quot;&gt;First One&lt;/h5&gt;
&lt;p&gt;As most of statical models, topic models also do a lot of assumptions in order to build its inference on top of the observations. One of the assumptions that it makes, there is a structure on the words that compose a topic gives its power. This hidden structure that the inference of topic models uncover is quite intuitive to the humans. By looking at the word distributions, one could immediately grasp the topic.&lt;/p&gt;
&lt;h5 id=&quot;second-one&quot;&gt;Second One&lt;/h5&gt;
&lt;p&gt;Second assumption is that all of the documents is composed of multiple topics and different documents share the topics in a different proportions. This is very much like a mixture model where every observation has mixed membership among many classes(in topic modeling, they are topics). This membership could also be used document retrieval as we could compute the maximum likelihood of documents given a topic: &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;max&lt;/mo&gt;&lt;mi&gt;P&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;(&lt;/mo&gt;&lt;mo&gt;*&lt;/mo&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;|&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/msub&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;postfix&quot;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\max P(*|t_0)&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;. By doing so, one could build a topic search engine as the most relevant documents are brought for a particular topic search. If one want to go further, she could assign topic memberships on individual words as the topics are word distributions themselves.&lt;/p&gt;
&lt;h4 id=&quot;lda-limitations&quot;&gt;LDA Limitations&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;It does not use metadata or any related information about the documents.&lt;/li&gt;
&lt;li&gt;It does not allow correlation among topics and does not have a good way to model the correlations.&lt;/li&gt;
&lt;li&gt;You cannot incorporate temporal information(date of the publication) to measure the change occurring in the topic distribution.&lt;/li&gt;
&lt;li&gt;It assumes a bag of words model on top of words and phrases. You cannot use the word order information in the text.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;lda-extensions&quot;&gt;LDA Extensions&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Nearly all of the limitations of LDA are addressed in different variants of LDA.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cs.columbia.edu/~blei/papers/BleiLafferty2006a.pdf&quot;&gt;Dynamic Topic Models&lt;/a&gt; use temporal information to detect changes in the topic frequency over time.&lt;/li&gt;
&lt;li&gt;There is &lt;a href=&quot;https://www.cs.princeton.edu/~blei/papers/BleiLafferty2006.pdf&quot;&gt;Correlated Topic Model&lt;/a&gt; which allows correlation between different topics.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://mimno.infosci.cornell.edu/info6150/readings/398.pdf&quot;&gt;Author-Topic Models&lt;/a&gt; allows you to incorporate various author related information into the topic models.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://cs.nyu.edu/~dsontag/papers/AroraEtAl_icml13.pdf&quot;&gt;Online Topic Models&lt;/a&gt; allow you to infer the topics in an online manner without having to load the text data into the memory.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;tools&quot;&gt;Tools&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://nlp.stanford.edu/software/tmt/tmt-0.4/&quot;&gt;Stanford Topic Modeling Toolbox&lt;/a&gt; is quite good and if you want to look at the end results in Excel, it has a bunch of nice helper functions to use. You could programmatically use Scala library as well.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://mallet.cs.umass.edu/&quot;&gt;Mallet&lt;/a&gt; is somehow outdated, yet it is mature and has a bunch of nice evaluation methods and nice default parameters. It could be also used via terminal without using its Java interface as well.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://factorie.cs.umass.edu/&quot;&gt;Factorie&lt;/a&gt; is not for topic modeling per se, it is much more comprehensive but has a suite of algorithms and implementation that could be used for topic modeling as well.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://cran.r-project.org/web/packages/lda/&quot;&gt;lda&lt;/a&gt; is for people who like R and has a number of variants of LDA as well(correlated topic model is one of them).&lt;/li&gt;
&lt;li&gt;Also check out the &lt;a href=&quot;http://www.cs.princeton.edu/~blei/topicmodeling.html&quot;&gt;topic modeling page of David Blei&lt;/a&gt;. He is the main author of highly cited &lt;a href=&quot;http://www.jmlr.org/papers/volume3/blei03a/blei03a.pdf&quot;&gt;LDA paper&lt;/a&gt; as well.&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;
</content>
  </entry>
  <entry xml:base="https://bugra.github.io/">
    <title type="text">Learning Swift Part 1</title>
    <id>https://bugra.github.io/posts/2015/2/13/learning-swift-part-1</id>
    <updated>2015-02-13T00:00:00Z</updated>
    <published>2015-02-13T00:00:00Z</published>
    <link href="https://bugra.github.io/posts/2015/2/13/learning-swift-part-1" />
    <author>
      <name>Bugra Akyildiz</name>
    </author>
    <content type="html">&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;
  &lt;title&gt;-&lt;/title&gt;
  &lt;style&gt;
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
  &lt;/style&gt;
  &lt;!--[if lt IE 9]&gt;
    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;
  &lt;![endif]--&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;I have recently become interested in the very new programming language as it provides a sweetspot for iOS developers who are tired writing Objective-C.&lt;/p&gt;
&lt;p&gt;I spent about 5 hours looking at its syntax and functionality; I must say it feels mostly Scala to me. There are places where syntax is much simpler and sometimes feels like a dynamic programming language; yet it is statically typed language where functions are first class citizens and you could write object oriented programming if you want to; very much like Scala.&lt;/p&gt;
&lt;p&gt;I really liked the Playground, it feeld like a REPL and allows you to see the changes and expressions evaluated in real time. For iterative process, it is equivalent of IPython for Python which I use all the time for development.&lt;/p&gt;
&lt;p&gt;The things that I did not like; they still somehow need to maintain legacy Objective-c interoperability which makes some of the interfaces quite complicated to deal with, also some of the types are carried to the Swift. The language has been around 2011 and it is new which means it is quite immature in terms of development ecosystem as well as libraries. However, the last one seems likely to disappear as more and more developers opt-in using Swift over Objective-c.&lt;/p&gt;
&lt;h3 id=&quot;basic-language-structs&quot;&gt;Basic Language Structs&lt;/h3&gt;
&lt;h4 id=&quot;type-inference&quot;&gt;Type Inference&lt;/h4&gt;
&lt;p&gt;From Javaland, most people complain how verbose it is. There are many reasons for verbosity in java, but one of the most important lacking thing in Java is type inference. You not only need to express the type in the declaration of a variable but also you need to give the type arguments when you are assigning it. When I saw Scala, I thought this is a clear improvement for statically typed languages and Swift follows the same path. When you declare variables or assigning them, you do not need to explicitly write the information, compiler will interfere the type for you.&lt;/p&gt;
&lt;h4 id=&quot;explicit-types-vs-implicit-types&quot;&gt;Explicit Types vs Implicit Types&lt;/h4&gt;
&lt;p&gt;However, you &lt;em&gt;could&lt;/em&gt; always use explicit type:&lt;/p&gt;
&lt;pre class=&quot;swift&quot;&gt;&lt;code&gt;var euroDollarParity: Double = 0.88
// instead of 
var euroDollarParity = 0.88&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;var-to-make-variable-and-let-to-make-it-constant&quot;&gt;&lt;code&gt;var&lt;/code&gt; to make variable and &lt;code&gt;let&lt;/code&gt; to make it constant&lt;/h4&gt;
&lt;p&gt;Constants cannot be assigned twice. When you declare the variable as constant, you kind of removed possibility of using variable again.&lt;/p&gt;
&lt;h4 id=&quot;no-implicit-type-conversion&quot;&gt;No Implicit Type Conversion&lt;/h4&gt;
&lt;p&gt;Strong statically typed languages do not allow you to combine oranges with apples for good reason. Swift(even in string concatenation) follows this convention. You cannot concatenate doubles with strings, you need to explicitly convert the integer or double to String before you concatenate the strings.&lt;/p&gt;
&lt;pre class=&quot;swift&quot;&gt;&lt;code&gt;let euroDollarSentence = “You could buy” + String(euroDollarParity) + “euro with one dollar”&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But this is ugly apart from the fact that you need to do explicit conversion, you need to also handle string concatenation. Swift provides a nice formatting for this type of formatting the string:&lt;/p&gt;
&lt;pre class=&quot;swift&quot;&gt;&lt;code&gt;let euroDollar = “You could buy \(euroDollarParity) euro with one dollar”&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which is much nicer to read and not string conversion.&lt;/p&gt;
&lt;h4 id=&quot;arrays-and-dictionaries&quot;&gt;Arrays and Dictionaries&lt;/h4&gt;
&lt;p&gt;Apart from Integer, String, Double and all of the primitive data structures, there are dictionary-like structures and array-like structures, which are called &lt;code&gt;dictionary&lt;/code&gt; and &lt;code&gt;array&lt;/code&gt;. They both use &lt;code&gt;[]&lt;/code&gt; but &lt;code&gt;:&lt;/code&gt; makes the difference between elements. &lt;code&gt;:&lt;/code&gt; signifies key value pair relationship whereas commas would only signify the order in the array.&lt;/p&gt;
&lt;p&gt;As in the string, integer and double; you do not need to give the types of key, value pairs of dictionary, or the elements in the array.&lt;/p&gt;
&lt;pre class=&quot;swift&quot;&gt;&lt;code&gt;var currencyList = [“dinar”, “dollar”, “franc”, “lira”, “peso”, “pound”]
var currencyDict = [“dinar”: 0.96,
                    “franc”: 0.21,
                    “dollar”: 1.00,
                    “lira”: 0.62,
                    “peso”: 0.84,
                    “pound”: 2.31
]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You could initialize the arrays with type, but you do not have to.&lt;/p&gt;
&lt;pre class=&quot;swift&quot;&gt;&lt;code&gt;var validArray = []
var validDict = [:]

var validArray = [String]()
var validDict = [String: Double]()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Syntax is somehow similar to Python except the &lt;code&gt;{}&lt;/code&gt;. If you access a key that does not exist, it does not prompt an error unlike Python. It returns simply &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&quot;conditionals&quot;&gt;Conditionals&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;for-in&lt;/code&gt; loop behaves exactly in Python except the &lt;code&gt;{}&lt;/code&gt;. This time other way around.&lt;/p&gt;
&lt;pre class=&quot;swift&quot;&gt;&lt;code&gt;for elem in array {

}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;where you traverse the array.&lt;/p&gt;
&lt;p&gt;###Optionality You could define optional strings as well, based on check, you could check if there is a value or not. Since you cannot pass a string to if block and expect it to be evaluated false(like “” in Python), nil value in Optional provides a nice way to provide such functionality.&lt;/p&gt;
&lt;h4 id=&quot;switch-block&quot;&gt;&lt;code&gt;Switch&lt;/code&gt; Block&lt;/h4&gt;
&lt;pre class=&quot;swift&quot;&gt;&lt;code&gt;let kind=”HEARTS”

switch kind.lowercaseString {
    case “hearts”:
        println(kind.uppercaseString) // this will get printed out
    case “clubs”:
        println(kind.uppercaseString)
    case “spades”:
        println(kind.uppercaseString)
    case “diamonds”:
        println(kind.uppercaseString)
default:
    println(“WHAT”)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;###Functions First thing is that, functions are first-class citizens. You could pass them around, define one inside of another, write your function which returns a function and so on.&lt;/p&gt;
&lt;p&gt;Function signature is almost same with Scala except &lt;code&gt;func&lt;/code&gt; and &lt;code&gt;-&amp;gt;&lt;/code&gt; to show the return type, other than that type assignment, order are same. Since developers write “Hello World” and fibonacci computation all the time(this is how we make our living after all), let’s see how one could write a fibonacci number computation in Swift.&lt;/p&gt;
&lt;pre class=&quot;swift&quot;&gt;&lt;code&gt;func fib(n: Int) -&amp;gt; Int {
    if n == 0 || n == 1{
        return 1
    } else {
        return fib(n-1) + fib(n-2)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We are defining a function which takes an integer and returns an integer. That was easy.&lt;/p&gt;
&lt;p&gt;What if we want to get all the parameters and do something in the function? As long as the types are same, we could use &lt;code&gt;...&lt;/code&gt; in parameter declaration in the function to collect all of the parameters in a list.&lt;/p&gt;
&lt;pre class=&quot;swift&quot;&gt;&lt;code&gt;func computeStatistics(numbers: Int...) -&amp;gt; (max: Int, min: Int, mean: Double, median: Int) {
    var max = numbers[0]
    var min = numbers[0]
    var sum = 0
    var median: Int
    if numbers.count % 2 == 0{
        median = numbers[numbers.count / 2]
    }else{
        median = numbers[(numbers.count+1) / 2]
    }

    for number in numbers {
        sum += number
        if number &amp;gt;= max{
            max = number
        }else if number &amp;lt;= min {
            min = number
        }
    }
    var mean = Double(sum) / Double(numbers.count)
    return (max, min, mean, median)
}
println(computeStatistics(3, 4, 5, 6, 7))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assume that the parameters is given in order(for median).&lt;/p&gt;
&lt;p&gt;One of the cool things about functions is, you could return tuples(pretty much same with Python and Scala), but you could access both by position AND by name. Isn’t that convenient?&lt;/p&gt;
&lt;pre class=&quot;swift&quot;&gt;&lt;code&gt;func prime(n: Int) -&amp;gt; (primeNumber:Int, primeList: [Int]) {
    var ii = 0
    var primeNumber = 2
    var primeList = [Int]()
    while ii &amp;lt; n {
        primeNumber++
        if isPrime(primeNumber) {
            ii++
            primeList += [primeNumber]
        }
    }
    return (primeNumber, primeList)
}

var primeN = prime(5)
primeN.primeNumber
primeN.primeList

primeN.0 // same with primeN.primeNumber
primeN.1 // same with primeN.primeList&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That is pretty cool.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</content>
  </entry>
  <entry xml:base="https://bugra.github.io/">
    <title type="text">Learning Lua as a Python Developer</title>
    <id>https://bugra.github.io/posts/2015/5/9/learning-lua-as-a-Python-developer</id>
    <updated>2015-05-09T00:00:00Z</updated>
    <published>2015-05-09T00:00:00Z</published>
    <link href="https://bugra.github.io/posts/2015/5/9/learning-lua-as-a-Python-developer" />
    <author>
      <name>Bugra Akyildiz</name>
    </author>
    <content type="html">&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;
  &lt;title&gt;-&lt;/title&gt;
  &lt;style&gt;
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
    pre &gt; code.sourceCode { white-space: pre; position: relative; }
    pre &gt; code.sourceCode &gt; span { display: inline-block; line-height: 1.25; }
    pre &gt; code.sourceCode &gt; span:empty { height: 1.2em; }
    code.sourceCode &gt; span { color: inherit; text-decoration: inherit; }
    div.sourceCode { margin: 1em 0; }
    pre.sourceCode { margin: 0; }
    @media screen {
    div.sourceCode { overflow: auto; }
    }
    @media print {
    pre &gt; code.sourceCode { white-space: pre-wrap; }
    pre &gt; code.sourceCode &gt; span { text-indent: -5em; padding-left: 5em; }
    }
    pre.numberSource code
      { counter-reset: source-line 0; }
    pre.numberSource code &gt; span
      { position: relative; left: -4em; counter-increment: source-line; }
    pre.numberSource code &gt; span &gt; a:first-child::before
      { content: counter(source-line);
        position: relative; left: -1em; text-align: right; vertical-align: baseline;
        border: none; display: inline-block;
        -webkit-touch-callout: none; -webkit-user-select: none;
        -khtml-user-select: none; -moz-user-select: none;
        -ms-user-select: none; user-select: none;
        padding: 0 4px; width: 4em;
        color: #aaaaaa;
      }
    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
    div.sourceCode
      {   }
    @media screen {
    pre &gt; code.sourceCode &gt; span &gt; a:first-child::before { text-decoration: underline; }
    }
    code span.al { color: #ff0000; font-weight: bold; } /* Alert */
    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
    code span.at { color: #7d9029; } /* Attribute */
    code span.bn { color: #40a070; } /* BaseN */
    code span.bu { } /* BuiltIn */
    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
    code span.ch { color: #4070a0; } /* Char */
    code span.cn { color: #880000; } /* Constant */
    code span.co { color: #60a0b0; font-style: italic; } /* Comment */
    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
    code span.do { color: #ba2121; font-style: italic; } /* Documentation */
    code span.dt { color: #902000; } /* DataType */
    code span.dv { color: #40a070; } /* DecVal */
    code span.er { color: #ff0000; font-weight: bold; } /* Error */
    code span.ex { } /* Extension */
    code span.fl { color: #40a070; } /* Float */
    code span.fu { color: #06287e; } /* Function */
    code span.im { } /* Import */
    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
    code span.kw { color: #007020; font-weight: bold; } /* Keyword */
    code span.op { color: #666666; } /* Operator */
    code span.ot { color: #007020; } /* Other */
    code span.pp { color: #bc7a00; } /* Preprocessor */
    code span.sc { color: #4070a0; } /* SpecialChar */
    code span.ss { color: #bb6688; } /* SpecialString */
    code span.st { color: #4070a0; } /* String */
    code span.va { color: #19177c; } /* Variable */
    code span.vs { color: #4070a0; } /* VerbatimString */
    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
  &lt;/style&gt;
  &lt;!--[if lt IE 9]&gt;
    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;
  &lt;![endif]--&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;This tutorial is not the millionth tutorial that walks you through basic concepts of Lua language. First there are quite excellent &lt;a href=&quot;http://tylerneylon.com/a/learn-lua/&quot;&gt;tutorials&lt;/a&gt; that actually aims to do exactly that. This post would be to tell a tutorial on Lua from a Pythonista, comparing Lua features with various Python features and try to create various associations. Make no mistake, I will actually go through basic concepts but somehow comparing the Lua with Python all the time. I think these two languages are very similar in various aspects and those associations may make the learning curve a little bit smoother.&lt;/p&gt;
&lt;p&gt;(If you ask me the steeper the learning curve is better, as the slope is how &lt;em&gt;fast&lt;/em&gt; you could learn(x axis is time). The steeper curve has higher slope, therefore you could learn faster. Not sure why steeper learning curve has connotation of hard concepts or hard to understand material. Contrarily, we should say steeper learning curve for easy concepts. But, hey. Nobody claimed that the languages are and should be consistent.)&lt;/p&gt;
&lt;p&gt;Anyways, where was I? Yes, Lua it is. And of course Python. Making comparisons between languages not only makes you remember the syntax easily but also you could get a feeling of the language if the two languages are very similar in various aspects. If you learned Java as a your first language, then whenever you learn an OOP(Object Oriented Programming) focused programming language, you would get the same feeling. Classes and objects are kind of big deal. You’d better use it wherever you can.&lt;/p&gt;
&lt;p&gt;But let’s step back for a second. Why Lua? It is compact, fast and dynamic. It is somehow easy to learn. You could also list a bunch of advantages of Lua as well, but my reason was quite pragmatist if there is a spectrum of reasons why you learn a new programming language. My aim is to learn more about tools in Deep Learning and more specifically &lt;a href=&quot;http://torch.ch/&quot;&gt;Torch&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And Lua is all good, huh? Not really. It is not very popular so community support is not there and not good comparing to Python. The standard library is not very large. From Python’s batteries included approach, it gets hard to get used to DIY(Do It Yourself) from there should be a library for that if it does not exist in the standard library already.&lt;/p&gt;
&lt;h2 id=&quot;similarities&quot;&gt;Similarities&lt;/h2&gt;
&lt;h3 id=&quot;strings&quot;&gt;Strings&lt;/h3&gt;
&lt;p&gt;String definitions are same, &lt;code&gt;’&lt;/code&gt; or &lt;code&gt;”&lt;/code&gt; works and they do not have any difference. Python uses &lt;code&gt;”””&lt;/code&gt; for multi-line strings and Lua uses &lt;code&gt;[[]]&lt;/code&gt;. Strings are immutable and can be concatenated to each other. Lua uses &lt;code&gt;..&lt;/code&gt; as concatenation operator where Python uses good old plus operator &lt;code&gt;+&lt;/code&gt;. &lt;code&gt;len&lt;/code&gt;, &lt;code&gt;split&lt;/code&gt; and various functions in string module works as in the same way in Python.&lt;/p&gt;
&lt;h3 id=&quot;logical-operators&quot;&gt;Logical Operators&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;not&lt;/code&gt;, &lt;code&gt;and&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt; works in the same way as you expect. Only difference is &lt;code&gt;nil&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; are evaluated as &lt;code&gt;false&lt;/code&gt; in Lua where in Python empty string, list, set and even 0 are evaluated as &lt;code&gt;False&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;table-usage&quot;&gt;Table usage&lt;/h3&gt;
&lt;p&gt;Table syntax and usage of sets and lists are very similar to Python.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre class=&quot;sourceCode lua&quot;&gt;&lt;code class=&quot;sourceCode lua&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;#cb1-1&quot;&gt;&lt;/a&gt;table &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;‘first_key’&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; ‘second_key’&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-2&quot;&gt;&lt;a href=&quot;#cb1-2&quot;&gt;&lt;/a&gt;list &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;‘a’&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; ‘b’&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; ‘c’&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; ‘d’&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; ‘e’&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; ‘f’&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;-- They get automatically 1 upto 6 as keys&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-3&quot;&gt;&lt;a href=&quot;#cb1-3&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Under the hood it is still an associative array&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;print-and-type-functions&quot;&gt;&lt;code&gt;print&lt;/code&gt; and &lt;code&gt;type&lt;/code&gt; functions&lt;/h3&gt;
&lt;p&gt;They behave exactly the same way as in Python. You could get the type information via &lt;code&gt;type&lt;/code&gt; function and print out the results with &lt;code&gt;print&lt;/code&gt; function.&lt;/p&gt;
&lt;h3 id=&quot;no-braces-and-semicolons&quot;&gt;No braces and semicolons&lt;/h3&gt;
&lt;p&gt;There are no braces and semicolons. They made the compromise on the end keyword which is understandable. As long as developer adheres the indentation for his function definition and programming style, then it should be as readable as Python.&lt;/p&gt;
&lt;h3 id=&quot;there-is-one-way-and-prefereably-only-one-way-to-do-things&quot;&gt;There is one way and prefereably only one way to do things&lt;/h3&gt;
&lt;p&gt;Since the language is compact and somehow barebone, there is generally only one way of doing things. Actually, sometimes there is not.(e.g. getting keys from a table) This makes it easy to read the code that other people wrote if they have not exploited the metatables quite a lot.&lt;/p&gt;
&lt;h3 id=&quot;explicit-selfs&quot;&gt;Explicit &lt;code&gt;self&lt;/code&gt;s&lt;/h3&gt;
&lt;p&gt;Both languages use explicit selfs in function definition. Lua even attempts to pass the object in a regular function call(so much object oriented after all). However, it provides a syntactic sugar which I will show in a bit.&lt;/p&gt;
&lt;h3 id=&quot;multiple-return-values-and-multiple-assignment&quot;&gt;Multiple Return values and multiple assignment&lt;/h3&gt;
&lt;p&gt;Both languages support returning multiple values in functions and you could assign multiple assignment as well. In Lua, it looks like this:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre class=&quot;sourceCode lua&quot;&gt;&lt;code class=&quot;sourceCode lua&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;#cb2-1&quot;&gt;&lt;/a&gt;first_table&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; second_table &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{},&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-2&quot;&gt;&lt;a href=&quot;#cb2-2&quot;&gt;&lt;/a&gt;first_table&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; “first_value”&lt;/span&gt;
&lt;span id=&quot;cb2-3&quot;&gt;&lt;a href=&quot;#cb2-3&quot;&gt;&lt;/a&gt;first_table&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; second_table &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; second_table&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; first_table&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If there are more variables in the right hand side than the left hand side in the assignment operation, then Lua errors where Python raises &lt;code&gt;ValueError&lt;/code&gt; exception, though.&lt;/p&gt;
&lt;h3 id=&quot;both-languages-support-unpacking-lists&quot;&gt;Both Languages support &lt;code&gt;unpack&lt;/code&gt;ing lists&lt;/h3&gt;
&lt;p&gt;If you have a function, you could put all of the parameters into a list and then &lt;code&gt;unpack&lt;/code&gt; them in Lua where in Python you would use &lt;code&gt;*&lt;/code&gt; prefix to the list to unpack.&lt;/p&gt;
&lt;p&gt;In Lua, the following&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb3&quot;&gt;&lt;pre class=&quot;sourceCode lua&quot;&gt;&lt;code class=&quot;sourceCode lua&quot;&gt;&lt;span id=&quot;cb3-1&quot;&gt;&lt;a href=&quot;#cb3-1&quot;&gt;&lt;/a&gt;func&lt;span class=&quot;op&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;unpack&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;(&lt;/span&gt;list&lt;span class=&quot;op&quot;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;is similar to&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb4&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb4-1&quot;&gt;&lt;a href=&quot;#cb4-1&quot;&gt;&lt;/a&gt;func(&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;ls)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;in Python.&lt;/p&gt;
&lt;h3 id=&quot;enumeration-on-tables-or-dictionaries&quot;&gt;Enumeration on &lt;code&gt;table&lt;/code&gt;s or dictionaries&lt;/h3&gt;
&lt;p&gt;Both languages provide a way to traverse lists with enumerated version. This holds true for dictionary or table as well.&lt;/p&gt;
&lt;p&gt;In Lua, one could call &lt;code&gt;pairs&lt;/code&gt; in the table to traverse both key-value in the table. If you call &lt;code&gt;ipairs&lt;/code&gt; in the list, then you would get the enumerated indices along with the values that are in the list.&lt;/p&gt;
&lt;h3 id=&quot;iterators-gonna-iterate&quot;&gt;Iterators gonna iterate&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;for&lt;/code&gt; can be used for iterators in both languages. One can also define custom iterators as well which could be used in the for construct as well, which is pretty nice.&lt;/p&gt;
&lt;h2 id=&quot;differences&quot;&gt;Differences&lt;/h2&gt;
&lt;h3 id=&quot;whitespace-vs-end-keyword&quot;&gt;Whitespace vs &lt;code&gt;end&lt;/code&gt; keyword&lt;/h3&gt;
&lt;p&gt;Lua opts in using &lt;code&gt;end&lt;/code&gt; keyword for ending function definition or for loop where Python uses whitespace for function definition, control flows and so on.&lt;/p&gt;
&lt;h3 id=&quot;functions&quot;&gt;Functions&lt;/h3&gt;
&lt;p&gt;Function definitions are somehow similar to Javascript dropping &lt;code&gt;{}&lt;/code&gt; in favor of &lt;code&gt;end&lt;/code&gt; keyword.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb5&quot;&gt;&lt;pre class=&quot;sourceCode lua&quot;&gt;&lt;code class=&quot;sourceCode lua&quot;&gt;&lt;span id=&quot;cb5-1&quot;&gt;&lt;a href=&quot;#cb5-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; factorial&lt;span class=&quot;op&quot;&gt;(&lt;/span&gt;n&lt;span class=&quot;op&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-2&quot;&gt;&lt;a href=&quot;#cb5-2&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; n &lt;span class=&quot;op&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;then&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-3&quot;&gt;&lt;a href=&quot;#cb5-3&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-4&quot;&gt;&lt;a href=&quot;#cb5-4&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-5&quot;&gt;&lt;a href=&quot;#cb5-5&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; n &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; factorial&lt;span class=&quot;op&quot;&gt;(&lt;/span&gt;n&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-6&quot;&gt;&lt;a href=&quot;#cb5-6&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;cf&quot;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-7&quot;&gt;&lt;a href=&quot;#cb5-7&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb6&quot;&gt;&lt;pre class=&quot;sourceCode lua&quot;&gt;&lt;code class=&quot;sourceCode lua&quot;&gt;&lt;span id=&quot;cb6-1&quot;&gt;&lt;a href=&quot;#cb6-1&quot;&gt;&lt;/a&gt;factorial &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;(&lt;/span&gt;n&lt;span class=&quot;op&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-2&quot;&gt;&lt;a href=&quot;#cb6-2&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; n &lt;span class=&quot;op&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;then&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-3&quot;&gt;&lt;a href=&quot;#cb6-3&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-4&quot;&gt;&lt;a href=&quot;#cb6-4&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-5&quot;&gt;&lt;a href=&quot;#cb6-5&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; n &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; factorial&lt;span class=&quot;op&quot;&gt;(&lt;/span&gt;n&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-6&quot;&gt;&lt;a href=&quot;#cb6-6&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;cf&quot;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-7&quot;&gt;&lt;a href=&quot;#cb6-7&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;could be also assigned to a variable similar to Javascript. You could define anoymous functions and assign them into a variable in Python to be fair. But more ofthen than not, people just pass the function itself rather than the variable that is assigned to.&lt;/p&gt;
&lt;h3 id=&quot;variable-scope&quot;&gt;Variable Scope&lt;/h3&gt;
&lt;p&gt;All of the variables are defaulted as global variables. Not sure why the language creators thought this is a good idea, but you could explicitly put &lt;code&gt;local&lt;/code&gt; keyword in front of the variable declaration to make it “local”. Contrarily, you could explicitly make a global variable putting &lt;code&gt;global&lt;/code&gt; in front of the variable declaration.&lt;/p&gt;
&lt;h3 id=&quot;tables-vs-dictionaries-lists-and-sets&quot;&gt;Tables vs Dictionaries, Lists and Sets&lt;/h3&gt;
&lt;p&gt;In Lua, we trust tables, Python needs to bring dictionaries, lists and sets. Tables are the only compound data structure(did anyone tell that Lua is a very compact language). Tables are associative arrays similar to dictionaries in Python, but they could be also used as lists(defaulting the keys as integers).&lt;/p&gt;
&lt;h3 id=&quot;xy-range-syntax-includes-beginning-and-end-point&quot;&gt;&lt;code&gt;x,y&lt;/code&gt; “range” syntax includes beginning and end-point&lt;/h3&gt;
&lt;p&gt;The tables when they are used as lists, start indexing at 1. When you define a range of integers using &lt;code&gt;1,100&lt;/code&gt;, which produces 100 integers from 1 upto 100 including 1 and 100. If you have the list, you could get the length of the list via &lt;code&gt;#list&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;objects&quot;&gt;Objects&lt;/h3&gt;
&lt;p&gt;Lua does not support object oriented programming. They provide certain ways of doing OOP, similar to Javascript’s prototype based style, but even that requires somehow different syntax to call the object. Of course, there is no object by the way. It is a table which you could call functions from it. You could add almost any behavior on tables via “metatables” though.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb7&quot;&gt;&lt;pre class=&quot;sourceCode lua&quot;&gt;&lt;code class=&quot;sourceCode lua&quot;&gt;&lt;span id=&quot;cb7-1&quot;&gt;&lt;a href=&quot;#cb7-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; object&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;func&lt;span class=&quot;op&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;op&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-2&quot;&gt;&lt;a href=&quot;#cb7-2&quot;&gt;&lt;/a&gt;    self&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-3&quot;&gt;&lt;a href=&quot;#cb7-3&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;is nothing but a syntactic sugar for the following for example:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb8&quot;&gt;&lt;pre class=&quot;sourceCode lua&quot;&gt;&lt;code class=&quot;sourceCode lua&quot;&gt;&lt;span id=&quot;cb8-1&quot;&gt;&lt;a href=&quot;#cb8-1&quot;&gt;&lt;/a&gt;object&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;func &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; x&lt;span class=&quot;op&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb8-2&quot;&gt;&lt;a href=&quot;#cb8-2&quot;&gt;&lt;/a&gt;                self&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb8-3&quot;&gt;&lt;a href=&quot;#cb8-3&quot;&gt;&lt;/a&gt;              &lt;span class=&quot;kw&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;lua-is-fast&quot;&gt;Lua is fast&lt;/h3&gt;
&lt;p&gt;I meant LuaJIT is fast. Comparing to Python, it is quite faster, which is important if you are doing expensive numerical operations. Considering its dynamic nature, this is a little surprise to me,but it is a good surprise.&lt;/p&gt;
&lt;h3 id=&quot;lua-assigns-nil-when-a-variable-is-not-defined&quot;&gt;Lua assigns &lt;code&gt;nil&lt;/code&gt; when a variable is not defined&lt;/h3&gt;
&lt;p&gt;If you are accessing a variable that you did not define in Lua, it does not error, it silently assigns a &lt;code&gt;nil&lt;/code&gt; to the variable and does not complain where you would get a &lt;code&gt;NameError&lt;/code&gt; in Python. In general, since most of the things are tables and if you access a non-existent key to the table, it simply returns &lt;code&gt;nil&lt;/code&gt;, there would be less explicit error or exception but rather nil checking for those statements if the key actually exists in the first place in the table.&lt;/p&gt;
&lt;h3 id=&quot;lua-does-proper-tail-recursion&quot;&gt;Lua does proper tail recursion&lt;/h3&gt;
&lt;p&gt;Lua does proper tail recursion where Python does not.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</content>
  </entry>
  <entry xml:base="https://bugra.github.io/">
    <title type="text">Phase Detection in Digital Signals</title>
    <id>https://bugra.github.io/posts/2012/9/1/Phase-Detection</id>
    <updated>2012-09-01T00:00:00Z</updated>
    <published>2012-09-01T00:00:00Z</published>
    <link href="https://bugra.github.io/posts/2012/9/1/Phase-Detection" />
    <author>
      <name>Bugra Akyildiz</name>
    </author>
    <content type="html">&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;
  &lt;title&gt;-&lt;/title&gt;
  &lt;style&gt;
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
  &lt;/style&gt;
  &lt;!--[if lt IE 9]&gt;
    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;
  &lt;![endif]--&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;Phase Detection is an important concept in radar signals. It could be used to determine the time delay between radar signals and this time delay could be used to infer the distance of the object from the radar, which is the main aim of the radar. Even if it is assumed that transmitted signal and received signal should be same, there occurs to be noise. I was assigned to implement phase detection for FPGA’s for my internship in Summer 2010 as they are used for radar signal processing. They can do complex and real-time processing, are cheaper than computers, portable, low power consumers. However, I did not go into implementation directly. I need a simulation which would yield promising results. Then, I could implement in VHDL. I chose Matlab and implemented three different methods. (This would decrease to two in VHDL). I will compare these methods as well, but it cannot be deduced that some method &lt;em&gt;always&lt;/em&gt; or even usually perform better than some other method based on the results provided. There are a numerous reasons, but I will just mention few of them. Firstly, this is just a &lt;strong&gt;simulation&lt;/strong&gt; after all. Secondly, the simulation takes into consideration only one of the signal is noisy(received), which may not hold true in general. Moreover, there are constant parameters which may favor some method over other ones. Before giving details of the methods, I am urged to mention an important concept that two methods use, Schmitt Trigger.&lt;/p&gt;
&lt;h3 id=&quot;schmitt-trigger&quot;&gt;Schmitt Trigger&lt;/h3&gt;
&lt;p&gt;Schmitt Trigger is a comparator with two different threshold values. When the signal goes over &lt;strong&gt;High Threshold&lt;/strong&gt;, it yields 1(HIGH). It remains 1 until signal goes below &lt;strong&gt;Low Threshold&lt;/strong&gt;, it yields 0. It remains 0, until signal goes over … as it could be seen the figure below.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;https://raw.github.com/bugra/Phase-Detection/master/img/schmitt-trigger2.png&quot; title=&quot;Schmitt Trigger&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Alt text&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;In analog implementation of Schmitt Trigger, there is a feedback mechanism which uses hysteresis to adjust its threshold values. In this implementation, they are constant. Schmitt Trigger is used to prevent noise when analogous signal is transformed into a digital(binary) one. It prevents oscillation in the binary signal which is convenient and makes the binary signal robust to noise. Consider the figure below, A is a basic comparator. B is a Schmitt Trigger. Any fluctuation in the border of A resultss in oscillation in the digital signal. This is the general case for noisy signals. However, fluctuations in border B does not change digital signal since digital signal needs to wait for &lt;em&gt;high threshold&lt;/em&gt; value or &lt;em&gt;low threshold&lt;/em&gt; value to change.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;https://raw.github.com/bugra/Phase-Detection/master/img/schmitt-trigger.png&quot; title=&quot;A is comparator, B is Schmitt Trigger&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Alt text&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;It is important to note that if noise level is higher than the difference of two thresholds, schmitt trigger does not provide robustness to noise. It is still better than a basic comparator, though. Therefore, noise level should be taken into consideration when setting up the threshold values.&lt;/p&gt;
&lt;h3 id=&quot;pulselag-method&quot;&gt;PulseLag Method&lt;/h3&gt;
&lt;figure&gt;
&lt;img src=&quot;https://raw.github.com/bugra/Phase-Detection/master/img/pulselag_method1.png&quot; title=&quot;Original and Delayed Signals&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Alt text&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;In this method, we multiply both signals $ f_c $ with another sinusoid, but a lower frequency $ f_{down} $ Then, low-pass filter this signal in order to get low frequency part.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;https://raw.github.com/bugra/Phase-Detection/master/img/pulselag_method2.png&quot; title=&quot;Filtered Signals&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Alt text&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;After filtering the signal, we put it into Schmitt Trigger. Then, we get their difference which also gives time delay.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;https://raw.github.com/bugra/Phase-Detection/master/img/pulselag_method3.png&quot; title=&quot;Schmitt Triggered Signals&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Alt text&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;We need the ratio of the (number of times first signal is 1 and second signal is 0) over the total time. Then, we need to divide this ratio to $ f_c $ to find time delay. I apply 0.5 nanosecond delay in the signal and it will be constant for the other methods as well, for noiseless case method measures 4.5714e-10. For noise coefficient = 0.1, method measures 5.1429e-10. For noise coefficient = 0.2, method measures 8.0000e-10, which is not even close. Even if noiseless and when noise is small, this method performs well, for noisy cases, it is not robust to noise.&lt;/p&gt;
&lt;h3 id=&quot;multiplication-method&quot;&gt;Multiplication Method&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.github.com/bugra/Phase-Detection/master/img/multiplication_method1.png&quot; title=&quot;Original Signals&quot; alt=&quot;Alt text&quot; /&gt; If we multiply two signals with each other, we have a high pass term and a phase term if they have both the same frequency.(noiseless case)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.github.com/bugra/Phase-Detection/master/img/multiplication_method2.png&quot; title=&quot;Filtered Multiplied Signal&quot; alt=&quot;Alt text&quot; /&gt; If we get inverse sin or cosine of the multiplied signal&lt;/p&gt;
&lt;p&gt;[Alt text](https://raw.github.com/bugra/Phase-Detection/master/img/multiplication_method3.png &quot; Inverse of Filtered Multiplied Signal&quot;) and take mean of the signal(after some heuristics), divide by &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mo&gt;*&lt;/mo&gt;&lt;mi&gt;π&lt;/mi&gt;&lt;mo&gt;*&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;f&lt;/mi&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;2 * \pi * f_c&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;, then we get a time delay.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;https://raw.github.com/bugra/Phase-Detection/master/img/multiplication_method4.png&quot; title=&quot;Filtered Multiplied Signal&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Alt text&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;For noiseless case method measures 4.9639e-10 which is quite close. For noise coefficient = 0.1, method measures 4.6909e-10. For noise coefficient = 0.2, method measures 5.8330e-10, which is quite close for such a high noise.&lt;/p&gt;
&lt;h3 id=&quot;fft-based-method&quot;&gt;FFT-Based Method&lt;/h3&gt;
&lt;p&gt;FFT can be written in a Discrete Fourier Transform: &lt;math display=&quot;block&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;[&lt;/mo&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;postfix&quot;&gt;]&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;munderover&gt;&lt;mo&gt;∑&lt;/mo&gt;&lt;mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/mrow&gt;&lt;mrow&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;/munderover&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;[&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;postfix&quot;&gt;]&lt;/mo&gt;&lt;msup&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mfrac&gt;&lt;mrow&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mi&gt;π&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;/mrow&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;/mfrac&gt;&lt;/msup&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;/msub&gt;&lt;msup&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;msub&gt;&lt;mi&gt;ϕ&lt;/mi&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt; X[k] = \sum_{n=0}^{N-1} x[n] e^{\frac{-j 2 \pi n k}{N}} = A_k e^{j \phi_k} &lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; and &lt;math display=&quot;block&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;[&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;postfix&quot;&gt;]&lt;/mo&gt;&lt;mo&gt;↔&lt;/mo&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;[&lt;/mo&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;postfix&quot;&gt;]&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt; x[n] \leftrightarrow X[k]  &lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; &lt;math display=&quot;block&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;[&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mi&gt;D&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;postfix&quot;&gt;]&lt;/mo&gt;&lt;mo&gt;↔&lt;/mo&gt;&lt;msup&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mfrac&gt;&lt;mrow&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mi&gt;π&lt;/mi&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;mi&gt;D&lt;/mi&gt;&lt;/mrow&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;/mfrac&gt;&lt;/msup&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;[&lt;/mo&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;postfix&quot;&gt;]&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt; x[n-D] \leftrightarrow e^{\frac{-j2 \pi k D}{N}}X[k] &lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; It is important to note, in the magnitude response, the phase &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;msup&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mfrac&gt;&lt;mrow&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mi&gt;π&lt;/mi&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;mi&gt;D&lt;/mi&gt;&lt;/mrow&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;/mfrac&gt;&lt;/msup&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;e^{\frac{-j2 \pi k D}{N}}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; will be one. Therefore, it will not affect the magnitude response. Since we send periodic signals, the maximum of frequency response will occur at the dominant frequency which is the period of the signal. As the magnitude response will be same, we could just take the phase response of the same index in FFT to find the phase information between the signals. Original and delayed signal(0.5e-9) signals are given below.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;https://raw.github.com/bugra/Phase-Detection/master/img/fft_method_fig1.png&quot; title=&quot;Original and Delayed Signal&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Alt text&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Magnitude response of the signals are given below.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;https://raw.github.com/bugra/Phase-Detection/master/img/fft_method_fig2.png&quot; title=&quot;Magnitude Response of FFT of the signals&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Alt text&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Phase response of the signals:&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;https://raw.github.com/bugra/Phase-Detection/master/img/fft_method_fig3.png&quot; title=&quot;Phase Response of FFT&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Alt text&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;When we take the phases of the both signals and subtract, we get the phase difference. Time delay is only the ratio of phase difference over $ 2 * pi * fc $. For noiseless case method measures 4.9656e-10 which is quite close. For noise coefficient = 0.1, method measures 5.1161e-10. For noise coefficient = 0.2, method measures 3.9221e-10, which is not very close.&lt;/p&gt;
&lt;h3 id=&quot;result&quot;&gt;Result&lt;/h3&gt;
&lt;p&gt;For noiseless case, all of the methods perform quite well. For medium noise(n = 0.1), FFT-Based and PulseLag method; for high noise, Multiplication method performs better.&lt;/p&gt;
&lt;h3 id=&quot;code&quot;&gt;Code&lt;/h3&gt;
&lt;p&gt;All of the code and images used in this note is available in the &lt;a href=&quot;https://github.com/bugra/Phase-Detection&quot; title=&quot;Phase-Detection-Matlab&quot;&gt;here&lt;/a&gt;. Moreover, implementation of Multiplication and FFT-Based method in VHDL is also available in &lt;a href=&quot;https://github.com/bugra/Phase-Detection-VHDL&quot; title=&quot;Phase-Detection-VHDL&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</content>
  </entry>
  <entry xml:base="https://bugra.github.io/">
    <title type="text">Spectral Leakage</title>
    <id>https://bugra.github.io/posts/2012/9/15/Spectral-Leakage</id>
    <updated>2012-09-15T00:00:00Z</updated>
    <published>2012-09-15T00:00:00Z</published>
    <link href="https://bugra.github.io/posts/2012/9/15/Spectral-Leakage" />
    <author>
      <name>Bugra Akyildiz</name>
    </author>
    <content type="html">&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;
  &lt;title&gt;-&lt;/title&gt;
  &lt;style&gt;
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
  &lt;/style&gt;
  &lt;!--[if lt IE 9]&gt;
    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;
  &lt;![endif]--&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;Have you ever analyzed(take FFT) a signal which has one or two main frequency components and found out that there are many more components than you expect even if there is no noise in the signal? One of the reasons why it has more frequency components is spectral leakage, which is mainly due to windowing.&lt;br /&gt;
Say, we have a discrete signal of &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;[&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;postfix&quot;&gt;]&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;x[n]&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;,&lt;br /&gt;
FFT of a sequence &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;[&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;postfix&quot;&gt;]&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;x[n]&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/p&gt;
&lt;p&gt;&lt;math display=&quot;block&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;[&lt;/mo&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;postfix&quot;&gt;]&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;munderover&gt;&lt;mo&gt;∑&lt;/mo&gt;&lt;mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/mrow&gt;&lt;mrow&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;/munderover&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;[&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;postfix&quot;&gt;]&lt;/mo&gt;&lt;msup&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mfrac&gt;&lt;mrow&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mi&gt;π&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;/mrow&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;/mfrac&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;X[k] = \sum_{n=0}^{N-1} x[n] e^{\frac{-j 2 \pi n k}{N}}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;br /&gt;
where &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;w&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; is sampled by &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mfrac&gt;&lt;mrow&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mi&gt;π&lt;/mi&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;/mrow&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;/mfrac&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\frac{2\pi k}{N}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; for &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mi&gt;.&lt;/mi&gt;&lt;mi&gt;.&lt;/mi&gt;&lt;mi&gt;.&lt;/mi&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;k = 0,1, ..., N-1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;.&lt;br /&gt;
FFT assumes the signal is periodic with period N and infinite duration. As the observation time of the signal is limited for a finite interval, infinite duration assumption cannot be satisfied. However, if the observation time is an integer multiple of the period of the signal, it would not cause a problem. This is because periodic signal and repeated signal results in the same signal.&lt;br /&gt;
On the other hand, if the observation time is not an integer multiple of the period, then frequency components of the signal change. There would be either discontinuties or overlaps in the signal when it is repeated over the observation time.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.github.com/bugra/Notes/master/Spectral-Leakage/img/snapshot_twosignals.png&quot; title=&quot;Discontinuity Signal&quot; alt=&quot;Alt text&quot; /&gt; The figure above shows the discontinuity in time domain and this results in spectral leakage in the frequency domain.&lt;br /&gt;
The problem is actually in this case and in general is “windowing”. FFT assumes the signal is periodic and infinite, but when we observe and actually get the signal, we get its some part in a window. This is called non-coherent sampling, and shown below also.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.github.com/bugra/Notes/master/Spectral-Leakage/img/spectral_leakage1.png&quot; title=&quot;Non-coherent Sampling&quot; alt=&quot;Alt text&quot; /&gt; That is the observed signal is actually convolution of “ideal”(infinite, periodic) signal with a windowing function. We also know that window results in &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;sinc&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; function in the frequency domain and it has side lobes other than its main lobe. Those side lobes are not desired and they represent spectral leakage in frequency domain.&lt;br /&gt;
This results in unwanted frequency bins next to the main bin in the Fourier domain as shown below. It may be easy to remember this &lt;em&gt;phenomena&lt;/em&gt; if you think a “leakage” from the main bin to the other bins.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.github.com/bugra/Notes/master/Spectral-Leakage/img/spectral_leakage2.png&quot; title=&quot;Spectral Leakage in Frequency Bins&quot; alt=&quot;Alt text&quot; /&gt; If the sampling rate is the multiple integer of the period of the input signal, this sampling is called &lt;strong&gt;coherent sampling&lt;/strong&gt;. However, it is not very common to know the input signal’s frequency exactly. Therefore, we need windows in order to analyze signals. Coherent sampling is shown in successive frames.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;https://raw.github.com/bugra/Notes/master/Spectral-Leakage/img/coherent_sampling1.png&quot; title=&quot;Coherent Sampling in Time Domain&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Alt text&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.github.com/bugra/Notes/master/Spectral-Leakage/img/coherent_sampling2.png&quot; title=&quot;Coherent Sampling in Frequency Domain&quot; alt=&quot;Alt text&quot; /&gt; Instead of rectangular signals, we may want to choose non-rectangular windows in order to decrease the spectral leakage. I do not want to go into detail, but in terms of choosing non-rectangular windows, there is also a trade-off. It is between frequency resolution and spectral leakage. If you want more frequency resolution in the signal, you need to sacrifice in the spectral leakage or vice versa.&lt;/p&gt;
&lt;h3 id=&quot;code&quot;&gt;Code&lt;/h3&gt;
&lt;p&gt;All of the code and images used in this note is available in the &lt;a href=&quot;https://github.com/bugra/Spectral-Leakage&quot; title=&quot;Spectral Leakage&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</content>
  </entry>
  <entry xml:base="https://bugra.github.io/">
    <title type="text">MongoDB Notes</title>
    <id>https://bugra.github.io/posts/2012/6/16/MongoDB-Notes</id>
    <updated>2012-06-16T00:00:00Z</updated>
    <published>2012-06-16T00:00:00Z</published>
    <link href="https://bugra.github.io/posts/2012/6/16/MongoDB-Notes" />
    <author>
      <name>Bugra Akyildiz</name>
    </author>
    <content type="html">&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;
  &lt;title&gt;-&lt;/title&gt;
  &lt;style&gt;
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
    pre &gt; code.sourceCode { white-space: pre; position: relative; }
    pre &gt; code.sourceCode &gt; span { display: inline-block; line-height: 1.25; }
    pre &gt; code.sourceCode &gt; span:empty { height: 1.2em; }
    code.sourceCode &gt; span { color: inherit; text-decoration: inherit; }
    div.sourceCode { margin: 1em 0; }
    pre.sourceCode { margin: 0; }
    @media screen {
    div.sourceCode { overflow: auto; }
    }
    @media print {
    pre &gt; code.sourceCode { white-space: pre-wrap; }
    pre &gt; code.sourceCode &gt; span { text-indent: -5em; padding-left: 5em; }
    }
    pre.numberSource code
      { counter-reset: source-line 0; }
    pre.numberSource code &gt; span
      { position: relative; left: -4em; counter-increment: source-line; }
    pre.numberSource code &gt; span &gt; a:first-child::before
      { content: counter(source-line);
        position: relative; left: -1em; text-align: right; vertical-align: baseline;
        border: none; display: inline-block;
        -webkit-touch-callout: none; -webkit-user-select: none;
        -khtml-user-select: none; -moz-user-select: none;
        -ms-user-select: none; user-select: none;
        padding: 0 4px; width: 4em;
        color: #aaaaaa;
      }
    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
    div.sourceCode
      {   }
    @media screen {
    pre &gt; code.sourceCode &gt; span &gt; a:first-child::before { text-decoration: underline; }
    }
    code span.al { color: #ff0000; font-weight: bold; } /* Alert */
    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
    code span.at { color: #7d9029; } /* Attribute */
    code span.bn { color: #40a070; } /* BaseN */
    code span.bu { } /* BuiltIn */
    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
    code span.ch { color: #4070a0; } /* Char */
    code span.cn { color: #880000; } /* Constant */
    code span.co { color: #60a0b0; font-style: italic; } /* Comment */
    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
    code span.do { color: #ba2121; font-style: italic; } /* Documentation */
    code span.dt { color: #902000; } /* DataType */
    code span.dv { color: #40a070; } /* DecVal */
    code span.er { color: #ff0000; font-weight: bold; } /* Error */
    code span.ex { } /* Extension */
    code span.fl { color: #40a070; } /* Float */
    code span.fu { color: #06287e; } /* Function */
    code span.im { } /* Import */
    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
    code span.kw { color: #007020; font-weight: bold; } /* Keyword */
    code span.op { color: #666666; } /* Operator */
    code span.ot { color: #007020; } /* Other */
    code span.pp { color: #bc7a00; } /* Preprocessor */
    code span.sc { color: #4070a0; } /* SpecialChar */
    code span.ss { color: #bb6688; } /* SpecialString */
    code span.st { color: #4070a0; } /* String */
    code span.va { color: #19177c; } /* Variable */
    code span.vs { color: #4070a0; } /* VerbatimString */
    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
  &lt;/style&gt;
  &lt;!--[if lt IE 9]&gt;
    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;
  &lt;![endif]--&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h3 id=&quot;some-properties&quot;&gt;Some Properties&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;MongoDB instances act as high-level container.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Collection&lt;/em&gt; is a synonym of table in sql.&lt;/li&gt;
&lt;li&gt;Collections are made by &lt;em&gt;documents&lt;/em&gt;. (document =&amp;gt; row)&lt;/li&gt;
&lt;li&gt;Document is made by &lt;em&gt;fields&lt;/em&gt;. (field =&amp;gt; column)&lt;/li&gt;
&lt;li&gt;Indices are similar to sql databases.&lt;/li&gt;
&lt;li&gt;Cursor can count or skip ahead without actually pulling down data.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;A collection does not have a schema to follow. Therefore, fields are tracked with each individual document.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;_id field is automatically generated by MongoDB, and every document must have a unique _id field.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;adding-queries&quot;&gt;Adding queries&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;#cb1-1&quot;&gt;&lt;/a&gt;db&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;at&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;insert&lt;/span&gt;({&lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;#39;Agent Smith&amp;#39;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;gender&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;#39;m&amp;#39;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;44&lt;/span&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and &lt;code&gt;db.matrix.findOne()&lt;/code&gt; results in;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;#cb2-1&quot;&gt;&lt;/a&gt;{&lt;/span&gt;
&lt;span id=&quot;cb2-2&quot;&gt;&lt;a href=&quot;#cb2-2&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;st&quot;&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; ObjectId(&lt;span class=&quot;st&quot;&gt;&amp;quot;4fcf8b5321f61bf6f63ddd78&amp;quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-3&quot;&gt;&lt;a href=&quot;#cb2-3&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;st&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Agent Smith&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-4&quot;&gt;&lt;a href=&quot;#cb2-4&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;st&quot;&gt;&amp;quot;gender&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;m&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-5&quot;&gt;&lt;a href=&quot;#cb2-5&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;st&quot;&gt;&amp;quot;age&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;44&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-6&quot;&gt;&lt;a href=&quot;#cb2-6&quot;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we add another person:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb3&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span id=&quot;cb3-1&quot;&gt;&lt;a href=&quot;#cb3-1&quot;&gt;&lt;/a&gt;db&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;at&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;insert&lt;/span&gt;({&lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;#39;Neo&amp;#39;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;gender&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;#39;m&amp;#39;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;40&lt;/span&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and call &lt;code&gt;db.matrix.find()&lt;/code&gt; then we get;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb4&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span id=&quot;cb4-1&quot;&gt;&lt;a href=&quot;#cb4-1&quot;&gt;&lt;/a&gt;{ &lt;span class=&quot;st&quot;&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; ObjectId(&lt;span class=&quot;st&quot;&gt;&amp;quot;4fcf8b5321f61bf6f63ddd78&amp;quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Agent Smith&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;gender&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;m&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;age&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;44&lt;/span&gt; }&lt;/span&gt;
&lt;span id=&quot;cb4-2&quot;&gt;&lt;a href=&quot;#cb4-2&quot;&gt;&lt;/a&gt;{ &lt;span class=&quot;st&quot;&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; ObjectId(&lt;span class=&quot;st&quot;&gt;&amp;quot;4fcf8ce921f61bf6f63ddd79&amp;quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Neo&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;gender&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;m&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;age&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;40&lt;/span&gt; }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Similarly add two more people:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb5&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span id=&quot;cb5-1&quot;&gt;&lt;a href=&quot;#cb5-1&quot;&gt;&lt;/a&gt;db&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;at&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;insert&lt;/span&gt;({&lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;#39;Trinity&amp;#39;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;gender&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;#39;f&amp;#39;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;35&lt;/span&gt;})&lt;/span&gt;
&lt;span id=&quot;cb5-2&quot;&gt;&lt;a href=&quot;#cb5-2&quot;&gt;&lt;/a&gt;db&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;at&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;insert&lt;/span&gt;({&lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;#39;Morpheus&amp;#39;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;gender&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;#39;m&amp;#39;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;45&lt;/span&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And we have total of four people in the database and we could print by using &lt;code&gt;find()&lt;/code&gt; method as &lt;code&gt;db.matrix.find()&lt;/code&gt; and return the list of &lt;em&gt;documents&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb6&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span id=&quot;cb6-1&quot;&gt;&lt;a href=&quot;#cb6-1&quot;&gt;&lt;/a&gt;{ &lt;span class=&quot;st&quot;&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; ObjectId(&lt;span class=&quot;st&quot;&gt;&amp;quot;4fcf8b5321f61bf6f63ddd78&amp;quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Agent Smith&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;gender&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;m&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;age&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;44&lt;/span&gt; }&lt;/span&gt;
&lt;span id=&quot;cb6-2&quot;&gt;&lt;a href=&quot;#cb6-2&quot;&gt;&lt;/a&gt;{ &lt;span class=&quot;st&quot;&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; ObjectId(&lt;span class=&quot;st&quot;&gt;&amp;quot;4fcf8ce921f61bf6f63ddd79&amp;quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Neo&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;gender&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;m&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;age&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;40&lt;/span&gt; }&lt;/span&gt;
&lt;span id=&quot;cb6-3&quot;&gt;&lt;a href=&quot;#cb6-3&quot;&gt;&lt;/a&gt;{ &lt;span class=&quot;st&quot;&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; ObjectId(&lt;span class=&quot;st&quot;&gt;&amp;quot;4fcf8df921f61bf6f63ddd7a&amp;quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Trinity&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;gender&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;f&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;age&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;35&lt;/span&gt; }&lt;/span&gt;
&lt;span id=&quot;cb6-4&quot;&gt;&lt;a href=&quot;#cb6-4&quot;&gt;&lt;/a&gt;{ &lt;span class=&quot;st&quot;&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; ObjectId(&lt;span class=&quot;st&quot;&gt;&amp;quot;4fcf8e0821f61bf6f63ddd7b&amp;quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Morpheus&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;gender&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;m&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;age&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;45&lt;/span&gt; }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Architecture seems to be male, but he is considered to be ageless. Therefore, when we insert the document in database, we &lt;em&gt;can&lt;/em&gt; simply ignore his age information as such:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb7&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span id=&quot;cb7-1&quot;&gt;&lt;a href=&quot;#cb7-1&quot;&gt;&lt;/a&gt;db&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;at&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;insert&lt;/span&gt;({&lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;#39;Architecture&amp;#39;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;gender&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;#39;m&amp;#39;&lt;/span&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and when we return documents, mongo would not cause any problem at all.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb8&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span id=&quot;cb8-1&quot;&gt;&lt;a href=&quot;#cb8-1&quot;&gt;&lt;/a&gt;{ &lt;span class=&quot;st&quot;&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; ObjectId(&lt;span class=&quot;st&quot;&gt;&amp;quot;4fcf8b5321f61bf6f63ddd78&amp;quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Agent Smith&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;gender&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;m&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;age&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;44&lt;/span&gt; }&lt;/span&gt;
&lt;span id=&quot;cb8-2&quot;&gt;&lt;a href=&quot;#cb8-2&quot;&gt;&lt;/a&gt;{ &lt;span class=&quot;st&quot;&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; ObjectId(&lt;span class=&quot;st&quot;&gt;&amp;quot;4fcf8ce921f61bf6f63ddd79&amp;quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Neo&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;gender&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;m&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;age&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;40&lt;/span&gt; }&lt;/span&gt;
&lt;span id=&quot;cb8-3&quot;&gt;&lt;a href=&quot;#cb8-3&quot;&gt;&lt;/a&gt;{ &lt;span class=&quot;st&quot;&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; ObjectId(&lt;span class=&quot;st&quot;&gt;&amp;quot;4fcf8df921f61bf6f63ddd7a&amp;quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Trinity&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;gender&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;f&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;age&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;35&lt;/span&gt; }&lt;/span&gt;
&lt;span id=&quot;cb8-4&quot;&gt;&lt;a href=&quot;#cb8-4&quot;&gt;&lt;/a&gt;{ &lt;span class=&quot;st&quot;&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; ObjectId(&lt;span class=&quot;st&quot;&gt;&amp;quot;4fcf8e0821f61bf6f63ddd7b&amp;quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Morpheus&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;gender&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;m&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;age&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;45&lt;/span&gt; }&lt;/span&gt;
&lt;span id=&quot;cb8-5&quot;&gt;&lt;a href=&quot;#cb8-5&quot;&gt;&lt;/a&gt;{ &lt;span class=&quot;st&quot;&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; ObjectId(&lt;span class=&quot;st&quot;&gt;&amp;quot;4fcfa18821f61bf6f63ddd7c&amp;quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Architecture&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;gender&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;m&amp;quot;&lt;/span&gt; }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr /&gt;
&lt;p&gt;After creating the database, we need to be able to select some queries based on their fields. In order to do it, we need to use &lt;em&gt;selectors&lt;/em&gt; which are very similart to &lt;strong&gt;where&lt;/strong&gt; clause of Sql statement. simplest one is &lt;code&gt;{}&lt;/code&gt; which returns all documents in the collection. &lt;code&gt;null&lt;/code&gt; also does the same thing as such:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb9&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span id=&quot;cb9-1&quot;&gt;&lt;a href=&quot;#cb9-1&quot;&gt;&lt;/a&gt;db&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;at&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;find&lt;/span&gt;({})&lt;/span&gt;
&lt;span id=&quot;cb9-2&quot;&gt;&lt;a href=&quot;#cb9-2&quot;&gt;&lt;/a&gt;db&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;at&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;find&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;returns all the documents in the collection. &lt;code&gt;and&lt;/code&gt; statement is accomplished in the form of:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb10&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span id=&quot;cb10-1&quot;&gt;&lt;a href=&quot;#cb10-1&quot;&gt;&lt;/a&gt;{&lt;span class=&quot;dt&quot;&gt;field1&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; value1&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;field2&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; value2}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;which is very intuitive. In this example, if we want to return males whose ages are more or equal to 44, then we need to write a selector as such:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb11&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span id=&quot;cb11-1&quot;&gt;&lt;a href=&quot;#cb11-1&quot;&gt;&lt;/a&gt;db&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;at&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;find&lt;/span&gt;({&lt;span class=&quot;dt&quot;&gt;gender&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;#39;m&amp;#39;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; {&lt;span class=&quot;dt&quot;&gt;$gte&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;44&lt;/span&gt;}})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Some of common operations are: &lt;code&gt;\(lt&lt;/code&gt; =&amp;gt; less than &lt;code&gt;\(lte&lt;/code&gt;=&amp;gt; less or equal &lt;code&gt;\(gt&lt;/code&gt;=&amp;gt; greater than &lt;code&gt;\(gte&lt;/code&gt;=&amp;gt; greater or equal &lt;code&gt;\(ne&lt;/code&gt; =&amp;gt; not equal&lt;/p&gt;
&lt;p&gt;If we take harder example like a field defines an array, in a particular example, let it be sports which students like, create the database as such:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb12&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span id=&quot;cb12-1&quot;&gt;&lt;a href=&quot;#cb12-1&quot;&gt;&lt;/a&gt;{ &lt;span class=&quot;st&quot;&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; ObjectId(&lt;span class=&quot;st&quot;&gt;&amp;quot;4fcfce79fd6230c28d817740&amp;quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;john&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;likes&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [ &lt;span class=&quot;st&quot;&gt;&amp;quot;basketball&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;football&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;baseball&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;swimming&amp;quot;&lt;/span&gt; ] }&lt;/span&gt;
&lt;span id=&quot;cb12-2&quot;&gt;&lt;a href=&quot;#cb12-2&quot;&gt;&lt;/a&gt;{ &lt;span class=&quot;st&quot;&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; ObjectId(&lt;span class=&quot;st&quot;&gt;&amp;quot;4fcfcf02fd6230c28d817742&amp;quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;mike&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;likes&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [ &lt;span class=&quot;st&quot;&gt;&amp;quot;basketball&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;football&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;tennis&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;rugby&amp;quot;&lt;/span&gt; ] }&lt;/span&gt;
&lt;span id=&quot;cb12-3&quot;&gt;&lt;a href=&quot;#cb12-3&quot;&gt;&lt;/a&gt;{ &lt;span class=&quot;st&quot;&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; ObjectId(&lt;span class=&quot;st&quot;&gt;&amp;quot;4fcfcf08fd6230c28d817743&amp;quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;cassandra&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;likes&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [ &lt;span class=&quot;st&quot;&gt;&amp;quot;golf&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;table-tennis&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;tennis&amp;quot;&lt;/span&gt; ] }&lt;/span&gt;
&lt;span id=&quot;cb12-4&quot;&gt;&lt;a href=&quot;#cb12-4&quot;&gt;&lt;/a&gt;{ &lt;span class=&quot;st&quot;&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; ObjectId(&lt;span class=&quot;st&quot;&gt;&amp;quot;4fcfcf11fd6230c28d817744&amp;quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;paul&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;likes&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [ &lt;span class=&quot;st&quot;&gt;&amp;quot;golf&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;table-tennis&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;tennis&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;rugby&amp;quot;&lt;/span&gt; ] }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we would like to retrieve students who likes golf or tennis:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb13&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span id=&quot;cb13-1&quot;&gt;&lt;a href=&quot;#cb13-1&quot;&gt;&lt;/a&gt;db&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;at&quot;&gt;students&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;find&lt;/span&gt;({&lt;span class=&quot;dt&quot;&gt;$or&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [{&lt;span class=&quot;dt&quot;&gt;likes&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;#39;tennis&amp;#39;&lt;/span&gt;}&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;{&lt;span class=&quot;dt&quot;&gt;likes&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;#39;golf&amp;#39;&lt;/span&gt;}]})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then we get queries;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb14&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span id=&quot;cb14-1&quot;&gt;&lt;a href=&quot;#cb14-1&quot;&gt;&lt;/a&gt;{ &lt;span class=&quot;st&quot;&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; ObjectId(&lt;span class=&quot;st&quot;&gt;&amp;quot;4fcfcf02fd6230c28d817742&amp;quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;mike&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;likes&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [ &lt;span class=&quot;st&quot;&gt;&amp;quot;basketball&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;football&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;tennis&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;rugby&amp;quot;&lt;/span&gt; ] }&lt;/span&gt;
&lt;span id=&quot;cb14-2&quot;&gt;&lt;a href=&quot;#cb14-2&quot;&gt;&lt;/a&gt;{ &lt;span class=&quot;st&quot;&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; ObjectId(&lt;span class=&quot;st&quot;&gt;&amp;quot;4fcfcf08fd6230c28d817743&amp;quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;cassandra&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;likes&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [ &lt;span class=&quot;st&quot;&gt;&amp;quot;golf&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;table-tennis&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;tennis&amp;quot;&lt;/span&gt; ] }&lt;/span&gt;
&lt;span id=&quot;cb14-3&quot;&gt;&lt;a href=&quot;#cb14-3&quot;&gt;&lt;/a&gt;{ &lt;span class=&quot;st&quot;&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; ObjectId(&lt;span class=&quot;st&quot;&gt;&amp;quot;4fcfcf11fd6230c28d817744&amp;quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;paul&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;likes&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [ &lt;span class=&quot;st&quot;&gt;&amp;quot;golf&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;table-tennis&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;tennis&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;rugby&amp;quot;&lt;/span&gt; ] }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;as expected. In these array fields, it is very easy to combine some of the fields let alone one of the field query returning. It becomes extremely useful as time goes by. One operation is &lt;code&gt;\(in&lt;/code&gt; which tries to determine whether the values are in the array.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb15&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span id=&quot;cb15-1&quot;&gt;&lt;a href=&quot;#cb15-1&quot;&gt;&lt;/a&gt;db&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;at&quot;&gt;scores&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;find&lt;/span&gt;({&lt;span class=&quot;dt&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;{&lt;span class=&quot;st&quot;&gt;&amp;#39;$in&amp;#39;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;[&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;]}})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Another similar and useful operation is &lt;code&gt;exists&lt;/code&gt; operation which checks whether the value matches to any value in the database checking every field in the collection. Id’s of documents can also be selected using &lt;code&gt;_id&lt;/code&gt; field in the collection as such:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb16&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span id=&quot;cb16-1&quot;&gt;&lt;a href=&quot;#cb16-1&quot;&gt;&lt;/a&gt;db&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;at&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;find&lt;/span&gt;({&lt;span class=&quot;dt&quot;&gt;_id&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; ObjectId(&lt;span class=&quot;st&quot;&gt;&amp;quot;4fd0685b4e0fa619963db3b3&amp;quot;&lt;/span&gt;)})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and it results in the respective document:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb17&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span id=&quot;cb17-1&quot;&gt;&lt;a href=&quot;#cb17-1&quot;&gt;&lt;/a&gt;{ &lt;span class=&quot;st&quot;&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; ObjectId(&lt;span class=&quot;st&quot;&gt;&amp;quot;4fd0685b4e0fa619963db3b3&amp;quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Morpheus&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;gender&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;m&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;age&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;45&lt;/span&gt; }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we have document which have common fields and want to count them, we could do so by using &lt;code&gt;count&lt;/code&gt; operation.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb18&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span id=&quot;cb18-1&quot;&gt;&lt;a href=&quot;#cb18-1&quot;&gt;&lt;/a&gt;db&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;at&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;count&lt;/span&gt;({&lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Morpheus&amp;quot;&lt;/span&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and it returns 2.(I added the same item twice). If it does not find it, it returns 0 as expected.&lt;/p&gt;
&lt;h3 id=&quot;removing-queries&quot;&gt;Removing Queries&lt;/h3&gt;
&lt;p&gt;We could also erase the documents based on their properties as such:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb19&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span id=&quot;cb19-1&quot;&gt;&lt;a href=&quot;#cb19-1&quot;&gt;&lt;/a&gt;db&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;at&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;remove&lt;/span&gt;({&lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Morpheus&amp;quot;&lt;/span&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we want to remove all the entries, we could simply do not give any field information or put &lt;code&gt;null&lt;/code&gt; in &lt;code&gt;remove&lt;/code&gt; operation:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb20&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span id=&quot;cb20-1&quot;&gt;&lt;a href=&quot;#cb20-1&quot;&gt;&lt;/a&gt;db&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;at&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;remove&lt;/span&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For updates, let’s first create a database in a different syntax:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb21&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span id=&quot;cb21-1&quot;&gt;&lt;a href=&quot;#cb21-1&quot;&gt;&lt;/a&gt;db&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;at&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;save&lt;/span&gt;({&lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;#39;John&amp;#39;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;languages&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;st&quot;&gt;&amp;#39;ruby&amp;#39;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;#39;java&amp;#39;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;#39;javascript&amp;#39;&lt;/span&gt;]})&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb21-2&quot;&gt;&lt;a href=&quot;#cb21-2&quot;&gt;&lt;/a&gt;db&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;at&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;save&lt;/span&gt;({&lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;#39;Sue&amp;#39;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;languages&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;st&quot;&gt;&amp;#39;haskell&amp;#39;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;#39;lisp&amp;#39;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;#39;python&amp;#39;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;#39;lush&amp;#39;&lt;/span&gt;]})&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In order to update, we need to first select the document based on its one of the field, in this example it would be the names of people and using &lt;code&gt;update()&lt;/code&gt; operation, we could update as such:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb22&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span id=&quot;cb22-1&quot;&gt;&lt;a href=&quot;#cb22-1&quot;&gt;&lt;/a&gt;db&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;at&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;update&lt;/span&gt;({&lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;#39;John&amp;#39;&lt;/span&gt;}&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; {&lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;#39;Johnny&amp;#39;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;languages&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;st&quot;&gt;&amp;#39;scala&amp;#39;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;#39;java&amp;#39;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;#39;python&amp;#39;&lt;/span&gt;]})&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Instead of updating the entire document, we could update only the fields:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb23&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span id=&quot;cb23-1&quot;&gt;&lt;a href=&quot;#cb23-1&quot;&gt;&lt;/a&gt;db&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;at&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;update&lt;/span&gt;({&lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;#39;Sue&amp;#39;&lt;/span&gt;}&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;{&lt;span class=&quot;st&quot;&gt;&amp;#39;$set&amp;#39;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; {&lt;span class=&quot;dt&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;25&lt;/span&gt;}})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And when we try to print out the collection:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb24&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span id=&quot;cb24-1&quot;&gt;&lt;a href=&quot;#cb24-1&quot;&gt;&lt;/a&gt;{ &lt;span class=&quot;st&quot;&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; ObjectId(&lt;span class=&quot;st&quot;&gt;&amp;quot;4fd7d5aba46929bd0bbd56f7&amp;quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Johnny&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;languages&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [ &lt;span class=&quot;st&quot;&gt;&amp;quot;scala&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;java&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;python&amp;quot;&lt;/span&gt; ] }&lt;/span&gt;
&lt;span id=&quot;cb24-2&quot;&gt;&lt;a href=&quot;#cb24-2&quot;&gt;&lt;/a&gt;{ &lt;span class=&quot;st&quot;&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; ObjectId(&lt;span class=&quot;st&quot;&gt;&amp;quot;4fd7d5ada46929bd0bbd56f8&amp;quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;age&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;languages&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [ &lt;span class=&quot;st&quot;&gt;&amp;quot;scala&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;lisp&amp;quot;&lt;/span&gt; ]&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Sue&amp;quot;&lt;/span&gt; }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In order to update array elements, we could use &lt;code&gt;\(pull&lt;/code&gt; and &lt;code&gt;\(push&lt;/code&gt; operations. For example, if we want to remove &lt;em&gt;haskell&lt;/em&gt; language from Sue’s languages:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb25&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span id=&quot;cb25-1&quot;&gt;&lt;a href=&quot;#cb25-1&quot;&gt;&lt;/a&gt;db&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;at&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;update&lt;/span&gt;({&lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;#39;Sue&amp;#39;&lt;/span&gt;}&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; {&lt;span class=&quot;st&quot;&gt;&amp;#39;$pull&amp;#39;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; {&lt;span class=&quot;st&quot;&gt;&amp;#39;languages&amp;#39;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;#39;haskell&amp;#39;&lt;/span&gt;} })&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and if we want to add a language say java:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb26&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span id=&quot;cb26-1&quot;&gt;&lt;a href=&quot;#cb26-1&quot;&gt;&lt;/a&gt;db&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;at&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;update&lt;/span&gt;({&lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;#39;Sue&amp;#39;&lt;/span&gt;}&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; {&lt;span class=&quot;st&quot;&gt;&amp;#39;$push&amp;#39;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; {&lt;span class=&quot;st&quot;&gt;&amp;#39;languages&amp;#39;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;#39;java&amp;#39;&lt;/span&gt;} })&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;upsertupdate-insert&quot;&gt;Upsert(Update + Insert)&lt;/h3&gt;
&lt;p&gt;Mongo supports so called &lt;em&gt;upserts&lt;/em&gt; which is nothing more than a fancy combination of update and insert. That is, if item that we want to update is not in the collection, it automatically creates it. If it does exist in the collection, it updates by default. However, in order to enable this feature of Mongo, we need to enable the third parameter of &lt;code&gt;update&lt;/code&gt; operation as &lt;code&gt;true&lt;/code&gt;. Say, we need to create a website hit counter, and in order to do so we increment the number of hits every time the name of website is updated. If we do not have the website name in the collection, we do not have to create it beforehand. We could just use upsert as such:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb27&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span id=&quot;cb27-1&quot;&gt;&lt;a href=&quot;#cb27-1&quot;&gt;&lt;/a&gt;db&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;at&quot;&gt;hits&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;update&lt;/span&gt;({&lt;span class=&quot;dt&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;#39;yahoo&amp;#39;&lt;/span&gt;}&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;{&lt;span class=&quot;dt&quot;&gt;$inc&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; {&lt;span class=&quot;dt&quot;&gt;hits&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;}}&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we do not have the third parameter or set to &lt;code&gt;false&lt;/code&gt;, above statement does not change anything in the collection.&lt;/p&gt;
&lt;h3 id=&quot;multiple-updates&quot;&gt;Multiple Updates&lt;/h3&gt;
&lt;p&gt;If we want to multiple updates in the collection, we need to enable the fourt parameter in the &lt;code&gt;update&lt;/code&gt; operation. For example, we want to reset the counter of websites as such:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb28&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span id=&quot;cb28-1&quot;&gt;&lt;a href=&quot;#cb28-1&quot;&gt;&lt;/a&gt;db&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;at&quot;&gt;hits&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;update&lt;/span&gt;({}&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;{&lt;span class=&quot;dt&quot;&gt;$set&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; {&lt;span class=&quot;dt&quot;&gt;hits&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;}}&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By doing so, we update all the documents in the collection. However, if we do not enable the fourt parameter as &lt;code&gt;true&lt;/code&gt;, then &lt;em&gt;only the first element of the collection will be updated&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&quot;deeper-in-find-operation&quot;&gt;Deeper in &lt;code&gt;find()&lt;/code&gt; operation&lt;/h3&gt;
&lt;p&gt;If we want to retrieve specific fields of the documents we could use a second parameter in &lt;code&gt;find()&lt;/code&gt;,e.g. only the names of the webpages as such:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb29&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span id=&quot;cb29-1&quot;&gt;&lt;a href=&quot;#cb29-1&quot;&gt;&lt;/a&gt;db&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;at&quot;&gt;hits&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;find&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;{&lt;span class=&quot;dt&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;then, it results in only page fields of documents, namely &lt;em&gt;google&lt;/em&gt; and &lt;em&gt;yahoo&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&quot;ordering&quot;&gt;Ordering&lt;/h3&gt;
&lt;p&gt;Say, we have a database as such:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb30&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span id=&quot;cb30-1&quot;&gt;&lt;a href=&quot;#cb30-1&quot;&gt;&lt;/a&gt;{ &lt;span class=&quot;st&quot;&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; ObjectId(&lt;span class=&quot;st&quot;&gt;&amp;quot;4fd8cf5bbd6be5d371385b9a&amp;quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;hits&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;page&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;yahoo&amp;quot;&lt;/span&gt; }&lt;/span&gt;
&lt;span id=&quot;cb30-2&quot;&gt;&lt;a href=&quot;#cb30-2&quot;&gt;&lt;/a&gt;{ &lt;span class=&quot;st&quot;&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; ObjectId(&lt;span class=&quot;st&quot;&gt;&amp;quot;4fd8d0fabd6be5d371385b9b&amp;quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;hits&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;page&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;google&amp;quot;&lt;/span&gt; }&lt;/span&gt;
&lt;span id=&quot;cb30-3&quot;&gt;&lt;a href=&quot;#cb30-3&quot;&gt;&lt;/a&gt;{ &lt;span class=&quot;st&quot;&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; ObjectId(&lt;span class=&quot;st&quot;&gt;&amp;quot;4fd91925da57fdfbb68d7848&amp;quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;page&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;microsoft&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;hits&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt; }&lt;/span&gt;
&lt;span id=&quot;cb30-4&quot;&gt;&lt;a href=&quot;#cb30-4&quot;&gt;&lt;/a&gt;{ &lt;span class=&quot;st&quot;&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; ObjectId(&lt;span class=&quot;st&quot;&gt;&amp;quot;4fd91930da57fdfbb68d7849&amp;quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;page&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;facebook&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;hits&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;15&lt;/span&gt; }&lt;/span&gt;
&lt;span id=&quot;cb30-5&quot;&gt;&lt;a href=&quot;#cb30-5&quot;&gt;&lt;/a&gt;{ &lt;span class=&quot;st&quot;&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; ObjectId(&lt;span class=&quot;st&quot;&gt;&amp;quot;4fd91938da57fdfbb68d784a&amp;quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;page&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;apple&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;hits&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;30&lt;/span&gt; }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and we want to order this collection by the number of hits in a descending order. We could do this by using &lt;code&gt;sort()&lt;/code&gt; operation as such:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb31&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span id=&quot;cb31-1&quot;&gt;&lt;a href=&quot;#cb31-1&quot;&gt;&lt;/a&gt;db&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;at&quot;&gt;hits&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;find&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;sort&lt;/span&gt;({&lt;span class=&quot;dt&quot;&gt;hits&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;-1&lt;/span&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we want to also return some specific ranks in the sort, we could use &lt;code&gt;limit()&lt;/code&gt; and &lt;code&gt;skip()&lt;/code&gt; operations. For example, we want to return second and third queries only.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb32&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span id=&quot;cb32-1&quot;&gt;&lt;a href=&quot;#cb32-1&quot;&gt;&lt;/a&gt;db&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;at&quot;&gt;hits&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;find&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;sort&lt;/span&gt;({&lt;span class=&quot;dt&quot;&gt;hits&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;-1&lt;/span&gt;})&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;limit&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;skip&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;counting-count&quot;&gt;Counting &lt;code&gt;count()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;count()&lt;/code&gt; can be used itself as an independent operation similar to &lt;code&gt;update&lt;/code&gt; and &lt;code&gt;insert&lt;/code&gt;. However, its origin is to follow &lt;code&gt;find().count()&lt;/code&gt;. Therefore, &lt;code&gt;count()&lt;/code&gt; operation can be considered as a syntactic sugar for &lt;code&gt;find&lt;/code&gt; and &lt;code&gt;count&lt;/code&gt;. If we want to count the webpages which have higher than 9 hits;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb33&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span id=&quot;cb33-1&quot;&gt;&lt;a href=&quot;#cb33-1&quot;&gt;&lt;/a&gt;db&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;at&quot;&gt;hits&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;find&lt;/span&gt;({&lt;span class=&quot;dt&quot;&gt;hits&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; {&lt;span class=&quot;dt&quot;&gt;$gt&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;9&lt;/span&gt;}})&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;count&lt;/span&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;mongodb-difference-and-similarities-to-rdbms&quot;&gt;MongoDB Difference and Similarities to RDBMS&lt;/h3&gt;
&lt;p&gt;There is no &lt;code&gt;join&lt;/code&gt; opearation in Mongo contrary to RDBMS,but we could connect by using a foreign key in the documents of collections. In order to show the embedded and relational part of database, we start with employees example:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb34&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span id=&quot;cb34-1&quot;&gt;&lt;a href=&quot;#cb34-1&quot;&gt;&lt;/a&gt;{ &lt;span class=&quot;st&quot;&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; ObjectId(&lt;span class=&quot;st&quot;&gt;&amp;quot;4d85c7039ab0fd70a117d730&amp;quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Paul&amp;quot;&lt;/span&gt; }&lt;/span&gt;
&lt;span id=&quot;cb34-2&quot;&gt;&lt;a href=&quot;#cb34-2&quot;&gt;&lt;/a&gt;{ &lt;span class=&quot;st&quot;&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; ObjectId(&lt;span class=&quot;st&quot;&gt;&amp;quot;4d85c7039ab0fd70a117d731&amp;quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Duncan&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;manager&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; ObjectId(&lt;span class=&quot;st&quot;&gt;&amp;quot;4d85c7039ab0fd70a117d730&amp;quot;&lt;/span&gt;) }&lt;/span&gt;
&lt;span id=&quot;cb34-3&quot;&gt;&lt;a href=&quot;#cb34-3&quot;&gt;&lt;/a&gt;{ &lt;span class=&quot;st&quot;&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; ObjectId(&lt;span class=&quot;st&quot;&gt;&amp;quot;4d85c7039ab0fd70a117d732&amp;quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Moneo&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;manager&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; ObjectId(&lt;span class=&quot;st&quot;&gt;&amp;quot;4d85c7039ab0fd70a117d730&amp;quot;&lt;/span&gt;) }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We set Paul as a manager of Duncan and Moneo’s. In the collection, in order to find the manager, we could do as such:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb35&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span id=&quot;cb35-1&quot;&gt;&lt;a href=&quot;#cb35-1&quot;&gt;&lt;/a&gt;db&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;at&quot;&gt;employees&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;find&lt;/span&gt;({&lt;span class=&quot;dt&quot;&gt;manager&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; ObjectId(&lt;span class=&quot;st&quot;&gt;&amp;quot;4d85c7039ab0fd70a117d730&amp;quot;&lt;/span&gt;)})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we have two managers in the company, then we could add two managers as such:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb36&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span id=&quot;cb36-1&quot;&gt;&lt;a href=&quot;#cb36-1&quot;&gt;&lt;/a&gt;db&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;at&quot;&gt;employees&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;insert&lt;/span&gt;({&lt;span class=&quot;dt&quot;&gt;_id&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; ObjectId(&lt;span class=&quot;st&quot;&gt;&amp;quot;4d85c7039ab0fd70a117d733&amp;quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb36-2&quot;&gt;&lt;a href=&quot;#cb36-2&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;#39;Siona&amp;#39;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;manager&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [ObjectId(&lt;span class=&quot;st&quot;&gt;&amp;quot;4d85c7039ab0fd70a117d730&amp;quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; ObjectId(&lt;span class=&quot;st&quot;&gt;&amp;quot;4d85c7039ab0fd70a117d732&amp;quot;&lt;/span&gt;)] })&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We could again return the manager using above operation.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb37&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span id=&quot;cb37-1&quot;&gt;&lt;a href=&quot;#cb37-1&quot;&gt;&lt;/a&gt;db&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;at&quot;&gt;employees&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;find&lt;/span&gt;({&lt;span class=&quot;dt&quot;&gt;manager&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; ObjectId(&lt;span class=&quot;st&quot;&gt;&amp;quot;4d85c7039ab0fd70a117d730&amp;quot;&lt;/span&gt;)})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we want to embed more documents into the collection like a nested document, we could do so as such:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb38&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span id=&quot;cb38-1&quot;&gt;&lt;a href=&quot;#cb38-1&quot;&gt;&lt;/a&gt;db&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;at&quot;&gt;employees&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;insert&lt;/span&gt;({&lt;span class=&quot;dt&quot;&gt;_id&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; ObjectId(&lt;span class=&quot;st&quot;&gt;&amp;quot;4d85c7039ab0fd70a117d734&amp;quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;#39;Ghanima&amp;#39;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb38-2&quot;&gt;&lt;a href=&quot;#cb38-2&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;family&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; {&lt;span class=&quot;dt&quot;&gt;mother&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;#39;Chani&amp;#39;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;father&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;#39;Paul&amp;#39;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;brother&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; ObjectId(&lt;span class=&quot;st&quot;&gt;&amp;quot;4d85c7039ab0fd70a117d730&amp;quot;&lt;/span&gt;)}})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We could return the respective field of the nested document by using &lt;em&gt;dot&lt;/em&gt; notation.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb39&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span id=&quot;cb39-1&quot;&gt;&lt;a href=&quot;#cb39-1&quot;&gt;&lt;/a&gt;db&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;at&quot;&gt;employees&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;find&lt;/span&gt;({&lt;span class=&quot;st&quot;&gt;&amp;#39;family.mother&amp;#39;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;#39;Chani&amp;#39;&lt;/span&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;mongodb-repair-in-ubuntu&quot;&gt;MongoDB Repair in Ubuntu&lt;/h3&gt;
&lt;p&gt;First, try to repair.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo rm /var/lib/mongodb/mongod.lock
sudo chown -R mongodb:mongodb /var/lib/mongodb/
sudo -u mongodb mongod -f /etc/mongodb.conf --repair
sudo service mongodb start&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, restart the database.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo service mongod start
mongo&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;
</content>
  </entry>
  <entry xml:base="https://bugra.github.io/">
    <title type="text">Facts and Fallacies of Software Engineering - Book Review</title>
    <id>https://bugra.github.io/posts/2017/2/11/facts-and-fallacies-of-software-engineering</id>
    <updated>2017-02-11T00:00:00Z</updated>
    <published>2017-02-11T00:00:00Z</published>
    <link href="https://bugra.github.io/posts/2017/2/11/facts-and-fallacies-of-software-engineering" />
    <author>
      <name>Bugra Akyildiz</name>
    </author>
    <content type="html">&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;
  &lt;title&gt;-&lt;/title&gt;
  &lt;style&gt;
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
  &lt;/style&gt;
  &lt;!--[if lt IE 9]&gt;
    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;
  &lt;![endif]--&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;I read &lt;a href=&quot;https://www.walmart.com/ip/Facts-and-Fallacies-of-Software-Engineering/1952720&quot;&gt;Facts and Fallacies of Software Engineering&lt;/a&gt; and I quite enjoyed it. I enjoyed so much that I wanted a review and wanted to write down the quotes that I took.&lt;/p&gt;
&lt;p&gt;The author is very knowledgeable and he knows his stuff, at least you can get the confidence that he knows his stuff. While I was reading the book, at some point, I said out loud “This is my people” the author and the audience. This does not happen very frequently and even when I read software related books.&lt;/p&gt;
&lt;p&gt;“This” refers to software people and specifically; engineers that are working in the software industry. These people are the ones that are writing the software, preparing the meal in the kitchen, they know how that meal is made, they know what needs to be done to make it happen. They saw the sweet sweat to make that feature ship.&lt;/p&gt;
&lt;p&gt;Most people are saying a lot of things about software. Software is eating the world, software is going to change a bunch of industries, software is &lt;strong&gt;revolutionizing&lt;/strong&gt; how we do business, etc. Software is a relatively new field, there are going to be big opportunities and business people are speculating on this field is not the worst thing in the world. However, what I would like to hear more is from people in the kitchen. Not the people who are selling, not the people who are advertise(market), not the people who invest, not the people who manage. I want to hear people who are &lt;strong&gt;preparing&lt;/strong&gt; the meal. I would like to hear how the preparation process is happening and how that process can be improved. So much for the kitchen analogy.&lt;/p&gt;
&lt;p&gt;The book is a very easy read and well separated into various facts and fallacies. So, you can read one-two facts at a time. It is also a great example in the software field to be able to understand the software much better since the author is knowledgeable quite a bit in the area.&lt;/p&gt;
&lt;p&gt;However, he has also a lot of biases and fallacies as well. First and foremost, the supporting facts to his point are given in a much more detailed way where he is not very meticulous about counter arguments. Also, some of his supporting facts is either from his personal experience or very “anecdotal”. While he is arguing some of the facts and fallacies are nothing but subjective opinions, he is supporting some of the “facts” in a very similar way.&lt;/p&gt;
&lt;p&gt;Even though it has quite a few shortcomings, while reading the book, one can sense that most of the things in the book are learned in the kitchen, which itself is a reason to buy this book.&lt;/p&gt;
&lt;h2 id=&quot;software&quot;&gt;Software&lt;/h2&gt;
&lt;h3 id=&quot;maintenance-maintenance-maintenance&quot;&gt;Maintenance, Maintenance, Maintenance&lt;/h3&gt;
&lt;p&gt;This is the stage which starts where you push the button to deploy the code into production. And it just never ends. You build features in this stage on top of the existing the codebase, you still need to fix bugs that is in the code, you still need to do a lot of work to be able to make it not break whether to accommodate various software dependencies or to accommodate a change in the downstream service.&lt;/p&gt;
&lt;p&gt;This book gives a special importance on the maintenance in the software which is very well deserved. Most of the software engineers spend quite a bit of time in this &lt;em&gt;stage&lt;/em&gt; of software development, but this is also the area where most of the time is spent. Technical debt shines in this stage of the software and arguably why this stage requires a large amount of time as well. Legacy code first needs to be read and understood; and this in technical debt is not very easy thing to do.&lt;/p&gt;
&lt;h3 id=&quot;audience&quot;&gt;Audience&lt;/h3&gt;
&lt;p&gt;When you read the book, you can say that “this is my people” for the audience. Complaints around time estimation and how they are being done by non-engineer teams, how estimation of projects is always wrong in some measure, why projects can fail time after time, everything that an engineer could complain about software projects is here. It feels back in the school only difference, these time, adults are the the ones who are complaining.&lt;/p&gt;
&lt;h3 id=&quot;some-good-quotes&quot;&gt;Some Good Quotes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Good management is more important than good technology. (Al Davis, Principles of Software Development)&lt;/li&gt;
&lt;li&gt;We claim that people work better when too-tight schedules and too-binding constraints are imposed on them. We deny our programmers even the most fundamental elements of trust and then expect them to trust us in telling them what to do.&lt;/li&gt;
&lt;li&gt;The prime factor in affecting the reliability of software is in the selection, motivation and management of the personnel who design and maintain it.&lt;/li&gt;
&lt;li&gt;More than anything else, I would want to know that the person who wrote the software was both highly intelligent, and possessed by an extremely rigorous, almost fanatical desire to make their program work the way it should. Everything else to me is secondary …&lt;/li&gt;
&lt;li&gt;The hypesters, as it turns out, almost always are nonobjective folks who have something to gain - product sales, high-priced courses, or funding for research projects.&lt;/li&gt;
&lt;li&gt;Hardware envy: cheaper/better/faster happens over and over again in the hardware world.&lt;/li&gt;
&lt;li&gt;Many of the software tools put on the figurative shelf and never used, that the term shelfware was invented to describe the phenomenon.&lt;/li&gt;
&lt;li&gt;Most of our estimates are more like wishes than realistic targets.&lt;/li&gt;
&lt;li&gt;There is almost always a price to be paid for working toward an unrealistic deadline. That price is most often paid in human terms (reputation, morale, and health, among others), but - as you can see in this story - there is likely a financial price to be paid as well.&lt;/li&gt;
&lt;li&gt;When upper management fails to listen to such knowledgeable words of warning, software people tend to lose faith and trust in those who are giving them direction. And they also lose a whole lot of motivation.&lt;/li&gt;
&lt;li&gt;A very strong correlation between level of productivity and feeling of control(when programmers felt in control of their fate, they were much more productive). In other words, control-focused mangement does not necessarily between does not necessarily lead to the best project or even to the most productive one.&lt;/li&gt;
&lt;li&gt;New kid on the block phenomenon hits us is that we possess all-too-often incurable optimism. It’s as if no one has ever been able to solve the problems we are able to solve, we believe that no new problemis too tough for us to solve.&lt;/li&gt;
&lt;li&gt;When we believe we will instantly produce software without errors and then find that the error-removal phase often takes more time than systems analysis, design, and coding put together.&lt;/li&gt;
&lt;li&gt;It is the exception rather than the rule to ifnd a componet that would be truly generalizable across a multiplicity of applications, let alone domains.&lt;/li&gt;
&lt;li&gt;Screwed together components would be a wonderful way to build software. So would automatic generation of code from a requirements specification. And neither of those, in my view, is ever likely to happen in any meaningful way.&lt;/li&gt;
&lt;li&gt;Someone building a reusable component is thinking of a particular problem to be solved and trying to determine whether there is some more general problem analogous to this specific one.&lt;/li&gt;
&lt;li&gt;Reusable component needs to be generalized: it is not enough to show that it solves your problem at hand. It must solve some related problems, problems that may not have been so clearly in mind when the component was being developed.&lt;/li&gt;
&lt;li&gt;It is amost always a mistake to modify a packaged, vendor-produced software systems.&lt;/li&gt;
&lt;li&gt;Why is “understanding the existing product” the most dominant and difficult task of software maintenance? (Because there are so many possible correct solution approaches to solving any one problem)&lt;/li&gt;
&lt;li&gt;Thinking time constituted the intellectual component of the task, and the jotting time constituted the clerical part.&lt;/li&gt;
&lt;li&gt;Mistake of omission errors: the most persistent software errors - those that escape the testing process and persist into production version of the software - are errors of ommitted logic. Missing requirements result in omitted logic.&lt;/li&gt;
&lt;li&gt;In a room of full of top software designers, if any two of them agree, that is a majority.&lt;/li&gt;
&lt;li&gt;For complex processes, optimal design is usually not possible, and we must strive instead for what Simon calls a “satisficing” solution. Satisficing (rather than optimizing) solutions are those that can be seen to satisfy enough of the criteria for a good design that it is worth taking the risk of choosing that approach and proceeding with problem solution, given that an optimal design is likely to be either impossible or not cost-effective to find.&lt;/li&gt;
&lt;li&gt;Typical software product defeats any attempts to do exhaustive testing. Because of that, testing is an act of compromise, and it is vital to make the proper compromise choices, and it is not surprising that most significant software products are released with errors remaining in them(only the naive expect error-free software)&lt;/li&gt;
&lt;li&gt;Reviews commonly remove up to 90 percent of known errors from a software product before the first test case is run.&lt;/li&gt;
&lt;li&gt;In spite of the cries for “egoless programming”, most of us have an emotional and intellectual investment in our work product, one that makes particularly vulnerable when others are reviewing it.&lt;/li&gt;
&lt;li&gt;Old hardware becomes obsolete, old software goes into production every night.&lt;/li&gt;
&lt;li&gt;The 60/60 rule: 60 percent of software’s dollar is spent on maintenance, and 60 percent of that maintenance is enhancement. Enhancing old software is, therefore, a big deal.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;seven-attributes-for-quality-software&quot;&gt;Seven Attributes for Quality Software&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Portability: is about creating a software product that is easily moved to another platform.&lt;/li&gt;
&lt;li&gt;Reliability: is about a software product that does what is’s supposed to do, dependably.&lt;/li&gt;
&lt;li&gt;Efficiency: is about software product that economizes on both running and space consumption.&lt;/li&gt;
&lt;li&gt;Usability: is about a software product that is easy and comfortable to use.&lt;/li&gt;
&lt;li&gt;Testability: is about a software product that is easy to test.&lt;/li&gt;
&lt;li&gt;Understandability: is about a software product that is easy for maintainer to comprehend.&lt;/li&gt;
&lt;li&gt;Modifiability: is about a software product that is easy for a maintainer to change.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;life-cycle-of-software&quot;&gt;Life-Cycle of Software&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Requirements definition nad development, when the “what” of the problem is defined and analyzed&lt;/li&gt;
&lt;li&gt;Design: when how the problem is to be solved is determined.&lt;/li&gt;
&lt;li&gt;Programming: when the design is transformed into code that will run on a computer.&lt;/li&gt;
&lt;li&gt;Due to of errors: error removal is performed.&lt;/li&gt;
&lt;li&gt;Software is put into production; and &lt;em&gt;maintenance&lt;/em&gt; begins.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;facts&quot;&gt;Facts&lt;/h3&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;The most important factor in software work is not the tools and techniques used by the programmers, but rather the quality of the programmers themselves.&lt;/li&gt;
&lt;li&gt;The best programmers are up to 28 times better than the worst programmers, according to “individual differences” research. Given that their pay is never commensurate, they are the biggest bargains in the software field.&lt;/li&gt;
&lt;li&gt;Adding people to a late project makes it later.&lt;/li&gt;
&lt;li&gt;The working environment has a profound impact on productivity and product quality.&lt;/li&gt;
&lt;li&gt;Hype is the plague on the house of software. Most software tool and technique improvements account for about 5 to 35 percent increase in productivity and quality. But at one time or another, most of those same improvements have been claimed by someone to have “order of magnitude” benefits.&lt;/li&gt;
&lt;li&gt;Learning a new tool or technique actually lowers programmer productivity and product quality initially. The eventual benefit is achieved only after this learning curve is overcome. Therefore, it is worth adopting new tools and techniques, but only if their value is seen realistically and if patience is used in measuring benefits.&lt;/li&gt;
&lt;li&gt;Software developers talk a lot about tools. They evaluate quite a few, buy a fair number, and use practically none.&lt;/li&gt;
&lt;li&gt;One of the two most common causes of runaway projects is poor estimation.&lt;/li&gt;
&lt;li&gt;Most software estimates are performed at the beginning of the life cycle. This makes sense until we realize that estimates are obtained before the requirements are defined and thus before the problem is understood. Estimation, therefore, usually occurs at the wrong time.&lt;/li&gt;
&lt;li&gt;Most software estimates are made either by upper management or by marketing, not by the people who build the software or their managers. Estimation is, therefore, done by the wrong people.&lt;/li&gt;
&lt;li&gt;Software estimates are rarely adjusted as the project succeeds. Thus those estimates done at the wrong time by the wrong people are usually not corrected.&lt;/li&gt;
&lt;li&gt;Since estimates are so faulty, there is little reason to be concerned when software projects do not meet estimated targets. But everyone is concerned anyway.&lt;/li&gt;
&lt;li&gt;There is a disconnect between management and their programmers. In one research study of a project that failed to meet its estimates and was seen by its management as a failure, the technical participants saw it as the most successful project they had ever worked on.&lt;/li&gt;
&lt;li&gt;The answer to a feasibility study is almost always “yes”.&lt;/li&gt;
&lt;li&gt;Reuse-in-the-small (libraries of subroutines) began nearly 50 years ago and is a well-solved problem.&lt;/li&gt;
&lt;li&gt;Reuse-in-the-large (components) remains a mostly unsolved problem, even though everyone agrees it is important and desirable.&lt;/li&gt;
&lt;li&gt;Reuse-in-the-large works best in families of related subsystems and thus is domain dependent. This narrows the potential applicability of reuse-in-the-large.&lt;/li&gt;
&lt;li&gt;There are two “rules of three” in reuse:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;It is three times as difficult to build reusable components as single use components&lt;/li&gt;
&lt;li&gt;A reusable component should be tried out in three different applications before it will be sufficiently general to accept into a reuse library.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;19&quot; type=&quot;1&quot;&gt;
&lt;li&gt;Modification of reused code is particulary error-prone. If more than 20 to 25 percent of a component is to be revised, it is more efficient and effective to rewrite it from scratch.&lt;/li&gt;
&lt;li&gt;Design pattern reuse is one solution to the problems inherent in code reuse.&lt;/li&gt;
&lt;li&gt;For every 25 percent increase in problem complexity, there is a 100 percent increase in complexity of software solution. That is not a condition to try to change(even though reducing complexity is always a desirable thing to do) that is the just way it is.&lt;/li&gt;
&lt;li&gt;Eighty percent of software work is intellectual. A fair amount is creative. Little of it is clerical.&lt;/li&gt;
&lt;li&gt;One of the two most common causes of runaway projects is unstable requirements.(See Fact 8 for other cause)&lt;/li&gt;
&lt;li&gt;Requirements errors are the most expensive to fix when found during productioni but the cheapest to fix early in the development.&lt;/li&gt;
&lt;li&gt;Missing requirements are the hardest requirements errors to correct.&lt;/li&gt;
&lt;li&gt;When moving requirements to design, there is an explosion of “derived requirements” (the requirements for a particular design solution) caused by the complexity of the solution process. The list of these design requirements is often 50 times longer than the list of original requirements.&lt;/li&gt;
&lt;li&gt;There is seldom one best design solution to a software problem.&lt;/li&gt;
&lt;li&gt;Design is a complex, iterative process. The initial design solution will likely be wrong and certainly not optimal.&lt;/li&gt;
&lt;li&gt;Programmers shift from design to coding when the problem is decomposed to a level of “primitives” that the designer has mastered. If the coder is not the same person as the designer, the designer’s primitives are unlikely to match the coder’s primitives, and trouble will result.&lt;/li&gt;
&lt;li&gt;COBOL is a very bad language, but all others (for business data processing) are so much worse.&lt;/li&gt;
&lt;li&gt;Error removal is the most time consuming phase of the life cycle.&lt;/li&gt;
&lt;li&gt;Software that a typical programmer believes to be thoroughly tested and has often had only about 55 to 60 percent of its logic paths executed. Using automated support, such as coverage analyzers, can raise that roughly 85 to 90 percent. It is nearly impossible to test software at the level of 100 percent of its logic paths.&lt;/li&gt;
&lt;li&gt;Even if 100 percent test coverage were possible, that is not a sufficient criterion for testing. Roughly 35 percent of software defects emerge from missing logic paths, and another 40 percent from the execution of a unique combination of logic paths. They will not be caught by 100 percent coverage.&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;It is nearly impossible to do a good job of error removal without tools. Debuggers are commonly used, but others, such as coverage analyzers, are not.&lt;/li&gt;
&lt;li&gt;Test automation rarely is. That is, certain testing processes can and should be automated. But there is a lot of the testing activity that cannot be automated.&lt;/li&gt;
&lt;li&gt;Programmer-created built-in debug code, preferably optionally included in the object code based on compiler parameters, is an important supplement to testing tools.&lt;/li&gt;
&lt;li&gt;Rigorous inspections can remove up to 90 percent of errors from a software product before the first test case is run.&lt;/li&gt;
&lt;li&gt;In spite of the benefits of rigorous inspections, they cannot and should not replace testing.&lt;/li&gt;
&lt;li&gt;Postdelivery reviews(some call them “retrospectives”) are generally acknowledged to be important, both from the point of view of determining customer satisfaction and from the point of process improvement. But most organizations do not do postdelivery reviews.&lt;/li&gt;
&lt;li&gt;Peer reviews are both technical and sociological. Paying attention to one without the other is a recipe for disaster.&lt;/li&gt;
&lt;li&gt;Maintenance typically consumes 40 to 80 percent(average, 60 percent) of software costs. Therefore, it is probably the most important life cycle phase of software.&lt;/li&gt;
&lt;li&gt;Enhancement is responsible for roughly 60 percent of software maintenance costs. Error correction is roughly 17 percent. Therefore, software maintenance is largely about adding new capability to old software, not fixing it.&lt;/li&gt;
&lt;li&gt;Maintenance is a solution, not a problem.&lt;/li&gt;
&lt;li&gt;In examining the tasks of software development versus software maintenance, most of the tasks are the same - except for the additional maintenance task of “understanding the existing product”. This task consumes roughly 30 percent of the total maintenance time and is the dominant maintenance activity. Thus, it is possible to claim that maintenance is a more difficult task than development.&lt;/li&gt;
&lt;li&gt;Better software engineering development leads to more maintenance, not less.&lt;/li&gt;
&lt;li&gt;Quality is a collection of attributes: &lt;em&gt;portability&lt;/em&gt;, &lt;em&gt;reliability&lt;/em&gt;, &lt;em&gt;efficiency&lt;/em&gt;, &lt;em&gt;usability&lt;/em&gt;, &lt;em&gt;testability&lt;/em&gt;, &lt;em&gt;understandability&lt;/em&gt;, and &lt;em&gt;modifiability&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Quality is not user satisfaction, meeting requirements, meeting costs and schedule targets, or reliability.&lt;/li&gt;
&lt;li&gt;There are errors that most programmers tend to make.&lt;/li&gt;
&lt;li&gt;Errors tend to cluster.&lt;/li&gt;
&lt;li&gt;There is no single best approach to software error removal.&lt;/li&gt;
&lt;li&gt;Residual errors will always persist. The goal should be to minimize or eliminate severe errors.&lt;/li&gt;
&lt;li&gt;Efficiency stems more from good design than from good coding.&lt;/li&gt;
&lt;li&gt;High-order language(HOL) code, with appropriate compiler optimizations, can be about 90 percent as efficient as the comparable assembler code. Or even higher, for some complex modern architectures.&lt;/li&gt;
&lt;li&gt;There are tradeoffs between size and time optimization. Often, improving one degrades the other.&lt;/li&gt;
&lt;li&gt;Many software researchers advocate rather than investigate. As a result, some advocated concepts are worth far less than their advocates believe, and there is a shortage of evaluative research to help determine what the value of such concepts really is.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;fallacies&quot;&gt;Fallacies&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;You can’t manage whay you can’t measure.&lt;/li&gt;
&lt;li&gt;You can manage quality into a software product.&lt;/li&gt;
&lt;li&gt;Programming can and should be egoless.&lt;/li&gt;
&lt;li&gt;Tools and techniques: one size fits all.&lt;/li&gt;
&lt;li&gt;Software needs more methodologies.&lt;/li&gt;
&lt;li&gt;To estimate cost and schedule, first estimate lines of code.&lt;/li&gt;
&lt;li&gt;Random test input is a good way to optimize testing&lt;/li&gt;
&lt;li&gt;Given enough eyeballs, all bugs are shallow.&lt;/li&gt;
&lt;li&gt;The way to predict future maintenance costs and to make product replacement decisions is to look at past cost data.&lt;/li&gt;
&lt;li&gt;You teach people how to program by showing them how to write programs.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Reality is the murder of a beautiful theory by a gang of ugly facts.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As reality, software is the murder of a beautiful theory by a gang of ugly facts.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</content>
  </entry>
  <entry xml:base="https://bugra.github.io/">
    <title type="text">Similarity via Jaccard Index</title>
    <id>https://bugra.github.io/posts/2017/2/7/similarity-via-jaccard-index</id>
    <updated>2017-02-07T00:00:00Z</updated>
    <published>2017-02-07T00:00:00Z</published>
    <link href="https://bugra.github.io/posts/2017/2/7/similarity-via-jaccard-index" />
    <author>
      <name>Bugra Akyildiz</name>
    </author>
    <content type="html">&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;
  &lt;title&gt;-&lt;/title&gt;
  &lt;style&gt;
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
    pre &gt; code.sourceCode { white-space: pre; position: relative; }
    pre &gt; code.sourceCode &gt; span { display: inline-block; line-height: 1.25; }
    pre &gt; code.sourceCode &gt; span:empty { height: 1.2em; }
    code.sourceCode &gt; span { color: inherit; text-decoration: inherit; }
    div.sourceCode { margin: 1em 0; }
    pre.sourceCode { margin: 0; }
    @media screen {
    div.sourceCode { overflow: auto; }
    }
    @media print {
    pre &gt; code.sourceCode { white-space: pre-wrap; }
    pre &gt; code.sourceCode &gt; span { text-indent: -5em; padding-left: 5em; }
    }
    pre.numberSource code
      { counter-reset: source-line 0; }
    pre.numberSource code &gt; span
      { position: relative; left: -4em; counter-increment: source-line; }
    pre.numberSource code &gt; span &gt; a:first-child::before
      { content: counter(source-line);
        position: relative; left: -1em; text-align: right; vertical-align: baseline;
        border: none; display: inline-block;
        -webkit-touch-callout: none; -webkit-user-select: none;
        -khtml-user-select: none; -moz-user-select: none;
        -ms-user-select: none; user-select: none;
        padding: 0 4px; width: 4em;
        color: #aaaaaa;
      }
    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
    div.sourceCode
      {   }
    @media screen {
    pre &gt; code.sourceCode &gt; span &gt; a:first-child::before { text-decoration: underline; }
    }
    code span.al { color: #ff0000; font-weight: bold; } /* Alert */
    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
    code span.at { color: #7d9029; } /* Attribute */
    code span.bn { color: #40a070; } /* BaseN */
    code span.bu { } /* BuiltIn */
    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
    code span.ch { color: #4070a0; } /* Char */
    code span.cn { color: #880000; } /* Constant */
    code span.co { color: #60a0b0; font-style: italic; } /* Comment */
    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
    code span.do { color: #ba2121; font-style: italic; } /* Documentation */
    code span.dt { color: #902000; } /* DataType */
    code span.dv { color: #40a070; } /* DecVal */
    code span.er { color: #ff0000; font-weight: bold; } /* Error */
    code span.ex { } /* Extension */
    code span.fl { color: #40a070; } /* Float */
    code span.fu { color: #06287e; } /* Function */
    code span.im { } /* Import */
    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
    code span.kw { color: #007020; font-weight: bold; } /* Keyword */
    code span.op { color: #666666; } /* Operator */
    code span.ot { color: #007020; } /* Other */
    code span.pp { color: #bc7a00; } /* Preprocessor */
    code span.sc { color: #4070a0; } /* SpecialChar */
    code span.ss { color: #bb6688; } /* SpecialString */
    code span.st { color: #4070a0; } /* String */
    code span.va { color: #19177c; } /* Variable */
    code span.vs { color: #4070a0; } /* VerbatimString */
    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
  &lt;/style&gt;
  &lt;!--[if lt IE 9]&gt;
    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;
  &lt;![endif]--&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2017/2/7/industry-similarity-for-jaccard-index.png&quot; title=&quot;Jaccard Index&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Jaccard Index&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;At Axial, we had a taxonomy tree for industries and wanted to know if one particular industry is more similar to another industry. The similarity of some of the industries are straightforward if they share a parent, but this similarity is not quantitative and does not produce a metric on how similar the two industries are.&lt;/p&gt;
&lt;p&gt;In the search page and other parts of the website, it would be useful for us to be able to compare two different industries whether they belong to the same parent node or not. For example, if user chooses an industry in the on boarding process, we should be able to recommend another industry based on the selected industry. This not only makes sure that user would choose consistent industries taxonomies but also exposes the similar industries she may not know. This is something we planned to do, but let’s look at how this feature is put into the production right now.&lt;/p&gt;
&lt;h3 id=&quot;industry-ordering-in-app-search&quot;&gt;Industry Ordering In-App Search&lt;/h3&gt;
&lt;p&gt;In the app-in search page, when user selects a particular industry in the industry facet search, we want to order the industries of the documents(campaigns, projects and companies) based on the selected industry. Since we do not limit the number of industries for projects, the ordering of the industries for the project would become quite handy to compare against the industry facet.&lt;/p&gt;
&lt;h3 id=&quot;similarity-in-general&quot;&gt;Similarity in General&lt;/h3&gt;
&lt;p&gt;For other parts of the website, we could measure the similarity between industries when we want to compare how similar the two documents are in terms of industries they are assigned to or how good the match relationship between campaign and a project. Producing a similarity metric for industries gives a proxy on how similar two documents are.&lt;/p&gt;
&lt;h3 id=&quot;industry-similarity-via-jaccard-index&quot;&gt;Industry Similarity via Jaccard Index&lt;/h3&gt;
&lt;p&gt;In order to do so, we used Jaccard Index to measure similarities between industries based on campaign keywords that are associated to each industry. Let’s review what a Jaccard Index is and then I will explain how it is used to measure similarity between two industries.&lt;/p&gt;
&lt;h3 id=&quot;jaccard-index&quot;&gt;Jaccard Index&lt;/h3&gt;
&lt;p&gt;Jaccard Index is a statistic to compare and measure how similar two different sets to each other. It is a ratio of intersection of two sets over union of them.&lt;/p&gt;
&lt;p&gt;&lt;math display=&quot;block&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mi&gt;B&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;postfix&quot;&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mfrac&gt;&lt;mrow&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mo&gt;∩&lt;/mo&gt;&lt;mi&gt;B&lt;/mi&gt;&lt;/mrow&gt;&lt;mrow&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mo&gt;∪&lt;/mo&gt;&lt;mi&gt;B&lt;/mi&gt;&lt;/mrow&gt;&lt;/mfrac&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt; jaccard(A, B) = \frac{A \cap B}{A \cup B} &lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/p&gt;
&lt;p&gt;If you have representative finite number of elements for a particular observation and you want to compare this observation with another observation, you could count the number of items that are common to both of these two sets. It is a natural fit for comparing posts if you know the representative tags for the posts to measure how similar two articles are in terms of tags.&lt;/p&gt;
&lt;p&gt;Its Python implementation is pretty trivial.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;#cb1-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; jaccard_index(first_set, second_set):&lt;/span&gt;
&lt;span id=&quot;cb1-2&quot;&gt;&lt;a href=&quot;#cb1-2&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;co&quot;&gt;&amp;quot;&amp;quot;&amp;quot; Computes jaccard index of two sets&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-3&quot;&gt;&lt;a href=&quot;#cb1-3&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;        Arguments:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-4&quot;&gt;&lt;a href=&quot;#cb1-4&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;          first_set(set):&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-5&quot;&gt;&lt;a href=&quot;#cb1-5&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;          second_set(set):&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-6&quot;&gt;&lt;a href=&quot;#cb1-6&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;        Returns:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-7&quot;&gt;&lt;a href=&quot;#cb1-7&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;          index(float): Jaccard index between two sets; it is &lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-8&quot;&gt;&lt;a href=&quot;#cb1-8&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;            between 0.0 and 1.0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-9&quot;&gt;&lt;a href=&quot;#cb1-9&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-10&quot;&gt;&lt;a href=&quot;#cb1-10&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;co&quot;&gt;# If both sets are empty, jaccard index is defined to be 1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-11&quot;&gt;&lt;a href=&quot;#cb1-11&quot;&gt;&lt;/a&gt;    index &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;1.0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-12&quot;&gt;&lt;a href=&quot;#cb1-12&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; first_set &lt;span class=&quot;kw&quot;&gt;or&lt;/span&gt; second_set:&lt;/span&gt;
&lt;span id=&quot;cb1-13&quot;&gt;&lt;a href=&quot;#cb1-13&quot;&gt;&lt;/a&gt;    index &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;bu&quot;&gt;float&lt;/span&gt;(&lt;span class=&quot;bu&quot;&gt;len&lt;/span&gt;(first_set.intersection(second_set))) &lt;/span&gt;
&lt;span id=&quot;cb1-14&quot;&gt;&lt;a href=&quot;#cb1-14&quot;&gt;&lt;/a&gt;             &lt;span class=&quot;op&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;len&lt;/span&gt;(first_set.union(second_set)))&lt;/span&gt;
&lt;span id=&quot;cb1-15&quot;&gt;&lt;a href=&quot;#cb1-15&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-16&quot;&gt;&lt;a href=&quot;#cb1-16&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; index&lt;/span&gt;
&lt;span id=&quot;cb1-17&quot;&gt;&lt;a href=&quot;#cb1-17&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-18&quot;&gt;&lt;a href=&quot;#cb1-18&quot;&gt;&lt;/a&gt;first_set &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;set&lt;/span&gt;(&lt;span class=&quot;bu&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&quot;cb1-19&quot;&gt;&lt;a href=&quot;#cb1-19&quot;&gt;&lt;/a&gt;second_set &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;set&lt;/span&gt;(&lt;span class=&quot;bu&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&quot;cb1-20&quot;&gt;&lt;a href=&quot;#cb1-20&quot;&gt;&lt;/a&gt;index &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; jaccard_index(first_set, second_set)&lt;/span&gt;
&lt;span id=&quot;cb1-21&quot;&gt;&lt;a href=&quot;#cb1-21&quot;&gt;&lt;/a&gt;&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(index) &lt;span class=&quot;co&quot;&gt;# 0.25 as 5/20&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;industry-similarity&quot;&gt;Industry Similarity&lt;/h3&gt;
&lt;p&gt;I talked about a little bit on our industry taxonomy earlier; not only we wanted to expose in different ways but also we want to measure how similar they are to each other. The problem is that we did not have a good way to compare two different industries. Since our taxonomy structure is a tree, we could group them by their parent nodes but not necessarily compare and measure how similar they are in a robust and reliable way.&lt;/p&gt;
&lt;p&gt;Instead of coming up a heuristic based approach to measure similarity, we decided to use the user data. We have keywords for campaigns that our members created. When members create a &lt;code&gt;Campaign&lt;/code&gt;, they could enter a set of keywords along with industries that they chose. We decided to use this information to compare and measure a similarity between industries using campaign keywords.&lt;/p&gt;
&lt;p&gt;The idea is simple; if two industries have a lot of common keywords given a campaign a profile, then the chances are they are closely related. As our members choose similar keywords for those industries to represent their campaigns, the likelihood of similarity only increases. By using campaign keywords, we not only reduce the dimensionality of the text(generally the descriptions are much longer than campaign keywords) but also, we do already a feature selection as the campaign keywords should be much more descriptive, dense and rich in information than the descriptions.&lt;/p&gt;
&lt;h3 id=&quot;industry-similarity-by-jaccard-index&quot;&gt;Industry Similarity by Jaccard Index&lt;/h3&gt;
&lt;p&gt;In order to build an industry similarity measure, we first assigned the campaign keywords to each industries. Then, for a given industry, we could compute the jaccard index in a very straightforward manner. But what if we want to compare multiple industries against all of the industries that we have in the database? We could still could use the jaccard index for multiple industry comparison even if it is not formally defined for multiple sets.&lt;/p&gt;
&lt;p&gt;However, one can generalize Jaccard index which is very easy to do since what we do is only intersection and union operations across different sets, we could do this among multiple industries in our examples in the following:&lt;/p&gt;
&lt;p&gt;&lt;math display=&quot;block&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;(&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mi&gt;…&lt;/mi&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/msub&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;postfix&quot;&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mfrac&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;mo&gt;∩&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mi&gt;…&lt;/mi&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;msub&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;/msub&gt;&lt;mo&gt;∩&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;mo&gt;∪&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mi&gt;…&lt;/mi&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mo&gt;∪&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;/mfrac&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;jaccard(A_1, \ldots, A_n) = \frac{A_1 \cap A_2, \ldots, A_{n_1} \cap A_n}{A_1 \cup A_2, \ldots, A_{n-1} \cup A_n} &lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/p&gt;
&lt;p&gt;This is pretty neat. Note that set order does not matter(icing on the cake).&lt;/p&gt;
&lt;h3 id=&quot;what-was-available&quot;&gt;What was available?&lt;/h3&gt;
&lt;p&gt;When we already have the intent of the user(industry facet), it is relatively easy to put that industry in the first place and the remainder industries would follow the first industry.&lt;/p&gt;
&lt;p&gt;When user chooses Aerospace &amp;amp; Defense before industry ordering, we were displaying the industries of the documents in no particular order:&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2017/2/7/aerospace-defense-industry-ordering.png&quot; title=&quot;Before Industry Ordering&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Before Industry Ordering&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;With industry ordering, we now sort the industries by similarity:&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2017/2/7/aerospace-defense-after.png&quot; title=&quot;With Industry Ordering&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;With Industry Ordering&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Before “wine” search in Distillers &amp;amp; Vintners:&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2017/2/7/distillers-vintners-before-industry-ordering.png&quot; title=&quot;Before Wine&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Before Wine&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;After industry ordering is in place:&lt;/p&gt;
&lt;p&gt;As mentioned before, this ordering is easy to extend to multiple industries as well:&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2017/2/7/two-industry-selection.png&quot; title=&quot;Multiple Industries&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Multiple Industries&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/body&gt;
&lt;/html&gt;
</content>
  </entry>
  <entry xml:base="https://bugra.github.io/">
    <title type="text">Similarity in the Wild</title>
    <id>https://bugra.github.io/posts/2017/2/19/similarity-in-wild</id>
    <updated>2017-02-19T00:00:00Z</updated>
    <published>2017-02-19T00:00:00Z</published>
    <link href="https://bugra.github.io/posts/2017/2/19/similarity-in-wild" />
    <author>
      <name>Bugra Akyildiz</name>
    </author>
    <content type="html">&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;
  &lt;title&gt;-&lt;/title&gt;
  &lt;style&gt;
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
  &lt;/style&gt;
  &lt;!--[if lt IE 9]&gt;
    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;
  &lt;![endif]--&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2017/2/19/similarity-matrix.png&quot; title=&quot;Similarity Matrix&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Similarity Matrix&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;This post has been published in Axial’s blog post where I used to work in search engine and recommendations. However, the original post has been removed and now I am republishing as I wrote the original post.&lt;/p&gt;
&lt;p&gt;Finding similarity across observations is one of the most common tasks/projects something I regulary am tasked for. Collaborative Filtering purely depends on finding similar items(videos for Netflix, products for Amazon) for users. If you are doing a classification task with KNN(K Nearest Neighbor), you are classifying the new observations purely on the distance that you have in the training set. Most of the instance based learning algorithms in one way or another is built on the similarity distances of observations. Clustering algorithms (k-means, manifold learning) depends on the distance between observations. It is very crucial to get the instance representation right as well as to compute the distances between those feature representation to be able to compute the similarity between two observations right.&lt;/p&gt;
&lt;p&gt;This is more of an art than an exact science as the feature representaiton as well as the distance metric is highly dependent on the domain and the problem. Also, it depends on what you want to do after estimating similarity between observations. For example, if you are clustering a number of observations, you would be more flexible around errors and differences in computing between observations where if you want to classify the observations into two different classes, you may want to choose another approach.&lt;/p&gt;
&lt;h3 id=&quot;similarity&quot;&gt;Similarity&lt;/h3&gt;
&lt;p&gt;Merriam Webster defines similarity as following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;a quality that makes one person or thing like another&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So we want to find items that are similar to each other. But we need to first answer what an item is (Document representation) and how we will measure an item with other items(Distance Metric).&lt;/p&gt;
&lt;p&gt;In order to measure the similarity between two observations, all of the observations should be defined in the same way(using a feature extraction method) to build a feature vector and a distance function which measures the distance between these feature vectors.&lt;/p&gt;
&lt;h3 id=&quot;document-representation-or-feature-extraction&quot;&gt;Document Representation or Feature Extraction&lt;/h3&gt;
&lt;p&gt;We have three different types in our observations(documents); tp, opp and companies. ‘tp’ stands for transaction profiles, ‘opp’ stands for opportunity profiles and ‘company’ stands for company(surprise!).&lt;/p&gt;
&lt;p&gt;We are using a modified version of Topic-Sensitive Page-Rank to represent our documents regardless of their types. Not considering the types of the documents allow us to have same representation vectors that we could compare the documents regardless of their types.&lt;/p&gt;
&lt;p&gt;Recently, we introduced Company Introduction feature for the tp owners to recommend companies that are registered to Axial. In order to do so, we need to find “similar companies” that are close to a given tp id. We have also boolean filters that we could use(we are filtering based on company type and industries in future), but after filtering, it pretty much depends on how similar a tp and a company.&lt;/p&gt;
&lt;h3 id=&quot;distance-metric&quot;&gt;Distance Metric&lt;/h3&gt;
&lt;p&gt;If feature extraction is an important step in any part of machine learning, the distance metric would be the second one. You could have the best feature vectors in the world, but if the distance metric you choose does not make a lot of sense for your feature set or the dimensions in the feature vectors, then the similarity would not make much sense.&lt;/p&gt;
&lt;p&gt;For probability distributions, there are many ways to measure the distance(or similarity); $ l_p $ distances ($ l_1 $, $ l_2 $, Chebyshev), cosine, correlation, span-norm, Bhattacharyya, Hellinger and Jensen Shannon Divergence. Based on some experimentation, we decided to use Jensen Shannon Divergence(JSD) to measure the distance between documents.&lt;/p&gt;
&lt;p&gt;Let’s talk about a little what JSD actually is.&lt;/p&gt;
&lt;h3 id=&quot;kullback-leibler-divergence&quot;&gt;Kullback-Leibler Divergence&lt;/h3&gt;
&lt;p&gt;Jensen Shannon Divergence is nothing but an average of two KL Divergence of two probability distributions with an average of the probability distributions. Its formula is in the following:&lt;/p&gt;
&lt;p&gt;&lt;math display=&quot;block&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;K&lt;/mi&gt;&lt;mi&gt;L&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;|&lt;/mo&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;|&lt;/mo&gt;&lt;mi&gt;Y&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;postfix&quot;&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;munder&gt;&lt;mo&gt;∑&lt;/mo&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/munder&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;postfix&quot;&gt;)&lt;/mo&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mfrac&gt;&lt;mrow&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;postfix&quot;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;mrow&gt;&lt;mi&gt;Y&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;postfix&quot;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;/mfrac&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt; KL(X || Y) = \displaystyle \sum_i X(i) ln \frac{X(i)}{Y(i)}  &lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/p&gt;
&lt;p&gt;This is a nice way to measure the difference between a probability distribution comparing to Y which is a reference distribution. One way to reason about this distance metric is to assume two probability distributions are exactly the same. Then, &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mfrac&gt;&lt;mrow&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;postfix&quot;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;mrow&gt;&lt;mi&gt;Y&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;postfix&quot;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;/mfrac&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;ln \frac{X(i)}{Y(i)}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; would be zero. They are exactly same, so the distance is 0. Why &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;ln&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;, you may ask and that is related to information theory. KL Divergence is also called relative entropy, so one could think the KL divergence as how much information is gained from X assuming that Y is known. If they are same, information gain is zero.&lt;/p&gt;
&lt;h3 id=&quot;jensen-shannon-divergence&quot;&gt;Jensen-Shannon Divergence&lt;/h3&gt;
&lt;p&gt;KL Divergence is very nice in terms of what it measures, but it is not a metric that we could depend on. Why is that? It is hidden inside its asymmetric nature. $ KL(X || Y) KL(Y || X) $ and that is a big problem as we cannot create a proper measure of between two observations without considering which is the reference and which one is the one that we measure the distance between the reference vector. In order to prevent this issue, there is a Symmetrised version(well sort of) which just sums up two different KL divergence between each other. $ KL(X || Y) + KL(Y || X) $ in order to reach a version of KL Divergence(which is symmetric), but we have another way to measure the distance as well, which is most probably obvious at this point.&lt;/p&gt;
&lt;p&gt;Instead of looking at the distance between probability distributions to each other, what if we measure an average of them with every single of the probability distribution in order to have a symmetric distance metric.&lt;/p&gt;
&lt;p&gt;&lt;math display=&quot;block&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;J&lt;/mi&gt;&lt;mi&gt;S&lt;/mi&gt;&lt;mi&gt;D&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;|&lt;/mo&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;|&lt;/mo&gt;&lt;mi&gt;Y&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;postfix&quot;&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mfrac&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/mfrac&gt;&lt;mi&gt;K&lt;/mi&gt;&lt;mi&gt;L&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;|&lt;/mo&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;|&lt;/mo&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;postfix&quot;&gt;)&lt;/mo&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mfrac&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/mfrac&gt;&lt;mi&gt;K&lt;/mi&gt;&lt;mi&gt;L&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;Q&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;|&lt;/mo&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;|&lt;/mo&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;postfix&quot;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt; JSD(X || Y) = \frac{1}{2} KL(X || A) + \frac{1}{2} KL(Q || A) &lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/p&gt;
&lt;p&gt;where &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;A&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;:&lt;/p&gt;
&lt;p&gt;&lt;math display=&quot;block&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mfrac&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/mfrac&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mi&gt;Y&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;postfix&quot;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt; A = \frac{1}{2} (X+Y) &lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/p&gt;
&lt;p&gt;and it does not matter the order anymore:&lt;/p&gt;
&lt;p&gt;&lt;math display=&quot;block&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;J&lt;/mi&gt;&lt;mi&gt;S&lt;/mi&gt;&lt;mi&gt;D&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;|&lt;/mo&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;|&lt;/mo&gt;&lt;mi&gt;Y&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;postfix&quot;&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;J&lt;/mi&gt;&lt;mi&gt;S&lt;/mi&gt;&lt;mi&gt;D&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;Y&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;|&lt;/mo&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;|&lt;/mo&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;postfix&quot;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt; JSD(X || Y) = JSD(Y || X) &lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/p&gt;
&lt;h3 id=&quot;implementation&quot;&gt;Implementation&lt;/h3&gt;
&lt;p&gt;For a single TP, we first filter out the ones that do not obey the “criteria”(boolean filtering) and then compute the JSD Divergence of a TP for the target documents. The companies that are closest to the TP are our candidates that we should introduce them to the TP owner.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</content>
  </entry>
  <entry xml:base="https://bugra.github.io/">
    <title type="text">Topic Modeling for Keyword Extraction</title>
    <id>https://bugra.github.io/posts/2017/2/5/topic-modeling-for-keyword-extraction</id>
    <updated>2017-02-05T00:00:00Z</updated>
    <published>2017-02-05T00:00:00Z</published>
    <link href="https://bugra.github.io/posts/2017/2/5/topic-modeling-for-keyword-extraction" />
    <author>
      <name>Bugra Akyildiz</name>
    </author>
    <content type="html">&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;
  &lt;title&gt;-&lt;/title&gt;
  &lt;style&gt;
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
  &lt;/style&gt;
  &lt;!--[if lt IE 9]&gt;
    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;
  &lt;![endif]--&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2017/2/5/blei_lda_illustration.png&quot; title=&quot;LDA Illustration&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;LDA Illustration&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;This post was originally published at Axial’s blog, but the blog’s domain has been expired so I wanted to revive it as I wrote it originally.&lt;/p&gt;
&lt;p&gt;I added couple of sections to the blog post since then.&lt;/p&gt;
&lt;h3 id=&quot;taxonomy&quot;&gt;Taxonomy&lt;/h3&gt;
&lt;p&gt;Who is not frustrated on taxonomy more? Is it the user what does not know anything about the taxonomy and classification schemas in the marketplace or the people who try to classify and organize the products into various categories based on some &lt;em&gt;rule&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;Or is it the merchant who tries to sell the product does not know anything about the intermediary distribution’s classification rules?&lt;/p&gt;
&lt;h3 id=&quot;why-do-we-need-the-classification-anyways&quot;&gt;Why do we need the classification anyways?&lt;/h3&gt;
&lt;p&gt;The classification is needed because we want to group similar products to make the browsing easy, but what if the classification or the taxonomy does not make a lot of sense.&lt;/p&gt;
&lt;h3 id=&quot;frustration&quot;&gt;Frustration&lt;/h3&gt;
&lt;p&gt;We were frustrated about visibility of our taxonomy for industries to the user. If one of our member wanted to do a search in Axial for a particular field, they needed to know the exact taxonomy name that we use for that field. For example, if one wants to search wood and wood products, they need to know that those would fall in our “Forest Products” taxonomy, which is not an obvious thing when a user wants to do a search in our website.&lt;/p&gt;
&lt;p&gt;Not only this limits the query capabilities of the user but also it degrades our search results as we do not know which industry they are interested in from their search query.&lt;/p&gt;
&lt;p&gt;In order to tackle this problem and get the following benefits (listed below), we use topic modeling for a number of documents to extract topics and mine phrases to provide a better typeahead functionality to the user.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How do you extract phrases and keywords from a large number of documents?&lt;/li&gt;
&lt;li&gt;How do you find recurring themes and topics from a corpus without using any metadata information(labels, annotation)?&lt;/li&gt;
&lt;li&gt;How do you cluster a number of documents efficiently and make sure that clusters would be coherent themes?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Topic modeling is a method which is an unsupervised learning and clustering method which enables us to do things listed above.&lt;/p&gt;
&lt;p&gt;If you want to deconstruct a document based on various themes it has, as shown above in the image, it is a great tool to explore topics and themes. In the image, every color corresponds to a particular theme and all of the themes have various words. But what does a topic look like?&lt;/p&gt;
&lt;h3 id=&quot;topics-as-word-distributions&quot;&gt;Topics as Word Distributions&lt;/h3&gt;
&lt;p&gt;When you see the following words, what do you think:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wood pellet pellets energy biomass production tons renewable plant million 
fuel forest management heating development carbon facilities&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;if you think forest, wood or paper, you would be right. These are the subset of words that are extracted from Forest Products industry in opportunities that our members created.&lt;/p&gt;
&lt;h3 id=&quot;industry-aliasing&quot;&gt;Industry Aliasing&lt;/h3&gt;
&lt;p&gt;Previously, if our members wanted to search a particular industry, they needed to know the exact name of the industry in order to see the typeahead match in the search bar. We do matching by Named Entity Recognition in Query (NERQ) but it is limited to the exact keyword match in industries.&lt;/p&gt;
&lt;p&gt;For example, if they want to do a search related to the “wine” industry, they need to know our taxonomy which corresponds to that industry which is “Distillers and Vintners”. Or, if they want to do a general search related to “shoes”, they need to know that we have a “Footwear” industry.&lt;/p&gt;
&lt;p&gt;In order to remedy this problem, we expanded our industry matching to a larger number of words so that we could match “related” and “relevant” keywords to our taxonomies. When a user types in “wine”, we are able to match that keyword to our related taxonomy of “Distillers and Vintners”.&lt;/p&gt;
&lt;h3 id=&quot;topic-modeling-for-keyword-extraction&quot;&gt;Topic Modeling for Keyword Extraction&lt;/h3&gt;
&lt;p&gt;We used topic modeling for keyword and phrase extraction using user generated documents that are classified by industry. This provides three main benefits. First, all of the keywords are data-driven and human generated. Second, since every document is associated with various industries, we do not need to associate the documents one by one to each topic, we could mine the keywords and phrases per industry. Last but not least, we could use the industry information as input to our topic sensitive ranking algorithm to improve on search precision.&lt;/p&gt;
&lt;p&gt;We created a set of keywords/phrases (around 4000) to expand the matching between what a user types and which industry it will match. Since most of the keywords and phrases are descriptive of the industry itself, they would be intuitive to a user.&lt;/p&gt;
&lt;h3 id=&quot;topic-model&quot;&gt;Topic Model&lt;/h3&gt;
&lt;p&gt;The grouping of relevant words is highly suggestive of an abstract theme which is called a topic. Based on the assumption that words that are in the same topic are more likely to occur together, it is possible to attribute phrases or keywords to a particular topic. This allows us to alias a particular topic with a number of phrases and words.&lt;/p&gt;
&lt;h3 id=&quot;not-all-words-are-created-equal&quot;&gt;Not all words are created equal&lt;/h3&gt;
&lt;p&gt;As we are more interested in the more thematic and somehow specific topics, we are not necessarily interested in words that do not contribute a lot to various topics. Usual suspects are the articles (a, an, the) pronouns (I, you, she, he, we, …), prepositions(in, under, of, ..) and also common adverbs and more often than not verbs.&lt;/p&gt;
&lt;p&gt;Oh, also the adjectives:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When you catch an adjective, kill it. No, I don’t mean utterly, but kill most of them–then the rest will be valuable. They weaken when they are close together. They give strength when they are far apart. — Mark Twain&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Not only they do not contribute to the topics/themes at all, but also they disrupt the word distributions in each topic. Due to these reasons, common words should be removed prior to topic modeling. This is the first rule of thumb. We also removed rare word occurrences, smaller than 3 in the corpus, with the understanding that rare words do not materially contribute to topic distinction. This provides two additional benefits; first we do not have to deal with a large corpus as word distributions in corpora usually have long tails, second we do not unnecessarily do computations on the words classified as unimportant.&lt;/p&gt;
&lt;h3 id=&quot;unsupervised-nature-of-topic-models&quot;&gt;Unsupervised Nature of Topic Models&lt;/h3&gt;
&lt;p&gt;The topic models are unsupervised, i.e. they do not require any prior information on the documents of the corpus, e.g. descriptive labels or other classifications. It infers various topics and themes operating purely on the documents. It is a very powerful and useful tool for quickly exploring various themes in a large corpus. For example, if you are searching for a number of documents that are about one particular theme, e.g. “internet of things”, you want to get the documents that are about that theme (by increasing the recall) rather than documents including the exact phrase of “internet of things”.&lt;/p&gt;
&lt;h3 id=&quot;industry-aliasing-1&quot;&gt;Industry Aliasing&lt;/h3&gt;
&lt;p&gt;By doing so, we created a set of keywords/phrases(around 4000), compare with our industries(around ~200) to map and when you type “wine” in the search bar, you would get “Distillers and Vintners” industry.(yeah, it is hard to guess)&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2017/2/5/industry-aliasing.png&quot; title=&quot;Industry Aliasing&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Industry Aliasing&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Or, when you type “search engine” in search(so meta):&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2017/2/5/data-science.png&quot; title=&quot;Search Engine&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Search Engine&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2017/2/5/data-science.png&quot; title=&quot;Search Engine&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Search Engine&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Some more:&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2017/2/5/type-ahead-version-1.gif&quot; title=&quot;Search Engine&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Search Engine&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;adjectives-are-not-so-bad&quot;&gt;Adjectives are not so bad&lt;/h3&gt;
&lt;p&gt;Remember the adjectives, how useless they are for topic modeling. They could come handy in the conversations:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A man’s character may be learned from the adjectives which he habitually uses in conversation. — Mark Twain&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/body&gt;
&lt;/html&gt;
</content>
  </entry>
  <entry xml:base="https://bugra.github.io/">
    <title type="text">Reads Are More Valuable Than Writes</title>
    <id>https://bugra.github.io/posts/2019/8/16/reads-are-more-valuable-than-writes</id>
    <updated>2019-08-16T00:00:00Z</updated>
    <published>2019-08-16T00:00:00Z</published>
    <link href="https://bugra.github.io/posts/2019/8/16/reads-are-more-valuable-than-writes" />
    <author>
      <name>Bugra Akyildiz</name>
    </author>
    <content type="html">&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;
  &lt;title&gt;-&lt;/title&gt;
  &lt;style&gt;
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
  &lt;/style&gt;
  &lt;!--[if lt IE 9]&gt;
    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;
  &lt;![endif]--&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;/body&gt;
&lt;/html&gt;
</content>
  </entry>
  <entry xml:base="https://bugra.github.io/">
    <title type="text">Product Recommendations</title>
    <id>https://bugra.github.io/posts/2019/8/15/product-recommendations</id>
    <updated>2019-08-15T00:00:00Z</updated>
    <published>2019-08-15T00:00:00Z</published>
    <link href="https://bugra.github.io/posts/2019/8/15/product-recommendations" />
    <author>
      <name>Bugra Akyildiz</name>
    </author>
    <content type="html">&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;
  &lt;title&gt;-&lt;/title&gt;
  &lt;style&gt;
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
    pre &gt; code.sourceCode { white-space: pre; position: relative; }
    pre &gt; code.sourceCode &gt; span { display: inline-block; line-height: 1.25; }
    pre &gt; code.sourceCode &gt; span:empty { height: 1.2em; }
    code.sourceCode &gt; span { color: inherit; text-decoration: inherit; }
    div.sourceCode { margin: 1em 0; }
    pre.sourceCode { margin: 0; }
    @media screen {
    div.sourceCode { overflow: auto; }
    }
    @media print {
    pre &gt; code.sourceCode { white-space: pre-wrap; }
    pre &gt; code.sourceCode &gt; span { text-indent: -5em; padding-left: 5em; }
    }
    pre.numberSource code
      { counter-reset: source-line 0; }
    pre.numberSource code &gt; span
      { position: relative; left: -4em; counter-increment: source-line; }
    pre.numberSource code &gt; span &gt; a:first-child::before
      { content: counter(source-line);
        position: relative; left: -1em; text-align: right; vertical-align: baseline;
        border: none; display: inline-block;
        -webkit-touch-callout: none; -webkit-user-select: none;
        -khtml-user-select: none; -moz-user-select: none;
        -ms-user-select: none; user-select: none;
        padding: 0 4px; width: 4em;
        color: #aaaaaa;
      }
    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
    div.sourceCode
      {   }
    @media screen {
    pre &gt; code.sourceCode &gt; span &gt; a:first-child::before { text-decoration: underline; }
    }
    code span.al { color: #ff0000; font-weight: bold; } /* Alert */
    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
    code span.at { color: #7d9029; } /* Attribute */
    code span.bn { color: #40a070; } /* BaseN */
    code span.bu { } /* BuiltIn */
    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
    code span.ch { color: #4070a0; } /* Char */
    code span.cn { color: #880000; } /* Constant */
    code span.co { color: #60a0b0; font-style: italic; } /* Comment */
    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
    code span.do { color: #ba2121; font-style: italic; } /* Documentation */
    code span.dt { color: #902000; } /* DataType */
    code span.dv { color: #40a070; } /* DecVal */
    code span.er { color: #ff0000; font-weight: bold; } /* Error */
    code span.ex { } /* Extension */
    code span.fl { color: #40a070; } /* Float */
    code span.fu { color: #06287e; } /* Function */
    code span.im { } /* Import */
    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
    code span.kw { color: #007020; font-weight: bold; } /* Keyword */
    code span.op { color: #666666; } /* Operator */
    code span.ot { color: #007020; } /* Other */
    code span.pp { color: #bc7a00; } /* Preprocessor */
    code span.sc { color: #4070a0; } /* SpecialChar */
    code span.ss { color: #bb6688; } /* SpecialString */
    code span.st { color: #4070a0; } /* String */
    code span.va { color: #19177c; } /* Variable */
    code span.vs { color: #4070a0; } /* VerbatimString */
    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
  &lt;/style&gt;
  &lt;!--[if lt IE 9]&gt;
    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;
  &lt;![endif]--&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;As Jet.com focuses more and more on the grocery category, we start facing certain challenges around inventory availability. To overcome this challenge, we came up with a new module which would provide substitutable products on the item page. This post explains the motivation (why), design, implementation (how), and the product (what).&lt;/p&gt;
&lt;h3 id=&quot;why-is-this-important&quot;&gt;Why is this important?&lt;/h3&gt;
&lt;p&gt;We want to provide customers with the most similar items so they can purchase a suitable substitute when the original product they’re looking for is unavailable. Previously, the OOS(out of stock) item page experience did not include any substitutable products on the item page in case the customer came to the item page through the reorder and/or search pages.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;design-decisions&quot;&gt;Design Decisions&lt;/h3&gt;
&lt;p&gt;We want to make a couple of assumptions and design decisions prior to this project with the goal of solving our substitute problem. This means that we want to recommend/suggest products that are substitutable to the anchor product. This also means that we should focus on our catalog and recommended products that are available from the catalog. We want to provide recommendations as long as they are somehow related. If we do not have any blackberries in the website, then the user can still see blueberries, raspberries or strawberries. This means that we are not going to restrict ourselves for a given product type but provide a wide selection of products even if all of the products are not directly substitutable for the anchor product. We want to generate recommendations for all of the products in our catalog regardless of their availability status. We are not going to constrain ourselves over inventory availability of the product. This only makes sense as we are trying to tackle and solve OOS item recommendations.  We want to provide product similarity based on product data rather than behavioral data. At least initially. This means that we depended on the product data and not use behavioral data. There are multiple reasons why we did this:&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;Behavioral data does not translate into substitutability of the product.&lt;/li&gt;
&lt;li&gt;Behavioral data does not necessarily tell anything about the products themselves, but rather the usage of the product.&lt;/li&gt;
&lt;li&gt;Behavioral data is impacted by seasonality, pricing, discounts, brands, zip codes, and intent of the users.&lt;/li&gt;
&lt;li&gt;Behavioral data is heavily biased towards products that have been on the site for awhile and have a high sales rank. &lt;/li&gt;
&lt;li&gt;Behavioral data may be biased toward certain brands.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;How do we use the product to be able to generate recommendations? Product Data We have the following data for a given product: &lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre class=&quot;sourceCode js&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;#cb1-1&quot;&gt;&lt;/a&gt;{&lt;/span&gt;
&lt;span id=&quot;cb1-2&quot;&gt;&lt;a href=&quot;#cb1-2&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;st&quot;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;9fb0c9b4a7a84c0ca90d5e38a0b4352d&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-3&quot;&gt;&lt;a href=&quot;#cb1-3&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;st&quot;&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Bananas, Minimum 5 Ct&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-4&quot;&gt;&lt;a href=&quot;#cb1-4&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;st&quot;&gt;&amp;quot;description&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Your order will contain a minimum of 5 bananas. Sweet with a creamy texture, bananas are convenient for snacking, slicing into yogurt or ice cream, and using in many recipes. Bananas are an excellent source of vitamin B6, potassium and fiber.&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-5&quot;&gt;&lt;a href=&quot;#cb1-5&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;st&quot;&gt;&amp;quot;bullets&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [&lt;/span&gt;
&lt;span id=&quot;cb1-6&quot;&gt;&lt;a href=&quot;#cb1-6&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;st&quot;&gt;&amp;quot;Storing: Refrigerating or freezing&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-7&quot;&gt;&lt;a href=&quot;#cb1-7&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;st&quot;&gt;&amp;quot;Ripen: Placing near other ripe fruit in a bowl&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-8&quot;&gt;&lt;a href=&quot;#cb1-8&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;st&quot;&gt;&amp;quot;Extend: Pulling the banana apart from the bunch&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-9&quot;&gt;&lt;a href=&quot;#cb1-9&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;st&quot;&gt;&amp;quot;Enjoy: Bananas can be enjoyed as a great healthy on-the-go snack, as part of a meal or desert, in a milkshake, with cereal or in a banana split&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-10&quot;&gt;&lt;a href=&quot;#cb1-10&quot;&gt;&lt;/a&gt;  ]&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-11&quot;&gt;&lt;a href=&quot;#cb1-11&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;st&quot;&gt;&amp;quot;product&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [&lt;/span&gt;
&lt;span id=&quot;cb1-12&quot;&gt;&lt;a href=&quot;#cb1-12&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;st&quot;&gt;&amp;quot;banana&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-13&quot;&gt;&lt;a href=&quot;#cb1-13&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;st&quot;&gt;&amp;quot;fruit&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-14&quot;&gt;&lt;a href=&quot;#cb1-14&quot;&gt;&lt;/a&gt;  ]&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-15&quot;&gt;&lt;a href=&quot;#cb1-15&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;st&quot;&gt;&amp;quot;brand&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Fresh Produce&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-16&quot;&gt;&lt;a href=&quot;#cb1-16&quot;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The values of the fields may change, but the keys for most of the part exist in most of the products in catalog. However, we want to represent this textual information in such a way that we can compute similarity between different products. This brings us to our next topic - the representation of the products.&lt;/p&gt;
&lt;h2 id=&quot;representation&quot;&gt;Representation&lt;/h2&gt;
&lt;p&gt;In order to compute a similarity measure across all of the products, we need to come up with a representation model for the product data. In this section, we are going to give background on text representation and explain the chosen method to represent the product.&lt;/p&gt;
&lt;h3 id=&quot;vector-space-model&quot;&gt;Vector Space Model&lt;/h3&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2019/8/15/vector-space-model.png&quot; title=&quot;Bag of Words Representation&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Vector Space Model&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Vector Space Model is the main model of representation of documents in a vector space. This allows us to compute similarity measure between documents. Implementations such as Bag of Words(BoW) and TF-IDF builds on top of vector space model idea and try to come up with ways of representing the documents in a vector space. &lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2019/8/15/tf-idf.png&quot; title=&quot;TFIDF Representation&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;TFIDF Representation&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Both of these methods try to solve sentence representation problem as the words are represented as either integer (term frequency in sentence, BoW) and floats (term frequency multiplies with inverse document frequency, TF-IDF) Advantages of these approaches are: They are not computationally expensive We do not need a large corpus to represent the vector models&lt;/p&gt;
&lt;p&gt;Disadvantages include: It produces sparse vectors over a large corpus It can only represent the words as counts or its existence vs non-existence It does not know the meaning of words. Negation is not represented very well. For example: “He does not have a good sense humor.” vs. “He has a good sense of humor.” These sentences will have a similar bag of word representation even if they are negating each other. They are not aware of word order within a sentence.&lt;/p&gt;
&lt;h2 id=&quot;word2vec&quot;&gt;Word2Vec&lt;/h2&gt;
&lt;p&gt;The motivation behind word representation is that this is a very fundamental task for a number of natural language processing tasks. An efficient/relevant word representation independent from the task and context of the problem will be useful to solve the original NLP problem in an easier fashion. Word2Vec is another method that tries to solve the word representation problem. It is similar to TF-IDF and BOW, but with a significant difference - it actually tries to learn embedding for each individual word rather than the sentence representation. This paper and its follow-up paper show how to train large word2vec model over a corpus to get a distributed representation over words in the corpus. The original paper was a breakthrough in terms of the novelty of the word representation as well as what the embeddings can capture in terms of semantically. For certain cities, it captured the relation of the city being capital. For certain attributes, it captured the gender of it.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2019/8/15/keras-shallow-nn.png&quot; title=&quot;Keras Based Shallow Neural Network Implementation&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Keras Based Word2Vec Implementation&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;It is very easy to implement a shallow neural network in Tensorflow using Keras interface for word2vec purposes. Here, we are creating a two-layer neural network with an embedding layer, which has the size of vocabulary and embedding_size. After the training, this layer is going to be a lookup table on top of the words to be able to get the embedding per word.&lt;/p&gt;
&lt;h3 id=&quot;advantages-of-word2vec&quot;&gt;Advantages of word2vec&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The vector representation is limited to a certain embedding size. This allows us to represent the documents/products much more efficiently.&lt;/li&gt;
&lt;li&gt;The words themselves have “meaning” and a vector representation. They are not a single number based on occurrence and independently treated based on the context, but rather words themselves can carry some meaning and can be compared with other words.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;disadvantages-of-word2vec&quot;&gt;Disadvantages of word2vec&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;We still have problems with words that are out of the vocabulary. If the word is not in the training dataset, we would not be able to generate an embedding for the word. For this shortcoming, we used an unknown character to use an embedding that represents those words.&lt;/li&gt;
&lt;li&gt;Since it is not character level but word level, it cannot learn different forms of the words even if they appear in the training dataset.&lt;/li&gt;
&lt;li&gt;Misspelled words are treated as unique words in the corpora. &lt;/li&gt;
&lt;li&gt;Rare words’ embeddings are not generally very useful in order to represent the words themselves. &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;training&quot;&gt;Training&lt;/h3&gt;
&lt;p&gt;We took a trained model on Wikipedia corpus and retrained it on our catalog where we used the titles, bullets and descriptions as inputs. This allowed us to use a baseline model to have coverage on the words that appear in a large corpus and retrain on our catalog so that we can tailor the embeddings for our catalog. We found out that in the evaluation of the model, the CBoW (Continuous Bag of Words) approach in the optimization produced slightly better results than the skip-gram in our evaluation set. &lt;/p&gt;
&lt;h3 id=&quot;product2vec&quot;&gt;Product2Vec&lt;/h3&gt;
&lt;p&gt;We ultimately want to represent the product into an embedding. For each word, we use tf-idf weighted embedding representation as in the following:&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2019/8/15/embedding-computation.png&quot; title=&quot;Embedding Computation&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;TFIDF Weighted Embedding Computation&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;This type of representation gives more weights on the words that may not appear in the corpus as much and gives boost for brand names for a given category as we are computing TFIDF per category.  We also tried averaging all of the word representation equally weighted as in the following:&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2019/8/15/mean-embedding-computation.png&quot; title=&quot;Mean Weighted Embedding Computation&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Mean Weighted Embedding Computation&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;However, averaging without considering tf-idf resulted in lower classification accuracy. Therefore, we used tfidf weigted vector embedding for a given product per different fields of the product data.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2019/8/15/product-data-embedding-generation.png&quot; title=&quot;Product Data Embedding Generation&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Product Data Embedding Generation&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Overall, the embedding generation is outlined above. We learn w1, w2, w3, w4 by a hyper-parameter optimization through cross-validation. One-hot encoding brand, product type and boosting can be considered as a rerank step where if both of the features are matching, they get prioritized both over and across brand and product type. Price-based boosting is only enabled if the anchor product and candidates for recommendations differ more than 20% and are in certain categories (like electronics, fashion).&lt;/p&gt;
&lt;h3 id=&quot;indexing-architecture&quot;&gt;Indexing Architecture &lt;/h3&gt;
&lt;p&gt;After explaining how we generate embeddings, indexing architecture becomes quite simplified. We use FAISS to store embeddings and compute similarity between different product embeddings. &lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2019/8/15/indexing-architecture.png&quot; title=&quot;Indexing Architecture&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Indexing Architecture&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Since our candidates for recommendations are limited to category, we shard FAISS by category to make the indexer as well as the computation of similarity across embeddings.  In the recommendation generation, since we know the category of the product, we are able to hit sharded FAISS with ease for a given product.  After we get all of the candidates for a given category, we search the product in the FAISS category and generate recommendations based on the closest distance. After that, we store these recommendations in DocDB keyed by the anchor product.  In the API side, we lookup based on the anchor product and provide the recommendations to front end.&lt;/p&gt;
&lt;h3 id=&quot;what-does-it-look-like&quot;&gt;What does it look like? &lt;/h3&gt;
&lt;p&gt;I would be remiss to not show what it looks like on the website. This module provides all of the recommendations under the title of Consider These Other Options.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2019/8/15/blackberries.png&quot; title=&quot;Blackberries&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Blackberries Recommendations&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;For products like Blackberries, we have a small number of products (2) that we sell in the website. However, this does not prevent us from providing the customer with organic blackberries, then raspberries and blueberries. Note that the brand boosting becomes really good when brand focuses on a certain category.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2019/8/15/not-yet-ripe-avocados.png&quot; title=&quot;Not Yet Ripe Avocados&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Not Yet Ripe Avocados&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;After we provide two avocados, then provide various other fruits.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2019/8/15/baby-bananas.png&quot; title=&quot;Baby Bananas&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Baby Bananas&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;This example is great as we are sending the correct product types in the first two positions and because of word2vec, plantain and bananas are close to each other and we are able to provide plantain as the third recommendation in the list. There are other good examples in the following: &lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2019/8/15/birds-eye-classic-mixed-vegetables.png&quot; title=&quot;Birds Eye Classic Mixed Vegetables&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Birds Eye Classic Mixed Vegetables&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2019/8/15/hand-soap.png&quot; title=&quot;Hands Soap&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Hands Soap&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2019/8/15/jumbo-yellow-onions.png&quot; title=&quot;Jumbo Yellow Onions&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Jumbo Yellow Onions&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2019/8/15/organic-mushrooms.png&quot; title=&quot;Organic Mushrooms&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Organic Maitake Mushrooms&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2019/8/15/organic-mushrooms.png&quot; title=&quot;Organic Mushrooms&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Organic Maitake Mushrooms&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2019/8/15/chicken-breasts.png&quot; title=&quot;Perdue Boneless Chicken Breasts&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Perdue Boneless Chicken Breasts&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2019/8/15/brussel-sprouts.png&quot; title=&quot;Urban Roots Brussel Sprouts&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Urban Roots Brussel Sprouts&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;moving-forward&quot;&gt;Moving Forward&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Elmo and BERT are two new vector models on top of the word which can incorporate contextual information around the words so the vectors of the words can be different based on the place that they appear.&lt;/li&gt;
&lt;li&gt;The Word2Vec model we used was a word-based model, and Elmo is based on character level. Because of this, it can handle out-of-vocabulary words very well.&lt;/li&gt;
&lt;li&gt;Poincare Embeddings can learn much lower dimensional embeddings by learning different types of relationships.&lt;/li&gt;
&lt;li&gt;We want to learn the weights on our catalog in a much faster fashion.&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;
</content>
  </entry>
  <entry xml:base="https://bugra.github.io/">
    <title type="text">Ways of Working</title>
    <id>https://bugra.github.io/posts/2020/4/26/ways-of-working</id>
    <updated>2020-04-26T00:00:00Z</updated>
    <published>2020-04-26T00:00:00Z</published>
    <link href="https://bugra.github.io/posts/2020/4/26/ways-of-working" />
    <author>
      <name>Bugra Akyildiz</name>
    </author>
    <content type="html">&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;
  &lt;title&gt;-&lt;/title&gt;
  &lt;style&gt;
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
  &lt;/style&gt;
  &lt;!--[if lt IE 9]&gt;
    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;
  &lt;![endif]--&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;For almost more than one month, we have been working in a distributed manner (I do not like the term remote). This was a new environment for us as most of other companies and learned few things along the way and in this post, so I want to share some of these learnings.&lt;/p&gt;
&lt;h3 id=&quot;health-safety&quot;&gt;Health &amp;amp; Safety&lt;/h3&gt;
&lt;p&gt;It goes without saying that the most important thing is to communicate to your team that they need to be healthy and safe. This is a number one priority.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Follow news about the pandemic situation to be informed for what comes next&lt;/li&gt;
&lt;li&gt;Follow WHO and CDC recommendations&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;communication&quot;&gt;Communication&lt;/h3&gt;
&lt;p&gt;No longer are those chitchats in the kitchen happening; no longer can you sense and understand the mood of people that are just “showing up to work”. No longer can you do check-ins on certain meeting outcomes with people through debriefs. This can increase frustration and can feel at times being isolated or “out of the loop”. However, this also is a good opportunity for everyone to double-down on communication to mitigate some of these issues and increase the feeling of “being in the loop” for you and your team.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Make your team feel connected&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Relay more and more information to your team to get them involved as well as making them part of the team&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Be available&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;We have now greats tools like Slack, Zoom. If this fails, good old phone still works for every other purpose&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Prefer written communication over 1-1 video Communication&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Everyone in the team can have access to information if the information is captured in the written form&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Increase the check-in frequency with your team&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Have your team to inform their manager about their wellbeing and safety&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Have verbal communication when necessary&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Zoom is great for certain items that you cannot communicate in a written form or get closure&lt;/li&gt;
&lt;li&gt;Have also vide option in zoom whenever you can&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Be clear and strive for clarity&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Without in person communication, there will be miscommunication. Be open to it and try to resolve conflicts with this in mind.&lt;/li&gt;
&lt;li&gt;Overcommunicate&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Be explicit and ask clarifying questions&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Confirm your understanding through follow-up questions&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Be flexible&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Have your own schedule and accept the same flexibility for other people&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;work&quot;&gt;Work&lt;/h3&gt;
&lt;p&gt;Many websites are experiencing high traffic and usage, so make sure you have enough hardware to support a smooth customer experience. Customers need us the most in these times, so we should make sure that every system is purring.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Coordinate deployments to be done in a synchronized manner to deliver high quality releases&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Review your on-call rotation and make necessary adjustments with people’s schedules&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Run various different playbooks for different failure scenarios and make sure that your system and your team is ready to respond to incidents&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Dry runs would be especially important and comes in handy for preparation&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Have a contingency plan on how you can support the systems in case if some of the team members become sick&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Make sure your team have internet connection and the tools that they need to do their job effectively&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Be rigorous for changes in production and have virtual war-rooms&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;
</content>
  </entry>
  <entry xml:base="https://bugra.github.io/">
    <title type="text">A Gentle Introduction to Bloom Filter</title>
    <id>https://bugra.github.io/posts/2016/6/5/a-gentle-introduction-to-bloom-filter</id>
    <updated>2016-06-05T00:00:00Z</updated>
    <published>2016-06-05T00:00:00Z</published>
    <link href="https://bugra.github.io/posts/2016/6/5/a-gentle-introduction-to-bloom-filter" />
    <author>
      <name>Bugra Akyildiz</name>
    </author>
    <content type="html">&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;
  &lt;title&gt;-&lt;/title&gt;
  &lt;style&gt;
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
    pre &gt; code.sourceCode { white-space: pre; position: relative; }
    pre &gt; code.sourceCode &gt; span { display: inline-block; line-height: 1.25; }
    pre &gt; code.sourceCode &gt; span:empty { height: 1.2em; }
    code.sourceCode &gt; span { color: inherit; text-decoration: inherit; }
    div.sourceCode { margin: 1em 0; }
    pre.sourceCode { margin: 0; }
    @media screen {
    div.sourceCode { overflow: auto; }
    }
    @media print {
    pre &gt; code.sourceCode { white-space: pre-wrap; }
    pre &gt; code.sourceCode &gt; span { text-indent: -5em; padding-left: 5em; }
    }
    pre.numberSource code
      { counter-reset: source-line 0; }
    pre.numberSource code &gt; span
      { position: relative; left: -4em; counter-increment: source-line; }
    pre.numberSource code &gt; span &gt; a:first-child::before
      { content: counter(source-line);
        position: relative; left: -1em; text-align: right; vertical-align: baseline;
        border: none; display: inline-block;
        -webkit-touch-callout: none; -webkit-user-select: none;
        -khtml-user-select: none; -moz-user-select: none;
        -ms-user-select: none; user-select: none;
        padding: 0 4px; width: 4em;
        color: #aaaaaa;
      }
    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
    div.sourceCode
      {   }
    @media screen {
    pre &gt; code.sourceCode &gt; span &gt; a:first-child::before { text-decoration: underline; }
    }
    code span.al { color: #ff0000; font-weight: bold; } /* Alert */
    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
    code span.at { color: #7d9029; } /* Attribute */
    code span.bn { color: #40a070; } /* BaseN */
    code span.bu { } /* BuiltIn */
    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
    code span.ch { color: #4070a0; } /* Char */
    code span.cn { color: #880000; } /* Constant */
    code span.co { color: #60a0b0; font-style: italic; } /* Comment */
    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
    code span.do { color: #ba2121; font-style: italic; } /* Documentation */
    code span.dt { color: #902000; } /* DataType */
    code span.dv { color: #40a070; } /* DecVal */
    code span.er { color: #ff0000; font-weight: bold; } /* Error */
    code span.ex { } /* Extension */
    code span.fl { color: #40a070; } /* Float */
    code span.fu { color: #06287e; } /* Function */
    code span.im { } /* Import */
    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
    code span.kw { color: #007020; font-weight: bold; } /* Keyword */
    code span.op { color: #666666; } /* Operator */
    code span.ot { color: #007020; } /* Other */
    code span.pp { color: #bc7a00; } /* Preprocessor */
    code span.sc { color: #4070a0; } /* SpecialChar */
    code span.ss { color: #bb6688; } /* SpecialString */
    code span.st { color: #4070a0; } /* String */
    code span.va { color: #19177c; } /* Variable */
    code span.vs { color: #4070a0; } /* VerbatimString */
    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
  &lt;/style&gt;
  &lt;!--[if lt IE 9]&gt;
    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;
  &lt;![endif]--&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;Bloom filters are probabilistic space-efficient data structures. They are very similar to hashtables; they are used exclusively membership existence in a set. However, they have a very powerful property which allows to make trade-off between space and false-positive rate when it comes to membership existence. Since it can make a tradeoff between space and false positive rate, it is called probabilistic data structure.&lt;/p&gt;
&lt;h3 id=&quot;space-efficiency&quot;&gt;Space Efficiency&lt;/h3&gt;
&lt;p&gt;Let’s detail a little bit on the space-efficiency. If you want to store a long list of items in a set, you could do in various ways. You could store that in a hashmap and then check existence in the hashmap which would allow you to insert and query very efficiently. However, since you will be storing the items as they are, it will not be very space efficient.&lt;/p&gt;
&lt;p&gt;If we want to also be space efficient, we could &lt;code&gt;hash&lt;/code&gt; the items before putting into a set. What else? We could use bit arrays to store hash of the items. What else, what else? Let’s also allow hash collision in the bit array. That is pretty much how Bloom Filters work, they are under the hood bit arrays which allow hash collisions; that produces false positives. Hash collisions exist in the Bloom Filters by design. Otherwise, they would not be compact.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Whenever a list or set is used, and space efficiency is important and significant, Bloom filter should be considered.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;bloom-filters-basics&quot;&gt;Bloom Filters Basics&lt;/h3&gt;
&lt;p&gt;Bloom Filter is a bit array of &lt;code&gt;N&lt;/code&gt; bits, where &lt;code&gt;N&lt;/code&gt; is the size of the bit array. It has another parameter which is the number of hash functions, &lt;code&gt;k&lt;/code&gt;. These hash functions are used to set bits in the bit array. When inserting an element &lt;code&gt;x&lt;/code&gt; into the filter, the bits in the &lt;code&gt;k&lt;/code&gt; indices &lt;code&gt;h1(x)&lt;/code&gt;, &lt;code&gt;h2(x)&lt;/code&gt;, …, &lt;code&gt;hk(x)&lt;/code&gt; are set, where the bit positions are determined by the hash functions. Note that as we increase the number of hash functions, the false positive rate of this probability goes to zero. However, it takes more time to insert and lookup as well as the bloom filter fills up more quickly.&lt;/p&gt;
&lt;p&gt;In order to to membership existence in the Bloom Filter, we need to chekck if all of the bits are set; very similar to how we insert item into a bloom filter. If all of the bits are set, then it means that that item is &lt;code&gt;probably&lt;/code&gt; in the bloom filter, where if anot all of the bits are set, then it means that the item is not in the Bloom Filter.&lt;/p&gt;
&lt;h3 id=&quot;basic-python-implementation&quot;&gt;Basic Python Implementation&lt;/h3&gt;
&lt;p&gt;If we want to implement a basic bloom filter, we could easily do so.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;#cb1-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; bitarray &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; bitarray&lt;/span&gt;
&lt;span id=&quot;cb1-2&quot;&gt;&lt;a href=&quot;#cb1-2&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-3&quot;&gt;&lt;a href=&quot;#cb1-3&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;# 3rd party&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-4&quot;&gt;&lt;a href=&quot;#cb1-4&quot;&gt;&lt;/a&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; mmh3&lt;/span&gt;
&lt;span id=&quot;cb1-5&quot;&gt;&lt;a href=&quot;#cb1-5&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-6&quot;&gt;&lt;a href=&quot;#cb1-6&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-7&quot;&gt;&lt;a href=&quot;#cb1-7&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; BloomFilter(&lt;span class=&quot;bu&quot;&gt;set&lt;/span&gt;):&lt;/span&gt;
&lt;span id=&quot;cb1-8&quot;&gt;&lt;a href=&quot;#cb1-8&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-9&quot;&gt;&lt;a href=&quot;#cb1-9&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;, size, hash_count):&lt;/span&gt;
&lt;span id=&quot;cb1-10&quot;&gt;&lt;a href=&quot;#cb1-10&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;bu&quot;&gt;super&lt;/span&gt;(BloomFilter, &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;__init__&lt;/span&gt;()&lt;/span&gt;
&lt;span id=&quot;cb1-11&quot;&gt;&lt;a href=&quot;#cb1-11&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.bit_array &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; bitarray(size)&lt;/span&gt;
&lt;span id=&quot;cb1-12&quot;&gt;&lt;a href=&quot;#cb1-12&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.bit_array.setall(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb1-13&quot;&gt;&lt;a href=&quot;#cb1-13&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.size &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; size&lt;/span&gt;
&lt;span id=&quot;cb1-14&quot;&gt;&lt;a href=&quot;#cb1-14&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.hash_count &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; hash_count&lt;/span&gt;
&lt;span id=&quot;cb1-15&quot;&gt;&lt;a href=&quot;#cb1-15&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-16&quot;&gt;&lt;a href=&quot;#cb1-16&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;__len__&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;):&lt;/span&gt;
&lt;span id=&quot;cb1-17&quot;&gt;&lt;a href=&quot;#cb1-17&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.size&lt;/span&gt;
&lt;span id=&quot;cb1-18&quot;&gt;&lt;a href=&quot;#cb1-18&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-19&quot;&gt;&lt;a href=&quot;#cb1-19&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;__iter__&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;):&lt;/span&gt;
&lt;span id=&quot;cb1-20&quot;&gt;&lt;a href=&quot;#cb1-20&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;iter&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.bit_array)&lt;/span&gt;
&lt;span id=&quot;cb1-21&quot;&gt;&lt;a href=&quot;#cb1-21&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-22&quot;&gt;&lt;a href=&quot;#cb1-22&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; add(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;, item):&lt;/span&gt;
&lt;span id=&quot;cb1-23&quot;&gt;&lt;a href=&quot;#cb1-23&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; ii &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.hash_count):&lt;/span&gt;
&lt;span id=&quot;cb1-24&quot;&gt;&lt;a href=&quot;#cb1-24&quot;&gt;&lt;/a&gt;            index &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; mmh3.&lt;span class=&quot;bu&quot;&gt;hash&lt;/span&gt;(item, ii) &lt;span class=&quot;op&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.size&lt;/span&gt;
&lt;span id=&quot;cb1-25&quot;&gt;&lt;a href=&quot;#cb1-25&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.bit_array[index] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-26&quot;&gt;&lt;a href=&quot;#cb1-26&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-27&quot;&gt;&lt;a href=&quot;#cb1-27&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-28&quot;&gt;&lt;a href=&quot;#cb1-28&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-29&quot;&gt;&lt;a href=&quot;#cb1-29&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;__contains__&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;, item):&lt;/span&gt;
&lt;span id=&quot;cb1-30&quot;&gt;&lt;a href=&quot;#cb1-30&quot;&gt;&lt;/a&gt;        out &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-31&quot;&gt;&lt;a href=&quot;#cb1-31&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; ii &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.hash_count):&lt;/span&gt;
&lt;span id=&quot;cb1-32&quot;&gt;&lt;a href=&quot;#cb1-32&quot;&gt;&lt;/a&gt;            index &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; mmh3.&lt;span class=&quot;bu&quot;&gt;hash&lt;/span&gt;(item, ii) &lt;span class=&quot;op&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.size&lt;/span&gt;
&lt;span id=&quot;cb1-33&quot;&gt;&lt;a href=&quot;#cb1-33&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.bit_array[index] &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;
&lt;span id=&quot;cb1-34&quot;&gt;&lt;a href=&quot;#cb1-34&quot;&gt;&lt;/a&gt;                out &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;False&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-35&quot;&gt;&lt;a href=&quot;#cb1-35&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-36&quot;&gt;&lt;a href=&quot;#cb1-36&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; out&lt;/span&gt;
&lt;span id=&quot;cb1-37&quot;&gt;&lt;a href=&quot;#cb1-37&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-38&quot;&gt;&lt;a href=&quot;#cb1-38&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-39&quot;&gt;&lt;a href=&quot;#cb1-39&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; main():&lt;/span&gt;
&lt;span id=&quot;cb1-40&quot;&gt;&lt;a href=&quot;#cb1-40&quot;&gt;&lt;/a&gt;    bloom &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; BloomFilter(&lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb1-41&quot;&gt;&lt;a href=&quot;#cb1-41&quot;&gt;&lt;/a&gt;    animals &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;st&quot;&gt;&amp;#39;dog&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;cat&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;giraffe&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;fly&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;mosquito&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;horse&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;eagle&amp;#39;&lt;/span&gt;,&lt;/span&gt;
&lt;span id=&quot;cb1-42&quot;&gt;&lt;a href=&quot;#cb1-42&quot;&gt;&lt;/a&gt;               &lt;span class=&quot;st&quot;&gt;&amp;#39;bird&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;bison&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;boar&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;butterfly&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;ant&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;anaconda&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;bear&amp;#39;&lt;/span&gt;,&lt;/span&gt;
&lt;span id=&quot;cb1-43&quot;&gt;&lt;a href=&quot;#cb1-43&quot;&gt;&lt;/a&gt;               &lt;span class=&quot;st&quot;&gt;&amp;#39;chicken&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;dolphin&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;donkey&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;crow&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;crocodile&amp;#39;&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&quot;cb1-44&quot;&gt;&lt;a href=&quot;#cb1-44&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;co&quot;&gt;# First insertion of animals into the bloom filter&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-45&quot;&gt;&lt;a href=&quot;#cb1-45&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; animal &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; animals:&lt;/span&gt;
&lt;span id=&quot;cb1-46&quot;&gt;&lt;a href=&quot;#cb1-46&quot;&gt;&lt;/a&gt;        bloom.add(animal)&lt;/span&gt;
&lt;span id=&quot;cb1-47&quot;&gt;&lt;a href=&quot;#cb1-47&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-48&quot;&gt;&lt;a href=&quot;#cb1-48&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;co&quot;&gt;# Membership existence for already inserted animals&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-49&quot;&gt;&lt;a href=&quot;#cb1-49&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;co&quot;&gt;# There should not be any false negatives&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-50&quot;&gt;&lt;a href=&quot;#cb1-50&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; animal &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; animals:&lt;/span&gt;
&lt;span id=&quot;cb1-51&quot;&gt;&lt;a href=&quot;#cb1-51&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; animal &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; bloom:&lt;/span&gt;
&lt;span id=&quot;cb1-52&quot;&gt;&lt;a href=&quot;#cb1-52&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt; is in bloom filter as expected&amp;#39;&lt;/span&gt;.&lt;span class=&quot;bu&quot;&gt;format&lt;/span&gt;(animal))&lt;/span&gt;
&lt;span id=&quot;cb1-53&quot;&gt;&lt;a href=&quot;#cb1-53&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;
&lt;span id=&quot;cb1-54&quot;&gt;&lt;a href=&quot;#cb1-54&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;#39;Something is terribly went wrong for &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;#39;&lt;/span&gt;.&lt;span class=&quot;bu&quot;&gt;format&lt;/span&gt;(animal))&lt;/span&gt;
&lt;span id=&quot;cb1-55&quot;&gt;&lt;a href=&quot;#cb1-55&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;#39;FALSE NEGATIVE!&amp;#39;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb1-56&quot;&gt;&lt;a href=&quot;#cb1-56&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-57&quot;&gt;&lt;a href=&quot;#cb1-57&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;co&quot;&gt;# Membership existence for not inserted animals&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-58&quot;&gt;&lt;a href=&quot;#cb1-58&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;co&quot;&gt;# There could be false positives&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-59&quot;&gt;&lt;a href=&quot;#cb1-59&quot;&gt;&lt;/a&gt;    other_animals &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;st&quot;&gt;&amp;#39;badger&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;cow&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;pig&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;sheep&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;bee&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;wolf&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;fox&amp;#39;&lt;/span&gt;,&lt;/span&gt;
&lt;span id=&quot;cb1-60&quot;&gt;&lt;a href=&quot;#cb1-60&quot;&gt;&lt;/a&gt;                     &lt;span class=&quot;st&quot;&gt;&amp;#39;whale&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;shark&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;fish&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;turkey&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;duck&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;dove&amp;#39;&lt;/span&gt;,&lt;/span&gt;
&lt;span id=&quot;cb1-61&quot;&gt;&lt;a href=&quot;#cb1-61&quot;&gt;&lt;/a&gt;                     &lt;span class=&quot;st&quot;&gt;&amp;#39;deer&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;elephant&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;frog&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;falcon&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;goat&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;gorilla&amp;#39;&lt;/span&gt;,&lt;/span&gt;
&lt;span id=&quot;cb1-62&quot;&gt;&lt;a href=&quot;#cb1-62&quot;&gt;&lt;/a&gt;                     &lt;span class=&quot;st&quot;&gt;&amp;#39;hawk&amp;#39;&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&quot;cb1-63&quot;&gt;&lt;a href=&quot;#cb1-63&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; other_animal &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; other_animals:&lt;/span&gt;
&lt;span id=&quot;cb1-64&quot;&gt;&lt;a href=&quot;#cb1-64&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; other_animal &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; bloom:&lt;/span&gt;
&lt;span id=&quot;cb1-65&quot;&gt;&lt;a href=&quot;#cb1-65&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt; is not in the bloom, but a false positive&amp;#39;&lt;/span&gt;.&lt;span class=&quot;bu&quot;&gt;format&lt;/span&gt;(other_animal))&lt;/span&gt;
&lt;span id=&quot;cb1-66&quot;&gt;&lt;a href=&quot;#cb1-66&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;
&lt;span id=&quot;cb1-67&quot;&gt;&lt;a href=&quot;#cb1-67&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt; is not in the bloom filter as expected&amp;#39;&lt;/span&gt;.&lt;span class=&quot;bu&quot;&gt;format&lt;/span&gt;(other_animal))&lt;/span&gt;
&lt;span id=&quot;cb1-68&quot;&gt;&lt;a href=&quot;#cb1-68&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-69&quot;&gt;&lt;a href=&quot;#cb1-69&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-70&quot;&gt;&lt;a href=&quot;#cb1-70&quot;&gt;&lt;/a&gt;&lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:&lt;/span&gt;
&lt;span id=&quot;cb1-71&quot;&gt;&lt;a href=&quot;#cb1-71&quot;&gt;&lt;/a&gt;    main()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Output is in the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dog is in bloom filter as expected
cat is in bloom filter as expected
giraffe is in bloom filter as expected
fly is in bloom filter as expected
mosquito is in bloom filter as expected
horse is in bloom filter as expected
eagle is in bloom filter as expected
bird is in bloom filter as expected
bison is in bloom filter as expected
boar is in bloom filter as expected
butterfly is in bloom filter as expected
ant is in bloom filter as expected
anaconda is in bloom filter as expected
bear is in bloom filter as expected
chicken is in bloom filter as expected
dolphin is in bloom filter as expected
donkey is in bloom filter as expected
crow is in bloom filter as expected
crocodile is in bloom filter as expected


badger is not in the bloom filter as expected
cow is not in the bloom filter as expected
pig is not in the bloom filter as expected
sheep is not in the bloom, but a false positive
bee is not in the bloom filter as expected
wolf is not in the bloom filter as expected
fox is not in the bloom filter as expected
whale is not in the bloom filter as expected
shark is not in the bloom, but a false positive
fish is not in the bloom, but a false positive
turkey is not in the bloom filter as expected
duck is not in the bloom filter as expected
dove is not in the bloom filter as expected
deer is not in the bloom filter as expected
elephant is not in the bloom, but a false positive
frog is not in the bloom filter as expected
falcon is not in the bloom filter as expected
goat is not in the bloom filter as expected
gorilla is not in the bloom filter as expected
hawk is not in the bloom filter as expected&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you could see the output from above, there are false positives, but there were not any false negatives as expected.&lt;/p&gt;
&lt;p&gt;Unlike this implementation of the Bloom Filter, most of the implementations that are available in various languages do not provide a hash function argument, though. This is because false-positive rate is more important than the hash function in terms of application and depending on the false positive rate, you could always adjust the number of hash functions that are going to be used. Generally, the &lt;code&gt;size&lt;/code&gt; and &lt;code&gt;error_rate&lt;/code&gt; which is actually the false positive rate of the Bloom Filter. If you decrease the &lt;code&gt;error_rate&lt;/code&gt; when you initialize the bloom filter, they would adjust the number of hash functions under the hood.&lt;/p&gt;
&lt;h3 id=&quot;false-positives&quot;&gt;False Positives&lt;/h3&gt;
&lt;p&gt;While Bloom Filters can say “definitely not in” with confidence, they will also say &lt;code&gt;possibly in&lt;/code&gt; for some number of items. Depending on the application, this could be a huge downside or it could be relatively okay. If it is okay to introduce false positives every now and then, you should definitely consider using Bloom Filters for membership existence for set operations.&lt;/p&gt;
&lt;p&gt;Also note that if you are decreasing the false positive rate arbitrarily, you would increase the number of hash functions which would add latency to both insertion and membership existence. One more thing in this section is that, if the hash functions are independent each other and distribute the input space pretty uniformly, then the theoretic false positive rate can be satisfied. Otherwise, the false positive rate of the bloom filter will be worse than the theoretic false positive rate as hash functions correlate each other and hash collisions would occur more often than desired.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When using a Bloom filter, consider the potential effects of false positives.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;deterministic&quot;&gt;Deterministic&lt;/h3&gt;
&lt;p&gt;If you are using the same size and same number hash functions as well as the hash function, bloom filter is deterministic on which items it gives positive response and which items it gives negative response. For an item &lt;code&gt;x&lt;/code&gt;, if it gives it is &lt;code&gt;probably in&lt;/code&gt; to that particular item, it will give the same response as 5 minutes later, 1 hour later, 1 day later and 1 week later. I was a little surprised when I found this. It was “probabilistic” so the response of the bloom filter should be somehow random, right? Not really. It is probabilistic in the sense that you cannot know which item it will say it is &lt;code&gt;probably in&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Otherwise, when it says that it is &lt;code&gt;probably in&lt;/code&gt;, it keeps saying the same thing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;disadvantages&quot;&gt;Disadvantages&lt;/h3&gt;
&lt;p&gt;Not everything is so great about Bloom Filters.&lt;/p&gt;
&lt;h3 id=&quot;the-size-of-the-bloom-filter&quot;&gt;The size of the Bloom Filter&lt;/h3&gt;
&lt;p&gt;The size of the Bloom Filters need to be known a priori based on the number of items that you are going to insert. This is not so great if you do not know or cannot approximate the number of items. You could put an arbitrarily large size, but that would be a waste in terms of space which we are trying to optimize in the very first place and the reason why we adopt to choose Bloom Filter. This could be fixed to create a bloom filter dynamic to the list of items that you want to fit, but depending on the application, this may not be always possible. There is a variant called &lt;a href=&quot;http://gsd.di.uminho.pt/members/cbm/ps/dbloom.pdf&quot;&gt;Scalable Bloom Filter&lt;/a&gt; which dynamically adjusts its size for different number of items. This could mitigate some of its shortcomings.&lt;/p&gt;
&lt;h3 id=&quot;constructing-and-membership-existence-in-bloom-filter&quot;&gt;Constructing and Membership Existence in Bloom Filter&lt;/h3&gt;
&lt;p&gt;While using the Bloom Filters, you not only accept false positive rates, but also you are willing to have a little bit overhead in terms of speed. Comparing to an hashmap, there is definitely an overhead in terms of hashing the items as well as constructing the bloom filter.&lt;/p&gt;
&lt;h3 id=&quot;cannot-give-the-items-that-you-inserted&quot;&gt;Cannot give the items that you inserted&lt;/h3&gt;
&lt;p&gt;Bloom Filter cannot produce a list of items that are inserted, you could only check if an item is in it, but never get the full item list because of hash collisions and hash functions. This is due to arguably the most significant advantage over other data structures; its space efficiency which comes with this disadvantage.&lt;/p&gt;
&lt;h3 id=&quot;removing-an-element&quot;&gt;Removing an element&lt;/h3&gt;
&lt;p&gt;Removing an element from the Bloom Filter is not possible, you cannot undo an insertion operation as hash results for different items can be indexed in the same position. If you want to do undo inserts, either you need to count the inserts for each index in the BloomFilter or you need to construct the BloomFilter from the start excluding a single item. Both methods involve an overhead and not straightforward. Depending on the application, one might want to try to reconstruct the bloom filter from the start instead of removing or deleting items from the Bloom Filter.&lt;/p&gt;
&lt;h3 id=&quot;implementations-in-different-languages&quot;&gt;Implementations in Different Languages&lt;/h3&gt;
&lt;p&gt;In production, you do not want to roll out your own bloom filter implementation. There are two reasons; one of them choosing and implementing good hash functions is crucially important to distribute the error rate for any number of inputs. Second of them, it needs to be battle-tested and should not be error prone both in terms of error rate and its size. There are open source implementations for every language, but the following for node.js and Python are pretty good in my experience:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/bloomfilter&quot;&gt;Node&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jaybaird/python-bloomfilter&quot;&gt;Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is also very fast implementation(10x faster than the above Python library both in terms of membership existence and adding the item into the bloom filter), &lt;a href=&quot;https://axiak.github.io/pybloomfiltermmap/&quot;&gt;pybloomfilter&lt;/a&gt;, but this runs on Pypy and does not support Python 3.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</content>
  </entry>
  <entry xml:base="https://bugra.github.io/">
    <title type="text">DynamoDB Learnings</title>
    <id>https://bugra.github.io/posts/2016/10/23/dynamodb-learnings</id>
    <updated>2016-10-23T00:00:00Z</updated>
    <published>2016-10-23T00:00:00Z</published>
    <link href="https://bugra.github.io/posts/2016/10/23/dynamodb-learnings" />
    <author>
      <name>Bugra Akyildiz</name>
    </author>
    <content type="html">&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;
  &lt;title&gt;-&lt;/title&gt;
  &lt;style&gt;
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
    pre &gt; code.sourceCode { white-space: pre; position: relative; }
    pre &gt; code.sourceCode &gt; span { display: inline-block; line-height: 1.25; }
    pre &gt; code.sourceCode &gt; span:empty { height: 1.2em; }
    code.sourceCode &gt; span { color: inherit; text-decoration: inherit; }
    div.sourceCode { margin: 1em 0; }
    pre.sourceCode { margin: 0; }
    @media screen {
    div.sourceCode { overflow: auto; }
    }
    @media print {
    pre &gt; code.sourceCode { white-space: pre-wrap; }
    pre &gt; code.sourceCode &gt; span { text-indent: -5em; padding-left: 5em; }
    }
    pre.numberSource code
      { counter-reset: source-line 0; }
    pre.numberSource code &gt; span
      { position: relative; left: -4em; counter-increment: source-line; }
    pre.numberSource code &gt; span &gt; a:first-child::before
      { content: counter(source-line);
        position: relative; left: -1em; text-align: right; vertical-align: baseline;
        border: none; display: inline-block;
        -webkit-touch-callout: none; -webkit-user-select: none;
        -khtml-user-select: none; -moz-user-select: none;
        -ms-user-select: none; user-select: none;
        padding: 0 4px; width: 4em;
        color: #aaaaaa;
      }
    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
    div.sourceCode
      {   }
    @media screen {
    pre &gt; code.sourceCode &gt; span &gt; a:first-child::before { text-decoration: underline; }
    }
    code span.al { color: #ff0000; font-weight: bold; } /* Alert */
    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
    code span.at { color: #7d9029; } /* Attribute */
    code span.bn { color: #40a070; } /* BaseN */
    code span.bu { } /* BuiltIn */
    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
    code span.ch { color: #4070a0; } /* Char */
    code span.cn { color: #880000; } /* Constant */
    code span.co { color: #60a0b0; font-style: italic; } /* Comment */
    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
    code span.do { color: #ba2121; font-style: italic; } /* Documentation */
    code span.dt { color: #902000; } /* DataType */
    code span.dv { color: #40a070; } /* DecVal */
    code span.er { color: #ff0000; font-weight: bold; } /* Error */
    code span.ex { } /* Extension */
    code span.fl { color: #40a070; } /* Float */
    code span.fu { color: #06287e; } /* Function */
    code span.im { } /* Import */
    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
    code span.kw { color: #007020; font-weight: bold; } /* Keyword */
    code span.op { color: #666666; } /* Operator */
    code span.ot { color: #007020; } /* Other */
    code span.pp { color: #bc7a00; } /* Preprocessor */
    code span.sc { color: #4070a0; } /* SpecialChar */
    code span.ss { color: #bb6688; } /* SpecialString */
    code span.st { color: #4070a0; } /* String */
    code span.va { color: #19177c; } /* Variable */
    code span.vs { color: #4070a0; } /* VerbatimString */
    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
  &lt;/style&gt;
  &lt;!--[if lt IE 9]&gt;
    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;
  &lt;![endif]--&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;At &lt;a href=&quot;https://hinge.co/&quot;&gt;Hinge&lt;/a&gt;, we have been using Dynamodb in production for more than 8 months and we just relaunched &lt;a href=&quot;https://techcrunch.com/2016/10/11/the-new-hinge-focused-exclusively-on-real-relationships-now-costs-7month/&quot;&gt;two weeks ago&lt;/a&gt; with full capacity. I want to share couple of learnings and why it made sense for us to store ratings in DynamoDB since I own the rating processing in the application. We are processing millions of ratings per day, upto so far, DynamoDB is holding pretty good so far. They are also crucial for our recommender to get smarter, so care is very much needed for ratings.&lt;/p&gt;
&lt;h3 id=&quot;dynamodb&quot;&gt;DynamoDB&lt;/h3&gt;
&lt;p&gt;It is a NoSQL database which is very similar to other NoSQL databases like Mongo, or other key-value storages like SimpleDB, but it is also different in various ways. These differences include a bunch of advantages and disadvantages.&lt;/p&gt;
&lt;h3 id=&quot;advantages&quot;&gt;Advantages&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;It is managed and hosted by AWS. You do not need to setup any infrastructure. AWS takes care of everything in terms of managing this database for you.&lt;/li&gt;
&lt;li&gt;It is very easy to setup the database; you only need database table name and throughput numbers to get started(not so much about &lt;code&gt;partition&lt;/code&gt;-&lt;code&gt;range&lt;/code&gt; key design). You want to create your &lt;code&gt;cloudformation&lt;/code&gt; template for reproduciability and key schema design so that you do not have to go through AWS web interface.&lt;/li&gt;
&lt;li&gt;It supports &lt;a href=&quot;http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Streams.Lambda.html&quot;&gt;triggers&lt;/a&gt; through AWS Lambda; if you want to take an action or fire an event from another application, you can do that through this trigger support.&lt;/li&gt;
&lt;li&gt;Integrates very well with Redshift(in general with other AWS offerings); you could load data into Redshift with a SQL command like in the following:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre class=&quot;sourceCode sql&quot;&gt;&lt;code class=&quot;sourceCode sql&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;#cb1-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;TRUNCATE&lt;/span&gt; REDSHIFT_TABLE_NAME;&lt;/span&gt;
&lt;span id=&quot;cb1-2&quot;&gt;&lt;a href=&quot;#cb1-2&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;COPY&lt;/span&gt; REDSHIFT_TABLE_NAME &lt;span class=&quot;kw&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;#39;dynamodb://DYNAMO_DB_TABLE_NAME&amp;#39;&lt;/span&gt; &lt;/span&gt;
&lt;span id=&quot;cb1-3&quot;&gt;&lt;a href=&quot;#cb1-3&quot;&gt;&lt;/a&gt;CREDENTIALS &lt;span class=&quot;st&quot;&gt;&amp;#39;aws_access_key_id=$AWS_ACCESS_KEY_ID;aws_secret_access_key=$AWS_SECRET_KEY_ID&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-4&quot;&gt;&lt;a href=&quot;#cb1-4&quot;&gt;&lt;/a&gt;TIMEFORMAT &lt;span class=&quot;st&quot;&gt;&amp;#39;epochsecs&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-5&quot;&gt;&lt;a href=&quot;#cb1-5&quot;&gt;&lt;/a&gt;READRATIO &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-6&quot;&gt;&lt;a href=&quot;#cb1-6&quot;&gt;&lt;/a&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you pass &lt;code&gt;TIMEFORMAT&lt;/code&gt;, then it recognizes the &lt;code&gt;datetime&lt;/code&gt; field and automatically converts to the timestamp. It works for &lt;code&gt;epochmillisecs&lt;/code&gt; as well. &lt;code&gt;READRATIO&lt;/code&gt; is what percentage of read throughput is this command is going to use when it tries to export the data.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There is no seemingly upper bound on how much scale you could get. The scaling is done by provisioning various&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;You pay for your usage or throughput, not the storage. I think this is a huge gain especially if your dataset grows very large quickly. If the most data becomes stale over time(never accessed), even better.&lt;/li&gt;
&lt;li&gt;Availability/Durability: all data is replicated to different availability zones by AWS, works like a charm.&lt;/li&gt;
&lt;li&gt;Scalable/Fast: they advertise the database “single-digit” millisecond in terms of speed and it definitely is fast. If you grow the database(say 1 Billion items), it still is single-digit millisecond. This is &lt;code&gt;nice&lt;/code&gt;. We are Python shop and using &lt;code&gt;boto&lt;/code&gt; to access the database, it averages 8 milliseconds for reads and 9 milliseconds for writes. We are happy about the performance so far.&lt;/li&gt;
&lt;li&gt;What they offer is actually not a database; it is an API which does database operations. Even RDS offerings of AWS, you need to do some configuration where you do not need anyhting in terms of operations for DynamoDB.&lt;/li&gt;
&lt;li&gt;It supports consistent reads. You can also do eventual consistent reads which are twice cheaper. It is flexible around consistency.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Everything is great, then? Not really, there are some things not so great about DynamoDB as well.&lt;/p&gt;
&lt;h3 id=&quot;disadvantages&quot;&gt;Disadvantages&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Lock-in. DynamoDB is not open-source and the time you start using the database, you are locked in the AWS.&lt;/li&gt;
&lt;li&gt;Even if it is very easy to setup the database, you need a good data model around &lt;code&gt;hash&lt;/code&gt; and &lt;code&gt;range&lt;/code&gt; key schema in order to utilize the database in a cost effective manner; especially considering you are paying for throughput, you do not want to do scan operations in the database.&lt;/li&gt;
&lt;li&gt;Dynamodb is not feature-rich in terms of how you index your data. You need to be cognizant of how you are going to query and write the data into database. Unlike Mongo, it does not support multi-indexing, you cannot add arbitrary indexes after you created the table. You cannot index the columns arbitrarily. You need to have a proper data model, you need to come up with a proper plan how you are going to read and write the data into DynamoDB with your &lt;code&gt;hash&lt;/code&gt; and &lt;code&gt;range&lt;/code&gt; keys. Spend time on designing data model before you even consider using the DynamoDB.&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;The single record cannot exceed 400 kb. If your data record is going to increase over time, be cognizant on this limitation.&lt;/li&gt;
&lt;li&gt;It puts limit on the total size of records(1 MB) when you want to query the database.&lt;/li&gt;
&lt;li&gt;Documentation is not very straightforward and I do not like the API &lt;code&gt;boto3&lt;/code&gt; offers. You need to &lt;code&gt;batch_write_item&lt;/code&gt; operation even if you want to delete a batch of items. Also, the keyword arguments and parameters you are passing is not very Pythonic.&lt;/li&gt;
&lt;li&gt;Native data types are limited, there is no &lt;code&gt;datetime&lt;/code&gt; support. You may want to convert the datetime into epoch seconds or milliseconds and store them as a &lt;code&gt;Number&lt;/code&gt;(which is &lt;code&gt;decimal.Decimal&lt;/code&gt; in Python)&lt;/li&gt;
&lt;li&gt;There is no automated provisioning for throughput. Everyhing around on this one is handled by AWS, but not this. There are third party libraries(like &lt;a href=&quot;http://dynamic-dynamodb.readthedocs.io/en/latest/&quot;&gt;&lt;code&gt;dynamic-dynamodb&lt;/code&gt;&lt;/a&gt; that does this for you, but we have not used it. This could be considered something not a bug but a feature. Because what happens is that, you end up overprovisioning the tables since aumated way is not supported, where you end paying more than you need, which is good for AWS, not so great for the user.&lt;/li&gt;
&lt;li&gt;You can downscale provisioned capacity only 6 times per 24 hours. Similarly, it could be a feature not a bug.&lt;/li&gt;
&lt;li&gt;Once you hit the provisioned rate limit, all of the consecutive requests are going to fail, which is not great. You need to be careful what you provision in terms of read and write throughput.&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;Tooling around the database is not great; you do not know how many machines are running, if your &lt;code&gt;hash&lt;/code&gt; keys are uniformly distributed(I will explain in a bit what this means). Monitoring could be done only through Cloudwatch, which is not great.&lt;/li&gt;
&lt;li&gt;Writes are five times more expensive than reads. Something to consider if your database operations are write heavy.&lt;/li&gt;
&lt;li&gt;You cannot remove all of the records in the database. There is no operation that is similar to &lt;code&gt;TRUNCATE&lt;/code&gt; in the sql world. When we were doing load testing, we were wiping out the database and you could wipe out all of the records if you know what all of the partition keys are. If you do not have the partition keys, you can delete and recreate it from start.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;our-usage&quot;&gt;Our Usage&lt;/h3&gt;
&lt;p&gt;We have ratings which is actually a person’s action on the other person. Currently, we have five allowed ratings; a person could &lt;code&gt;block&lt;/code&gt;, &lt;code&gt;report&lt;/code&gt;, &lt;code&gt;skip&lt;/code&gt;, &lt;code&gt;like&lt;/code&gt;, &lt;code&gt;note&lt;/code&gt; another person in the app. This is not a &lt;code&gt;rating&lt;/code&gt; per se, but this is part of our company vocabulary, so you are going to stick with that for the rest of the post. We want to store the actions of these people in order to recommend and not recommend people to each other. We also want to store a timestamp(&lt;code&gt;created_at&lt;/code&gt;) when this action first created and updated(&lt;code&gt;updated_at&lt;/code&gt;) in order to make a decision if we want to find out who the “first actor” is or “second actor” is. Another thing we want to store is the action itself of course which we call &lt;code&gt;state&lt;/code&gt; which is an &lt;code&gt;enum&lt;/code&gt; maps various actions into integers. Also, since we are allowing content like in the app, we also want to store that piece of &lt;code&gt;content&lt;/code&gt; as well as content type(&lt;code&gt;content_type&lt;/code&gt;).&lt;/p&gt;
&lt;h3 id=&quot;design-and-plan&quot;&gt;Design and Plan&lt;/h3&gt;
&lt;p&gt;We used to have MongoDB for our legacy rating table and that had a few issues when we have 1 TB of data, the query times got longer and longer over time and it was not performing well(to put it lightly). We were looking at different solutions at that point and there were two main alternatives we were looking at; Cassandra and DynamoDB. We eventually chose DynamoDB because it is hosted and managed by AWS(we did not want to go through the same thing with MongoDB),but Cassandra was as performant as DynamoDB for our use case. We did the testing for both databases in large number of records(1 Billion Items) and we were happy about the performance of both databases.&lt;/p&gt;
&lt;p&gt;We call the person who is acting &lt;code&gt;player&lt;/code&gt; and person who is being acted as &lt;code&gt;subject&lt;/code&gt;. In previous version of Hinge(Hinge v3), we were doing reads per pair of people to be able to see what their states are to process the new rating. We were also querying the database per &lt;code&gt;player&lt;/code&gt; only to be able to generate &lt;code&gt;ineligible&lt;/code&gt; people for the person, which means the people whom the &lt;code&gt;player&lt;/code&gt; rated(exception being is the &lt;code&gt;skip&lt;/code&gt;). That means we are going to two different read queries &lt;code&gt;player_id&lt;/code&gt; and &lt;code&gt;player_id-subject_id&lt;/code&gt;. This is great news! Because we do not need a whole bunch of indexes and if we can do two indexes which is kind of hierarchical(we are not going to query per &lt;code&gt;subject_id&lt;/code&gt;, but always depend on the &lt;code&gt;player_id&lt;/code&gt;), then it is all good.&lt;/p&gt;
&lt;p&gt;DynamoDB allows you to define a &lt;code&gt;hash&lt;/code&gt; or &lt;code&gt;partition&lt;/code&gt; key and we can map &lt;code&gt;player_id&lt;/code&gt; to be &lt;code&gt;hash&lt;/code&gt; key and &lt;code&gt;subject_id&lt;/code&gt; to be &lt;code&gt;range&lt;/code&gt; key pretty easily. Since subjects are always going to be under the umbrella of &lt;code&gt;player_id&lt;/code&gt;, it fits naturally to key schema that DynamoDB provides and which is exactly what we did following the guideline.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;| Partition key value                            | Uniformity |
| User ID, where the application has many users. | Good       | &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GuidelinesForTables.html#GuidelinesForTables.Partitions&quot;&gt;AWS Guideline for Tables&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As long as the guidelines is concerned, we are using user id for the partition key and another user id for range key; should be good.&lt;/p&gt;
&lt;p&gt;We could have a single &lt;code&gt;partition&lt;/code&gt; key which combines &lt;code&gt;player_id&lt;/code&gt; and &lt;code&gt;subject_id&lt;/code&gt;, but that required double writes for our use case since the states are not bidirectional. And if you remember writes are five times more expensive than reads, we opted in read query one more time to do the rating resolution rather than double-insert. Rating resolution is to figure out if the two people should be a connection or not.&lt;/p&gt;
&lt;p&gt;One problem is that, DynamoDB does the splitting(under the hood) based on the partition key and power users who like to rate a lot of people will have splitted partitions when the partition gets very large in terms of the total data that is being stored(&lt;a href=&quot;http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GuidelinesForTables.html&quot;&gt;larger than 10 gb&lt;/a&gt;), which will reduce our throughput. In these cases, the most optimal solution to somehow determine power users and inactive users so that you could assign them into the same partition in order to distribute the total data size uniformly within a single partition so that you would hit that 10 gb limit. However, we have not done this portion in this part of the design process, but it is something we keep an eye on.&lt;/p&gt;
&lt;p&gt;AWS does not provide a way to introspect the partitions, I wish there is a way to introspect(the total number of items and total size of the partition) to see and understand a little bit better what is going on under the hood.&lt;/p&gt;
&lt;h3 id=&quot;data-model&quot;&gt;Data Model&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;| player_id | subject_id | state | created_at | content | content_type | &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Where &lt;code&gt;player_id&lt;/code&gt;, &lt;code&gt;subject_id&lt;/code&gt;, ’content&lt;code&gt;and&lt;/code&gt;content_type&lt;code&gt;are strings and&lt;/code&gt;state&lt;code&gt;and&lt;/code&gt;created_at&lt;code&gt;are Numbers. We thought having a local secondary index on&lt;/code&gt;state` as well to produce ineligible list(which I am explaining in the next section), but we were not happy with the performance.&lt;/p&gt;
&lt;h3 id=&quot;ineligible-people&quot;&gt;Ineligible People&lt;/h3&gt;
&lt;p&gt;We produce an ineligible people list every time when we generate recommendations for our users. This is done by querying &lt;code&gt;subject_id&lt;/code&gt;s of &lt;code&gt;player_id&lt;/code&gt; from DynamoDB and putting into Bloom Filter before passing to the recommender service(we have SOA). This query is done against &lt;code&gt;player_id&lt;/code&gt; and very fast. Its payload is going to be large as time goes by, but nowhere near to 1 MB in near future(one needs to rate 62500 people since uuids are 16 bytes). Even so, we can do the query in two steps and it should not have bad performance characteristics.&lt;/p&gt;
&lt;h3 id=&quot;reads-per-pair&quot;&gt;Reads per pair&lt;/h3&gt;
&lt;p&gt;Reads that are done against &lt;code&gt;player_id&lt;/code&gt;-&lt;code&gt;subject_id&lt;/code&gt; are very fast as well as the writes. This was very important as we are processing very large volume of rating activity per day and even shaving 100 milliseconds would benefit the whole system. We do rating resolution every time when we process a rating which is like a FSM in order to figure out what the next state should be between people. We are doing an extra read in this operation since we are not double-inserting them into the database when we write the pair into the database.&lt;/p&gt;
&lt;h3 id=&quot;load-testing&quot;&gt;Load Testing&lt;/h3&gt;
&lt;p&gt;We of course did a load testing since we knew this database is going to get large very quickly and we did not want to have the similar problem in the early version of Hinge. What we did is that we sampled a bunch of ratings and filled a DynamoDB with 1.2 billion records and see what the performance of those queries would look like with that size.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2016/10/23/timing-dynamodb-violinplot.png&quot; title=&quot;Timing Against 1.2 Billion Records&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Timing Against 1.2 Billion Records&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Timings in &lt;code&gt;millisecond&lt;/code&gt; in the above graph and &lt;code&gt;write_record&lt;/code&gt; signifies a single write timing, &lt;code&gt;query_player_subject&lt;/code&gt; is read operation for &lt;code&gt;player_id&lt;/code&gt;-&lt;code&gt;subject_id&lt;/code&gt; and finally &lt;code&gt;get_subject_id_list&lt;/code&gt; is the list of subjects that player has rated.&lt;/p&gt;
&lt;p&gt;The timings were pretty great as you can see from the above graph. On average reading &lt;code&gt;player_id-subject_id&lt;/code&gt; which is the busiest lookup operation takes around 9 milliseconds and write was also in the similar timing range(8-9 milliseconds). The construction of bloom filter takes more than 15 milliseconds on average for that volume, but not even close to 20 milliseconds.&lt;/p&gt;
&lt;p&gt;One thing is that, the timings have pretty long tail and I cut around 200 milliseconds.&lt;/p&gt;
&lt;h3 id=&quot;possible-improvements&quot;&gt;Possible Improvements&lt;/h3&gt;
&lt;p&gt;If we were to store the both parties’ actions into a single rating record, that would be better in terms of number of queries are done against to the database, but I am not sure how much we would lose efficiency in terms of payload size. Right now we have connection object which is kind of two ratings merged into a single object. Also the bloated(already) &lt;code&gt;state&lt;/code&gt; enum would become more complex since the states need to encode 3 or 4 actions.(it encodes at most 2 actions right now). We can combine all of what happened into a single record, that would be much efficient and better in terms of query performance. However, I am not sure if that solution would be cleaner and better than what we have right now.&lt;/p&gt;
&lt;h3 id=&quot;performance-in-the-wild&quot;&gt;Performance in the Wild&lt;/h3&gt;
&lt;p&gt;It has been two weeks DynamoDB in the production since global relaunch. I have of course graphs(CloudWatch, albeit)&lt;br /&gt;
Especially, in the launch day, we knew that it was going to be crazy because of the PR and push. So, we overprovisioned pretty much everything in terms of infrastructure. DynamoDB was no exception.&lt;/p&gt;
&lt;h3 id=&quot;read-capacity&quot;&gt;Read Capacity&lt;/h3&gt;
&lt;p&gt;Except the first day, the graph looks pretty much cylical and periodic which is expected. We downscaled since we are not using much of our provisioned throughput after some time.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2016/10/23/read-capacity-dynamodb.png&quot; title=&quot;Read Capacity Provisioned and Consumed&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Read Capacity Provisioned and Consumed&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id=&quot;write-capacity&quot;&gt;Write Capacity&lt;/h4&gt;
&lt;p&gt;Write capacity follows read capacity similarly. Especially with user activity, both reads and writes are increasing and that is being reflected consumed throughput.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2016/10/23/write-capacity-dynamodb.png&quot; title=&quot;Write Capacity Provisioned and Consumed&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Write Capacity Provisioned and Consumed&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;So, what about the performance? At this point, we have many million ratings and large volume of ratings happening in every second.&lt;/p&gt;
&lt;h3 id=&quot;read-latency&quot;&gt;Read Latency&lt;/h3&gt;
&lt;p&gt;Except the first day(the activity bursted on that day), DynamoDB provides single digit millisecond consistently. What is amazing is that its performance does not degrade over time because of how they partition and do the request routing for a single query. We do not experience less than 4 millisecond timings from the application, though. We experience 8-9 milliseconds from the application.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2016/10/23/read-latency-dynamodb.png&quot; title=&quot;Read Latency&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Read Latency&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;write-latency&quot;&gt;Write Latency&lt;/h3&gt;
&lt;p&gt;Writes are more stable than reads even around the first day.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/static/images/work/notes/2016/10/23/write-latency-dynamodb.png&quot; title=&quot;Write Latency&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Write Latency&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;In software engineering, you can make technical decisions based on a number of factor things: how much you know about it(I do not know anything about DynamoDB, we should not choose it), how bad your bias is around it(MongoDB is terrible, everything about that db is just terrible), how much you understand(I do not know any SQL, so we should go with NoSQL, better yet, MongoDB), how easy it would be to implement(SQLAlchemy already provides a connection to Posgresql, let’s go with that one), how much code do you need to remove(I already wrote a wrapper around DB A, we should not go with DB B), how much you are interested in that area(DB is not my area, let’s implement some solution and move on) and so forth. All of the decision factors yield a suboptimal solution for the problem you have because your decision around that decision does not necessarily address the &lt;strong&gt;problem&lt;/strong&gt; at the moment, but rather your interpretation of what the problem is.&lt;/p&gt;
&lt;p&gt;Looking back, I think this is one of the things that I am extremely proud and will remember at my time at Hinge, not because the technology was cool(which kind of is), but we did our due diligence around the technology. We examined our needs, we knew what we needed from the database, we did load testing and scalability testing before dedicating ourselves fully. All of our ducks were in a row, when I start implementation on this one, we have not had any slight concern around the database capability since everything was so well-planned and therefore predictable. We kept an open mind since we did not want to experience putting out fire on the database when you have large amount of load. I am not saying we did not have any biases, I think we had a huge bias which made us choosing DynamoDB; where we really did not want to host and manage the database ourselves. At least, we acknowledged it and we knew about it. It did not get lost in translation.&lt;/p&gt;
&lt;p&gt;When &lt;strong&gt;Mise en place&lt;/strong&gt; is in action, the only thing is needed crafting and implementing the solution is itself, which is the easiest part.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</content>
  </entry>
  <entry xml:base="https://bugra.github.io/">
    <title type="text">Basic Math on How Bloom Filter Works</title>
    <id>https://bugra.github.io/posts/2016/8/27/regularization</id>
    <updated>2016-08-27T00:00:00Z</updated>
    <published>2016-08-27T00:00:00Z</published>
    <link href="https://bugra.github.io/posts/2016/8/27/regularization" />
    <author>
      <name>Bugra Akyildiz</name>
    </author>
    <content type="html">&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;
  &lt;title&gt;-&lt;/title&gt;
  &lt;style&gt;
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
  &lt;/style&gt;
  &lt;!--[if lt IE 9]&gt;
    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;
  &lt;![endif]--&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;I gave an overview on &lt;a href=&quot;https://bugra.github.io/work/notes/2016-06-05/a-gentle-introduction-to-bloom-filter/&quot;&gt;bloom filter&lt;/a&gt; in the previous blog post. But if I summarize the properties of bloom filter as a data structure;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fast inserts&lt;/li&gt;
&lt;li&gt;Fast lookups&lt;/li&gt;
&lt;li&gt;No false negatives -&amp;gt; all of the items that are inserted return true for membership existence&lt;/li&gt;
&lt;li&gt;You could make the tradeoff space vs false positive rate. If you do not care about the false positive rate, you could gain quite a bit of space.&lt;/li&gt;
&lt;li&gt;However, one can only lookup if a key existence, it does not allow to do reverse lookups since hash collisions are possible.&lt;/li&gt;
&lt;li&gt;Various set intersection properties are available(&lt;code&gt;union&lt;/code&gt;, &lt;code&gt;intersection&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We know that at this point that Bloom Filters are space efficient data structures which allow small false positive rate to be able to gain space from the items that are inserted into the Bloom Filter. As we increase the size of the Bloom Filter, we decrease the false positive rates as we reduce the hash collisions that occur for multiple items that are inserted in the Bloom Filter. Actually, as we increase the size of the bloom filter, we could approximate a vanilla hashmap. That means that we are actually not going to have hash collisions so that every item is mapped to a unique bit in the bloom filter.&lt;/p&gt;
&lt;p&gt;In this note, I am going to go a little deeper; to detail how the internals of the bloom filter works as well as tradeoff in a problem formulation.&lt;/p&gt;
&lt;h3 id=&quot;formulation&quot;&gt;Formulation&lt;/h3&gt;
&lt;p&gt;Bloom filter is nothing but array of &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;n&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; bits. We have generally &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;k&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; hash functions to be able to insert multiple bits in the array for a given item.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;n&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; bits: Array of &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;n&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; bits&lt;/li&gt;
&lt;li&gt;&lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;k&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; hash functions: $h_1, h_2, , h_k $&lt;/li&gt;
&lt;li&gt;&lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mfrac&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;/mfrac&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;b = \frac{n}{s}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;: # of bits per object in dataset &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;s&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We are using multiple hash functions because this makes full hash collisions less frequent and make the lookup more robust so that the false positive rate of the Bloom Filter would be very small. As you could imagine, multiple hash functions allow more than one collision per position in the bloom filter, but it may not report false positive rates as all of the hash value positions should return to 1 when there is going to be a false positive report.&lt;/p&gt;
&lt;p&gt;The reason why we define bits per object is because I am going to give the error formula in terms of the number of bits per object.&lt;/p&gt;
&lt;h3 id=&quot;insertion&quot;&gt;Insertion&lt;/h3&gt;
&lt;p&gt;The way we &lt;code&gt;insert&lt;/code&gt; an element in the bloom filter is to just set the positions for the values of the hash functions &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;k&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;. The way we formulate this is the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;x&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;: For &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mi&gt;…&lt;/mi&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;i=1, 2, \ldots, k&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;, set $A[h_i(x)] = 1 $&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For positions that are returned by the hash functions are going to be set to 1.&lt;/p&gt;
&lt;h3 id=&quot;lookup&quot;&gt;Lookup&lt;/h3&gt;
&lt;p&gt;Lookup is also very similar to inserts, we are going to check the positions for the value of the hash functions &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;k&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;. If every single bit in each position is set to 1, then we would say the item is “probably” there. - &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;x&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;: return True if and only if &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;[&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;prefix&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;postfix&quot;&gt;)&lt;/mo&gt;&lt;mo stretchy=&quot;false&quot; form=&quot;postfix&quot;&gt;]&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;A[h_i(x)] = 1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; for every &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mi&gt;…&lt;/mi&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;i = 1, 2, \ldots, k&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/p&gt;
&lt;h3 id=&quot;error-rate&quot;&gt;Error Rate&lt;/h3&gt;
&lt;p&gt;We could compute the false positive rate or error rate with the following formula. Note that as we increase the total hash functions, the error rate goes down as well as the we increase the bloom filter size since that would increase the total number of bits per object in dataset.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;≤&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;msup&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mfrac&gt;&lt;mrow&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;msup&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;/mfrac&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\le 1 - e^{\frac{-k^2}{b}}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For a given &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;b&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;, we could find the optimal &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;k&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; by taking the derivative of the error rate with respect to &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;k&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;.&lt;/p&gt;
&lt;h3 id=&quot;how-to-set-k&quot;&gt;How to set &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;k&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Taking derivative of error rate:&lt;/li&gt;
&lt;li&gt;$ k=b ln(2) $&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By doing so, for a given plausible &lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;b&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;, we could compute the total number of hash functions(&lt;math display=&quot;inline&quot; xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;k&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;) very easily.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</content>
  </entry>
</feed>
